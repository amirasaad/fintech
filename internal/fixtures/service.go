// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package fixtures

import (
	"context"

	"github.com/amirasaad/fintech/pkg/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthStrategy creates a new instance of MockAuthStrategy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthStrategy(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthStrategy {
	mock := &MockAuthStrategy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthStrategy is an autogenerated mock type for the AuthStrategy type
type MockAuthStrategy struct {
	mock.Mock
}

type MockAuthStrategy_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthStrategy) EXPECT() *MockAuthStrategy_Expecter {
	return &MockAuthStrategy_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function for the type MockAuthStrategy
func (_mock *MockAuthStrategy) GenerateToken(userID uuid.UUID) (string, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (string, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthStrategy_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockAuthStrategy_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - userID uuid.UUID
func (_e *MockAuthStrategy_Expecter) GenerateToken(userID interface{}) *MockAuthStrategy_GenerateToken_Call {
	return &MockAuthStrategy_GenerateToken_Call{Call: _e.mock.On("GenerateToken", userID)}
}

func (_c *MockAuthStrategy_GenerateToken_Call) Run(run func(userID uuid.UUID)) *MockAuthStrategy_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthStrategy_GenerateToken_Call) Return(s string, err error) *MockAuthStrategy_GenerateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAuthStrategy_GenerateToken_Call) RunAndReturn(run func(userID uuid.UUID) (string, error)) *MockAuthStrategy_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentUserID provides a mock function for the type MockAuthStrategy
func (_mock *MockAuthStrategy) GetCurrentUserID(ctx context.Context) (uuid.UUID, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUserID")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (uuid.UUID, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) uuid.UUID); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthStrategy_GetCurrentUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentUserID'
type MockAuthStrategy_GetCurrentUserID_Call struct {
	*mock.Call
}

// GetCurrentUserID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthStrategy_Expecter) GetCurrentUserID(ctx interface{}) *MockAuthStrategy_GetCurrentUserID_Call {
	return &MockAuthStrategy_GetCurrentUserID_Call{Call: _e.mock.On("GetCurrentUserID", ctx)}
}

func (_c *MockAuthStrategy_GetCurrentUserID_Call) Run(run func(ctx context.Context)) *MockAuthStrategy_GetCurrentUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthStrategy_GetCurrentUserID_Call) Return(uUID uuid.UUID, err error) *MockAuthStrategy_GetCurrentUserID_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockAuthStrategy_GetCurrentUserID_Call) RunAndReturn(run func(ctx context.Context) (uuid.UUID, error)) *MockAuthStrategy_GetCurrentUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockAuthStrategy
func (_mock *MockAuthStrategy) Login(identity string, password string) (*domain.User, string, error) {
	ret := _mock.Called(identity, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *domain.User
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*domain.User, string, error)); ok {
		return returnFunc(identity, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *domain.User); ok {
		r0 = returnFunc(identity, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = returnFunc(identity, password)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = returnFunc(identity, password)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockAuthStrategy_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthStrategy_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - identity string
//   - password string
func (_e *MockAuthStrategy_Expecter) Login(identity interface{}, password interface{}) *MockAuthStrategy_Login_Call {
	return &MockAuthStrategy_Login_Call{Call: _e.mock.On("Login", identity, password)}
}

func (_c *MockAuthStrategy_Login_Call) Run(run func(identity string, password string)) *MockAuthStrategy_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthStrategy_Login_Call) Return(user *domain.User, s string, err error) *MockAuthStrategy_Login_Call {
	_c.Call.Return(user, s, err)
	return _c
}

func (_c *MockAuthStrategy_Login_Call) RunAndReturn(run func(identity string, password string) (*domain.User, string, error)) *MockAuthStrategy_Login_Call {
	_c.Call.Return(run)
	return _c
}
