// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amirasaad/fintech/pkg/dto"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserRepository is an autogenerated mock type for the Repository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type UserRepository
func (_mock *UserRepository) Create(ctx context.Context, create *dto.UserCreate) error {
	ret := _mock.Called(ctx, create)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.UserCreate) error); ok {
		r0 = returnFunc(ctx, create)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - create *dto.UserCreate
func (_e *UserRepository_Expecter) Create(ctx interface{}, create interface{}) *UserRepository_Create_Call {
	return &UserRepository_Create_Call{Call: _e.mock.On("Create", ctx, create)}
}

func (_c *UserRepository_Create_Call) Run(run func(ctx context.Context, create *dto.UserCreate)) *UserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dto.UserCreate
		if args[1] != nil {
			arg1 = args[1].(*dto.UserCreate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_Create_Call) Return(err error) *UserRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserRepository_Create_Call) RunAndReturn(run func(ctx context.Context, create *dto.UserCreate) error) *UserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type UserRepository
func (_mock *UserRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UserRepository_Expecter) Delete(ctx interface{}, id interface{}) *UserRepository_Delete_Call {
	return &UserRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *UserRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UserRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_Delete_Call) Return(err error) *UserRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *UserRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type UserRepository
func (_mock *UserRepository) Exists(ctx context.Context, id uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type UserRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UserRepository_Expecter) Exists(ctx interface{}, id interface{}) *UserRepository_Exists_Call {
	return &UserRepository_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *UserRepository_Exists_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UserRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_Exists_Call) Return(b bool, err error) *UserRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *UserRepository_Exists_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (bool, error)) *UserRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsByEmail provides a mock function for the type UserRepository
func (_mock *UserRepository) ExistsByEmail(ctx context.Context, email string) (bool, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByEmail")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_ExistsByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsByEmail'
type UserRepository_ExistsByEmail_Call struct {
	*mock.Call
}

// ExistsByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepository_Expecter) ExistsByEmail(ctx interface{}, email interface{}) *UserRepository_ExistsByEmail_Call {
	return &UserRepository_ExistsByEmail_Call{Call: _e.mock.On("ExistsByEmail", ctx, email)}
}

func (_c *UserRepository_ExistsByEmail_Call) Run(run func(ctx context.Context, email string)) *UserRepository_ExistsByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_ExistsByEmail_Call) Return(b bool, err error) *UserRepository_ExistsByEmail_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *UserRepository_ExistsByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (bool, error)) *UserRepository_ExistsByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsByUsername provides a mock function for the type UserRepository
func (_mock *UserRepository) ExistsByUsername(ctx context.Context, username string) (bool, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByUsername")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_ExistsByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsByUsername'
type UserRepository_ExistsByUsername_Call struct {
	*mock.Call
}

// ExistsByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UserRepository_Expecter) ExistsByUsername(ctx interface{}, username interface{}) *UserRepository_ExistsByUsername_Call {
	return &UserRepository_ExistsByUsername_Call{Call: _e.mock.On("ExistsByUsername", ctx, username)}
}

func (_c *UserRepository_ExistsByUsername_Call) Run(run func(ctx context.Context, username string)) *UserRepository_ExistsByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_ExistsByUsername_Call) Return(b bool, err error) *UserRepository_ExistsByUsername_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *UserRepository_ExistsByUsername_Call) RunAndReturn(run func(ctx context.Context, username string) (bool, error)) *UserRepository_ExistsByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type UserRepository
func (_mock *UserRepository) Get(ctx context.Context, id uuid.UUID) (*dto.UserRead, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *dto.UserRead
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dto.UserRead, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dto.UserRead); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserRead)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UserRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UserRepository_Expecter) Get(ctx interface{}, id interface{}) *UserRepository_Get_Call {
	return &UserRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *UserRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UserRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_Get_Call) Return(userRead *dto.UserRead, err error) *UserRepository_Get_Call {
	_c.Call.Return(userRead, err)
	return _c
}

func (_c *UserRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*dto.UserRead, error)) *UserRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type UserRepository
func (_mock *UserRepository) GetByEmail(ctx context.Context, email string) (*dto.UserRead, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *dto.UserRead
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*dto.UserRead, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *dto.UserRead); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserRead)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type UserRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepository_Expecter) GetByEmail(ctx interface{}, email interface{}) *UserRepository_GetByEmail_Call {
	return &UserRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *UserRepository_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *UserRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_GetByEmail_Call) Return(userRead *dto.UserRead, err error) *UserRepository_GetByEmail_Call {
	_c.Call.Return(userRead, err)
	return _c
}

func (_c *UserRepository_GetByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*dto.UserRead, error)) *UserRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function for the type UserRepository
func (_mock *UserRepository) GetByUsername(ctx context.Context, username string) (*dto.UserRead, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *dto.UserRead
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*dto.UserRead, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *dto.UserRead); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserRead)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type UserRepository_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UserRepository_Expecter) GetByUsername(ctx interface{}, username interface{}) *UserRepository_GetByUsername_Call {
	return &UserRepository_GetByUsername_Call{Call: _e.mock.On("GetByUsername", ctx, username)}
}

func (_c *UserRepository_GetByUsername_Call) Run(run func(ctx context.Context, username string)) *UserRepository_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_GetByUsername_Call) Return(userRead *dto.UserRead, err error) *UserRepository_GetByUsername_Call {
	_c.Call.Return(userRead, err)
	return _c
}

func (_c *UserRepository_GetByUsername_Call) RunAndReturn(run func(ctx context.Context, username string) (*dto.UserRead, error)) *UserRepository_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type UserRepository
func (_mock *UserRepository) List(ctx context.Context, page int, pageSize int) ([]*dto.UserRead, error) {
	ret := _mock.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*dto.UserRead
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*dto.UserRead, error)); ok {
		return returnFunc(ctx, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*dto.UserRead); ok {
		r0 = returnFunc(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.UserRead)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type UserRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - page int
//   - pageSize int
func (_e *UserRepository_Expecter) List(ctx interface{}, page interface{}, pageSize interface{}) *UserRepository_List_Call {
	return &UserRepository_List_Call{Call: _e.mock.On("List", ctx, page, pageSize)}
}

func (_c *UserRepository_List_Call) Run(run func(ctx context.Context, page int, pageSize int)) *UserRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserRepository_List_Call) Return(userReads []*dto.UserRead, err error) *UserRepository_List_Call {
	_c.Call.Return(userReads, err)
	return _c
}

func (_c *UserRepository_List_Call) RunAndReturn(run func(ctx context.Context, page int, pageSize int) ([]*dto.UserRead, error)) *UserRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type UserRepository
func (_mock *UserRepository) Update(ctx context.Context, id uuid.UUID, update *dto.UserUpdate) error {
	ret := _mock.Called(ctx, id, update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *dto.UserUpdate) error); ok {
		r0 = returnFunc(ctx, id, update)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - update *dto.UserUpdate
func (_e *UserRepository_Expecter) Update(ctx interface{}, id interface{}, update interface{}) *UserRepository_Update_Call {
	return &UserRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, update)}
}

func (_c *UserRepository_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, update *dto.UserUpdate)) *UserRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *dto.UserUpdate
		if args[2] != nil {
			arg2 = args[2].(*dto.UserUpdate)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserRepository_Update_Call) Return(err error) *UserRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, update *dto.UserUpdate) error) *UserRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
