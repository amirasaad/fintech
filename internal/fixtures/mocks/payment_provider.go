// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amirasaad/fintech/pkg/provider/payment"
	mock "github.com/stretchr/testify/mock"
)

// NewPaymentProvider creates a new instance of PaymentProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentProvider {
	mock := &PaymentProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PaymentProvider is an autogenerated mock type for the Payment type
type PaymentProvider struct {
	mock.Mock
}

type PaymentProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentProvider) EXPECT() *PaymentProvider_Expecter {
	return &PaymentProvider_Expecter{mock: &_m.Mock}
}

// HandleWebhook provides a mock function for the type PaymentProvider
func (_mock *PaymentProvider) HandleWebhook(ctx context.Context, payload []byte, signature string) (*payment.PaymentEvent, error) {
	ret := _mock.Called(ctx, payload, signature)

	if len(ret) == 0 {
		panic("no return value specified for HandleWebhook")
	}

	var r0 *payment.PaymentEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string) (*payment.PaymentEvent, error)); ok {
		return returnFunc(ctx, payload, signature)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string) *payment.PaymentEvent); ok {
		r0 = returnFunc(ctx, payload, signature)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.PaymentEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = returnFunc(ctx, payload, signature)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PaymentProvider_HandleWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleWebhook'
type PaymentProvider_HandleWebhook_Call struct {
	*mock.Call
}

// HandleWebhook is a helper method to define mock.On call
//   - ctx context.Context
//   - payload []byte
//   - signature string
func (_e *PaymentProvider_Expecter) HandleWebhook(ctx interface{}, payload interface{}, signature interface{}) *PaymentProvider_HandleWebhook_Call {
	return &PaymentProvider_HandleWebhook_Call{Call: _e.mock.On("HandleWebhook", ctx, payload, signature)}
}

func (_c *PaymentProvider_HandleWebhook_Call) Run(run func(ctx context.Context, payload []byte, signature string)) *PaymentProvider_HandleWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PaymentProvider_HandleWebhook_Call) Return(paymentEvent *payment.PaymentEvent, err error) *PaymentProvider_HandleWebhook_Call {
	_c.Call.Return(paymentEvent, err)
	return _c
}

func (_c *PaymentProvider_HandleWebhook_Call) RunAndReturn(run func(ctx context.Context, payload []byte, signature string) (*payment.PaymentEvent, error)) *PaymentProvider_HandleWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// InitiatePayment provides a mock function for the type PaymentProvider
func (_mock *PaymentProvider) InitiatePayment(ctx context.Context, params *payment.InitiatePaymentParams) (*payment.InitiatePaymentResponse, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for InitiatePayment")
	}

	var r0 *payment.InitiatePaymentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *payment.InitiatePaymentParams) (*payment.InitiatePaymentResponse, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *payment.InitiatePaymentParams) *payment.InitiatePaymentResponse); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.InitiatePaymentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *payment.InitiatePaymentParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PaymentProvider_InitiatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiatePayment'
type PaymentProvider_InitiatePayment_Call struct {
	*mock.Call
}

// InitiatePayment is a helper method to define mock.On call
//   - ctx context.Context
//   - params *payment.InitiatePaymentParams
func (_e *PaymentProvider_Expecter) InitiatePayment(ctx interface{}, params interface{}) *PaymentProvider_InitiatePayment_Call {
	return &PaymentProvider_InitiatePayment_Call{Call: _e.mock.On("InitiatePayment", ctx, params)}
}

func (_c *PaymentProvider_InitiatePayment_Call) Run(run func(ctx context.Context, params *payment.InitiatePaymentParams)) *PaymentProvider_InitiatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *payment.InitiatePaymentParams
		if args[1] != nil {
			arg1 = args[1].(*payment.InitiatePaymentParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PaymentProvider_InitiatePayment_Call) Return(initiatePaymentResponse *payment.InitiatePaymentResponse, err error) *PaymentProvider_InitiatePayment_Call {
	_c.Call.Return(initiatePaymentResponse, err)
	return _c
}

func (_c *PaymentProvider_InitiatePayment_Call) RunAndReturn(run func(ctx context.Context, params *payment.InitiatePaymentParams) (*payment.InitiatePaymentResponse, error)) *PaymentProvider_InitiatePayment_Call {
	_c.Call.Return(run)
	return _c
}

// InitiatePayout provides a mock function for the type PaymentProvider
func (_mock *PaymentProvider) InitiatePayout(ctx context.Context, params *payment.InitiatePayoutParams) (*payment.InitiatePayoutResponse, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for InitiatePayout")
	}

	var r0 *payment.InitiatePayoutResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *payment.InitiatePayoutParams) (*payment.InitiatePayoutResponse, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *payment.InitiatePayoutParams) *payment.InitiatePayoutResponse); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.InitiatePayoutResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *payment.InitiatePayoutParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PaymentProvider_InitiatePayout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiatePayout'
type PaymentProvider_InitiatePayout_Call struct {
	*mock.Call
}

// InitiatePayout is a helper method to define mock.On call
//   - ctx context.Context
//   - params *payment.InitiatePayoutParams
func (_e *PaymentProvider_Expecter) InitiatePayout(ctx interface{}, params interface{}) *PaymentProvider_InitiatePayout_Call {
	return &PaymentProvider_InitiatePayout_Call{Call: _e.mock.On("InitiatePayout", ctx, params)}
}

func (_c *PaymentProvider_InitiatePayout_Call) Run(run func(ctx context.Context, params *payment.InitiatePayoutParams)) *PaymentProvider_InitiatePayout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *payment.InitiatePayoutParams
		if args[1] != nil {
			arg1 = args[1].(*payment.InitiatePayoutParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PaymentProvider_InitiatePayout_Call) Return(initiatePayoutResponse *payment.InitiatePayoutResponse, err error) *PaymentProvider_InitiatePayout_Call {
	_c.Call.Return(initiatePayoutResponse, err)
	return _c
}

func (_c *PaymentProvider_InitiatePayout_Call) RunAndReturn(run func(ctx context.Context, params *payment.InitiatePayoutParams) (*payment.InitiatePayoutResponse, error)) *PaymentProvider_InitiatePayout_Call {
	_c.Call.Return(run)
	return _c
}
