// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amirasaad/fintech/pkg/domain/user"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewStrategy creates a new instance of Strategy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStrategy(t interface {
	mock.TestingT
	Cleanup(func())
}) *Strategy {
	mock := &Strategy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Strategy is an autogenerated mock type for the Strategy type
type Strategy struct {
	mock.Mock
}

type Strategy_Expecter struct {
	mock *mock.Mock
}

func (_m *Strategy) EXPECT() *Strategy_Expecter {
	return &Strategy_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function for the type Strategy
func (_mock *Strategy) GenerateToken(user1 *user.User) (string, error) {
	ret := _mock.Called(user1)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*user.User) (string, error)); ok {
		return returnFunc(user1)
	}
	if returnFunc, ok := ret.Get(0).(func(*user.User) string); ok {
		r0 = returnFunc(user1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = returnFunc(user1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Strategy_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type Strategy_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - user1 *user.User
func (_e *Strategy_Expecter) GenerateToken(user1 interface{}) *Strategy_GenerateToken_Call {
	return &Strategy_GenerateToken_Call{Call: _e.mock.On("GenerateToken", user1)}
}

func (_c *Strategy_GenerateToken_Call) Run(run func(user1 *user.User)) *Strategy_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *user.User
		if args[0] != nil {
			arg0 = args[0].(*user.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Strategy_GenerateToken_Call) Return(s string, err error) *Strategy_GenerateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Strategy_GenerateToken_Call) RunAndReturn(run func(user1 *user.User) (string, error)) *Strategy_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentUserID provides a mock function for the type Strategy
func (_mock *Strategy) GetCurrentUserID(ctx context.Context) (uuid.UUID, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUserID")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (uuid.UUID, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) uuid.UUID); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Strategy_GetCurrentUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentUserID'
type Strategy_GetCurrentUserID_Call struct {
	*mock.Call
}

// GetCurrentUserID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Strategy_Expecter) GetCurrentUserID(ctx interface{}) *Strategy_GetCurrentUserID_Call {
	return &Strategy_GetCurrentUserID_Call{Call: _e.mock.On("GetCurrentUserID", ctx)}
}

func (_c *Strategy_GetCurrentUserID_Call) Run(run func(ctx context.Context)) *Strategy_GetCurrentUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Strategy_GetCurrentUserID_Call) Return(uUID uuid.UUID, err error) *Strategy_GetCurrentUserID_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *Strategy_GetCurrentUserID_Call) RunAndReturn(run func(ctx context.Context) (uuid.UUID, error)) *Strategy_GetCurrentUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type Strategy
func (_mock *Strategy) Login(ctx context.Context, identity string, password string) (*user.User, error) {
	ret := _mock.Called(ctx, identity, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*user.User, error)); ok {
		return returnFunc(ctx, identity, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *user.User); ok {
		r0 = returnFunc(ctx, identity, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, identity, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Strategy_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Strategy_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - identity string
//   - password string
func (_e *Strategy_Expecter) Login(ctx interface{}, identity interface{}, password interface{}) *Strategy_Login_Call {
	return &Strategy_Login_Call{Call: _e.mock.On("Login", ctx, identity, password)}
}

func (_c *Strategy_Login_Call) Run(run func(ctx context.Context, identity string, password string)) *Strategy_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Strategy_Login_Call) Return(user1 *user.User, err error) *Strategy_Login_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *Strategy_Login_Call) RunAndReturn(run func(ctx context.Context, identity string, password string) (*user.User, error)) *Strategy_Login_Call {
	_c.Call.Return(run)
	return _c
}
