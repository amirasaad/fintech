// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amirasaad/fintech/pkg/dto"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AccountRepository is an autogenerated mock type for the Repository type
type AccountRepository struct {
	mock.Mock
}

type AccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountRepository) EXPECT() *AccountRepository_Expecter {
	return &AccountRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type AccountRepository
func (_mock *AccountRepository) Create(ctx context.Context, create dto.AccountCreate) error {
	ret := _mock.Called(ctx, create)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.AccountCreate) error); ok {
		r0 = returnFunc(ctx, create)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AccountRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AccountRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - create dto.AccountCreate
func (_e *AccountRepository_Expecter) Create(ctx interface{}, create interface{}) *AccountRepository_Create_Call {
	return &AccountRepository_Create_Call{Call: _e.mock.On("Create", ctx, create)}
}

func (_c *AccountRepository_Create_Call) Run(run func(ctx context.Context, create dto.AccountCreate)) *AccountRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dto.AccountCreate
		if args[1] != nil {
			arg1 = args[1].(dto.AccountCreate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AccountRepository_Create_Call) Return(err error) *AccountRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AccountRepository_Create_Call) RunAndReturn(run func(ctx context.Context, create dto.AccountCreate) error) *AccountRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type AccountRepository
func (_mock *AccountRepository) Get(ctx context.Context, id uuid.UUID) (*dto.AccountRead, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *dto.AccountRead
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dto.AccountRead, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dto.AccountRead); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AccountRead)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccountRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type AccountRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *AccountRepository_Expecter) Get(ctx interface{}, id interface{}) *AccountRepository_Get_Call {
	return &AccountRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *AccountRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *AccountRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AccountRepository_Get_Call) Return(accountRead *dto.AccountRead, err error) *AccountRepository_Get_Call {
	_c.Call.Return(accountRead, err)
	return _c
}

func (_c *AccountRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*dto.AccountRead, error)) *AccountRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUser provides a mock function for the type AccountRepository
func (_mock *AccountRepository) ListByUser(ctx context.Context, userID uuid.UUID) ([]*dto.AccountRead, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListByUser")
	}

	var r0 []*dto.AccountRead
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*dto.AccountRead, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*dto.AccountRead); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.AccountRead)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AccountRepository_ListByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUser'
type AccountRepository_ListByUser_Call struct {
	*mock.Call
}

// ListByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *AccountRepository_Expecter) ListByUser(ctx interface{}, userID interface{}) *AccountRepository_ListByUser_Call {
	return &AccountRepository_ListByUser_Call{Call: _e.mock.On("ListByUser", ctx, userID)}
}

func (_c *AccountRepository_ListByUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *AccountRepository_ListByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AccountRepository_ListByUser_Call) Return(accountReads []*dto.AccountRead, err error) *AccountRepository_ListByUser_Call {
	_c.Call.Return(accountReads, err)
	return _c
}

func (_c *AccountRepository_ListByUser_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) ([]*dto.AccountRead, error)) *AccountRepository_ListByUser_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type AccountRepository
func (_mock *AccountRepository) Update(ctx context.Context, id uuid.UUID, update dto.AccountUpdate) error {
	ret := _mock.Called(ctx, id, update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.AccountUpdate) error); ok {
		r0 = returnFunc(ctx, id, update)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AccountRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AccountRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - update dto.AccountUpdate
func (_e *AccountRepository_Expecter) Update(ctx interface{}, id interface{}, update interface{}) *AccountRepository_Update_Call {
	return &AccountRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, update)}
}

func (_c *AccountRepository_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, update dto.AccountUpdate)) *AccountRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 dto.AccountUpdate
		if args[2] != nil {
			arg2 = args[2].(dto.AccountUpdate)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AccountRepository_Update_Call) Return(err error) *AccountRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AccountRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, update dto.AccountUpdate) error) *AccountRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
