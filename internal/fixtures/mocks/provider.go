// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amirasaad/fintech/pkg/provider"
	mock "github.com/stretchr/testify/mock"
)

// NewExchangeRateProvider creates a new instance of ExchangeRateProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExchangeRateProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExchangeRateProvider {
	mock := &ExchangeRateProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ExchangeRateProvider is an autogenerated mock type for the ExchangeRate type
type ExchangeRateProvider struct {
	mock.Mock
}

type ExchangeRateProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ExchangeRateProvider) EXPECT() *ExchangeRateProvider_Expecter {
	return &ExchangeRateProvider_Expecter{mock: &_m.Mock}
}

// GetRate provides a mock function for the type ExchangeRateProvider
func (_mock *ExchangeRateProvider) GetRate(ctx context.Context, from string, to string) (*provider.ExchangeInfo, error) {
	ret := _mock.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetRate")
	}

	var r0 *provider.ExchangeInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*provider.ExchangeInfo, error)); ok {
		return returnFunc(ctx, from, to)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *provider.ExchangeInfo); ok {
		r0 = returnFunc(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.ExchangeInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExchangeRateProvider_GetRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRate'
type ExchangeRateProvider_GetRate_Call struct {
	*mock.Call
}

// GetRate is a helper method to define mock.On call
//   - ctx context.Context
//   - from string
//   - to string
func (_e *ExchangeRateProvider_Expecter) GetRate(ctx interface{}, from interface{}, to interface{}) *ExchangeRateProvider_GetRate_Call {
	return &ExchangeRateProvider_GetRate_Call{Call: _e.mock.On("GetRate", ctx, from, to)}
}

func (_c *ExchangeRateProvider_GetRate_Call) Run(run func(ctx context.Context, from string, to string)) *ExchangeRateProvider_GetRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ExchangeRateProvider_GetRate_Call) Return(exchangeInfo *provider.ExchangeInfo, err error) *ExchangeRateProvider_GetRate_Call {
	_c.Call.Return(exchangeInfo, err)
	return _c
}

func (_c *ExchangeRateProvider_GetRate_Call) RunAndReturn(run func(ctx context.Context, from string, to string) (*provider.ExchangeInfo, error)) *ExchangeRateProvider_GetRate_Call {
	_c.Call.Return(run)
	return _c
}

// GetRates provides a mock function for the type ExchangeRateProvider
func (_mock *ExchangeRateProvider) GetRates(ctx context.Context, from string) (map[string]*provider.ExchangeInfo, error) {
	ret := _mock.Called(ctx, from)

	if len(ret) == 0 {
		panic("no return value specified for GetRates")
	}

	var r0 map[string]*provider.ExchangeInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (map[string]*provider.ExchangeInfo, error)); ok {
		return returnFunc(ctx, from)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) map[string]*provider.ExchangeInfo); ok {
		r0 = returnFunc(ctx, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*provider.ExchangeInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, from)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExchangeRateProvider_GetRates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRates'
type ExchangeRateProvider_GetRates_Call struct {
	*mock.Call
}

// GetRates is a helper method to define mock.On call
//   - ctx context.Context
//   - from string
func (_e *ExchangeRateProvider_Expecter) GetRates(ctx interface{}, from interface{}) *ExchangeRateProvider_GetRates_Call {
	return &ExchangeRateProvider_GetRates_Call{Call: _e.mock.On("GetRates", ctx, from)}
}

func (_c *ExchangeRateProvider_GetRates_Call) Run(run func(ctx context.Context, from string)) *ExchangeRateProvider_GetRates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ExchangeRateProvider_GetRates_Call) Return(stringToExchangeInfo map[string]*provider.ExchangeInfo, err error) *ExchangeRateProvider_GetRates_Call {
	_c.Call.Return(stringToExchangeInfo, err)
	return _c
}

func (_c *ExchangeRateProvider_GetRates_Call) RunAndReturn(run func(ctx context.Context, from string) (map[string]*provider.ExchangeInfo, error)) *ExchangeRateProvider_GetRates_Call {
	_c.Call.Return(run)
	return _c
}

// IsHealthy provides a mock function for the type ExchangeRateProvider
func (_mock *ExchangeRateProvider) IsHealthy() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsHealthy")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// ExchangeRateProvider_IsHealthy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsHealthy'
type ExchangeRateProvider_IsHealthy_Call struct {
	*mock.Call
}

// IsHealthy is a helper method to define mock.On call
func (_e *ExchangeRateProvider_Expecter) IsHealthy() *ExchangeRateProvider_IsHealthy_Call {
	return &ExchangeRateProvider_IsHealthy_Call{Call: _e.mock.On("IsHealthy")}
}

func (_c *ExchangeRateProvider_IsHealthy_Call) Run(run func()) *ExchangeRateProvider_IsHealthy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExchangeRateProvider_IsHealthy_Call) Return(b bool) *ExchangeRateProvider_IsHealthy_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *ExchangeRateProvider_IsHealthy_Call) RunAndReturn(run func() bool) *ExchangeRateProvider_IsHealthy_Call {
	_c.Call.Return(run)
	return _c
}

// IsSupported provides a mock function for the type ExchangeRateProvider
func (_mock *ExchangeRateProvider) IsSupported(from string, to string) bool {
	ret := _mock.Called(from, to)

	if len(ret) == 0 {
		panic("no return value specified for IsSupported")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(from, to)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// ExchangeRateProvider_IsSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSupported'
type ExchangeRateProvider_IsSupported_Call struct {
	*mock.Call
}

// IsSupported is a helper method to define mock.On call
//   - from string
//   - to string
func (_e *ExchangeRateProvider_Expecter) IsSupported(from interface{}, to interface{}) *ExchangeRateProvider_IsSupported_Call {
	return &ExchangeRateProvider_IsSupported_Call{Call: _e.mock.On("IsSupported", from, to)}
}

func (_c *ExchangeRateProvider_IsSupported_Call) Run(run func(from string, to string)) *ExchangeRateProvider_IsSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ExchangeRateProvider_IsSupported_Call) Return(b bool) *ExchangeRateProvider_IsSupported_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *ExchangeRateProvider_IsSupported_Call) RunAndReturn(run func(from string, to string) bool) *ExchangeRateProvider_IsSupported_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type ExchangeRateProvider
func (_mock *ExchangeRateProvider) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// ExchangeRateProvider_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type ExchangeRateProvider_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *ExchangeRateProvider_Expecter) Name() *ExchangeRateProvider_Name_Call {
	return &ExchangeRateProvider_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *ExchangeRateProvider_Name_Call) Run(run func()) *ExchangeRateProvider_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExchangeRateProvider_Name_Call) Return(s string) *ExchangeRateProvider_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *ExchangeRateProvider_Name_Call) RunAndReturn(run func() string) *ExchangeRateProvider_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentProvider creates a new instance of PaymentProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentProvider {
	mock := &PaymentProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PaymentProvider is an autogenerated mock type for the Payment type
type PaymentProvider struct {
	mock.Mock
}

type PaymentProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentProvider) EXPECT() *PaymentProvider_Expecter {
	return &PaymentProvider_Expecter{mock: &_m.Mock}
}

// HandleWebhook provides a mock function for the type PaymentProvider
func (_mock *PaymentProvider) HandleWebhook(ctx context.Context, payload []byte, signature string) (*provider.PaymentEvent, error) {
	ret := _mock.Called(ctx, payload, signature)

	if len(ret) == 0 {
		panic("no return value specified for HandleWebhook")
	}

	var r0 *provider.PaymentEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string) (*provider.PaymentEvent, error)); ok {
		return returnFunc(ctx, payload, signature)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string) *provider.PaymentEvent); ok {
		r0 = returnFunc(ctx, payload, signature)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.PaymentEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = returnFunc(ctx, payload, signature)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PaymentProvider_HandleWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleWebhook'
type PaymentProvider_HandleWebhook_Call struct {
	*mock.Call
}

// HandleWebhook is a helper method to define mock.On call
//   - ctx context.Context
//   - payload []byte
//   - signature string
func (_e *PaymentProvider_Expecter) HandleWebhook(ctx interface{}, payload interface{}, signature interface{}) *PaymentProvider_HandleWebhook_Call {
	return &PaymentProvider_HandleWebhook_Call{Call: _e.mock.On("HandleWebhook", ctx, payload, signature)}
}

func (_c *PaymentProvider_HandleWebhook_Call) Run(run func(ctx context.Context, payload []byte, signature string)) *PaymentProvider_HandleWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PaymentProvider_HandleWebhook_Call) Return(paymentEvent *provider.PaymentEvent, err error) *PaymentProvider_HandleWebhook_Call {
	_c.Call.Return(paymentEvent, err)
	return _c
}

func (_c *PaymentProvider_HandleWebhook_Call) RunAndReturn(run func(ctx context.Context, payload []byte, signature string) (*provider.PaymentEvent, error)) *PaymentProvider_HandleWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// InitiatePayment provides a mock function for the type PaymentProvider
func (_mock *PaymentProvider) InitiatePayment(ctx context.Context, params *provider.InitiatePaymentParams) (*provider.InitiatePaymentResponse, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for InitiatePayment")
	}

	var r0 *provider.InitiatePaymentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *provider.InitiatePaymentParams) (*provider.InitiatePaymentResponse, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *provider.InitiatePaymentParams) *provider.InitiatePaymentResponse); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.InitiatePaymentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *provider.InitiatePaymentParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PaymentProvider_InitiatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiatePayment'
type PaymentProvider_InitiatePayment_Call struct {
	*mock.Call
}

// InitiatePayment is a helper method to define mock.On call
//   - ctx context.Context
//   - params *provider.InitiatePaymentParams
func (_e *PaymentProvider_Expecter) InitiatePayment(ctx interface{}, params interface{}) *PaymentProvider_InitiatePayment_Call {
	return &PaymentProvider_InitiatePayment_Call{Call: _e.mock.On("InitiatePayment", ctx, params)}
}

func (_c *PaymentProvider_InitiatePayment_Call) Run(run func(ctx context.Context, params *provider.InitiatePaymentParams)) *PaymentProvider_InitiatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *provider.InitiatePaymentParams
		if args[1] != nil {
			arg1 = args[1].(*provider.InitiatePaymentParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PaymentProvider_InitiatePayment_Call) Return(initiatePaymentResponse *provider.InitiatePaymentResponse, err error) *PaymentProvider_InitiatePayment_Call {
	_c.Call.Return(initiatePaymentResponse, err)
	return _c
}

func (_c *PaymentProvider_InitiatePayment_Call) RunAndReturn(run func(ctx context.Context, params *provider.InitiatePaymentParams) (*provider.InitiatePaymentResponse, error)) *PaymentProvider_InitiatePayment_Call {
	_c.Call.Return(run)
	return _c
}
