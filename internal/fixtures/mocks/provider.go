// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/amirasaad/fintech/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockExchangeRateProvider creates a new instance of MockExchangeRateProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExchangeRateProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExchangeRateProvider {
	mock := &MockExchangeRateProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExchangeRateProvider is an autogenerated mock type for the ExchangeRateProvider type
type MockExchangeRateProvider struct {
	mock.Mock
}

type MockExchangeRateProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExchangeRateProvider) EXPECT() *MockExchangeRateProvider_Expecter {
	return &MockExchangeRateProvider_Expecter{mock: &_m.Mock}
}

// GetRate provides a mock function for the type MockExchangeRateProvider
func (_mock *MockExchangeRateProvider) GetRate(from string, to string) (*domain.ExchangeRate, error) {
	ret := _mock.Called(from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetRate")
	}

	var r0 *domain.ExchangeRate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*domain.ExchangeRate, error)); ok {
		return returnFunc(from, to)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *domain.ExchangeRate); ok {
		r0 = returnFunc(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ExchangeRate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(from, to)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExchangeRateProvider_GetRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRate'
type MockExchangeRateProvider_GetRate_Call struct {
	*mock.Call
}

// GetRate is a helper method to define mock.On call
//   - from string
//   - to string
func (_e *MockExchangeRateProvider_Expecter) GetRate(from interface{}, to interface{}) *MockExchangeRateProvider_GetRate_Call {
	return &MockExchangeRateProvider_GetRate_Call{Call: _e.mock.On("GetRate", from, to)}
}

func (_c *MockExchangeRateProvider_GetRate_Call) Run(run func(from string, to string)) *MockExchangeRateProvider_GetRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockExchangeRateProvider_GetRate_Call) Return(v *domain.ExchangeRate, err error) *MockExchangeRateProvider_GetRate_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockExchangeRateProvider_GetRate_Call) RunAndReturn(run func(from string, to string) (*domain.ExchangeRate, error)) *MockExchangeRateProvider_GetRate_Call {
	_c.Call.Return(run)
	return _c
}

// GetRates provides a mock function for the type MockExchangeRateProvider
func (_mock *MockExchangeRateProvider) GetRates(from string, to []string) (map[string]*domain.ExchangeRate, error) {
	ret := _mock.Called(from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetRates")
	}

	var r0 map[string]*domain.ExchangeRate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, []string) (map[string]*domain.ExchangeRate, error)); ok {
		return returnFunc(from, to)
	}
	if returnFunc, ok := ret.Get(0).(func(string, []string) map[string]*domain.ExchangeRate); ok {
		r0 = returnFunc(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*domain.ExchangeRate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = returnFunc(from, to)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExchangeRateProvider_GetRates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRates'
type MockExchangeRateProvider_GetRates_Call struct {
	*mock.Call
}

// GetRates is a helper method to define mock.On call
//   - from string
//   - to []string
func (_e *MockExchangeRateProvider_Expecter) GetRates(from interface{}, to interface{}) *MockExchangeRateProvider_GetRates_Call {
	return &MockExchangeRateProvider_GetRates_Call{Call: _e.mock.On("GetRates", from, to)}
}

func (_c *MockExchangeRateProvider_GetRates_Call) Run(run func(from string, to []string)) *MockExchangeRateProvider_GetRates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockExchangeRateProvider_GetRates_Call) Return(stringToV map[string]*domain.ExchangeRate, err error) *MockExchangeRateProvider_GetRates_Call {
	_c.Call.Return(stringToV, err)
	return _c
}

func (_c *MockExchangeRateProvider_GetRates_Call) RunAndReturn(run func(from string, to []string) (map[string]*domain.ExchangeRate, error)) *MockExchangeRateProvider_GetRates_Call {
	_c.Call.Return(run)
	return _c
}

// IsHealthy provides a mock function for the type MockExchangeRateProvider
func (_mock *MockExchangeRateProvider) IsHealthy() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsHealthy")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockExchangeRateProvider_IsHealthy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsHealthy'
type MockExchangeRateProvider_IsHealthy_Call struct {
	*mock.Call
}

// IsHealthy is a helper method to define mock.On call
func (_e *MockExchangeRateProvider_Expecter) IsHealthy() *MockExchangeRateProvider_IsHealthy_Call {
	return &MockExchangeRateProvider_IsHealthy_Call{Call: _e.mock.On("IsHealthy")}
}

func (_c *MockExchangeRateProvider_IsHealthy_Call) Run(run func()) *MockExchangeRateProvider_IsHealthy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExchangeRateProvider_IsHealthy_Call) Return(b bool) *MockExchangeRateProvider_IsHealthy_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockExchangeRateProvider_IsHealthy_Call) RunAndReturn(run func() bool) *MockExchangeRateProvider_IsHealthy_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockExchangeRateProvider
func (_mock *MockExchangeRateProvider) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockExchangeRateProvider_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockExchangeRateProvider_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockExchangeRateProvider_Expecter) Name() *MockExchangeRateProvider_Name_Call {
	return &MockExchangeRateProvider_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockExchangeRateProvider_Name_Call) Run(run func()) *MockExchangeRateProvider_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExchangeRateProvider_Name_Call) Return(s string) *MockExchangeRateProvider_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockExchangeRateProvider_Name_Call) RunAndReturn(run func() string) *MockExchangeRateProvider_Name_Call {
	_c.Call.Return(run)
	return _c
}
