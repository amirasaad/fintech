// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amirasaad/fintech/pkg/registry"
	mock "github.com/stretchr/testify/mock"
)

// NewRegistryProvider creates a new instance of RegistryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistryProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegistryProvider {
	mock := &RegistryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RegistryProvider is an autogenerated mock type for the Provider type
type RegistryProvider struct {
	mock.Mock
}

type RegistryProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *RegistryProvider) EXPECT() *RegistryProvider_Expecter {
	return &RegistryProvider_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) Activate(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RegistryProvider_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type RegistryProvider_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *RegistryProvider_Expecter) Activate(ctx interface{}, id interface{}) *RegistryProvider_Activate_Call {
	return &RegistryProvider_Activate_Call{Call: _e.mock.On("Activate", ctx, id)}
}

func (_c *RegistryProvider_Activate_Call) Run(run func(ctx context.Context, id string)) *RegistryProvider_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RegistryProvider_Activate_Call) Return(err error) *RegistryProvider_Activate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RegistryProvider_Activate_Call) RunAndReturn(run func(ctx context.Context, id string) error) *RegistryProvider_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) Count(ctx context.Context) (int, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RegistryProvider_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type RegistryProvider_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RegistryProvider_Expecter) Count(ctx interface{}) *RegistryProvider_Count_Call {
	return &RegistryProvider_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *RegistryProvider_Count_Call) Run(run func(ctx context.Context)) *RegistryProvider_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RegistryProvider_Count_Call) Return(n int, err error) *RegistryProvider_Count_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *RegistryProvider_Count_Call) RunAndReturn(run func(ctx context.Context) (int, error)) *RegistryProvider_Count_Call {
	_c.Call.Return(run)
	return _c
}

// CountActive provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) CountActive(ctx context.Context) (int, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountActive")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RegistryProvider_CountActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountActive'
type RegistryProvider_CountActive_Call struct {
	*mock.Call
}

// CountActive is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RegistryProvider_Expecter) CountActive(ctx interface{}) *RegistryProvider_CountActive_Call {
	return &RegistryProvider_CountActive_Call{Call: _e.mock.On("CountActive", ctx)}
}

func (_c *RegistryProvider_CountActive_Call) Run(run func(ctx context.Context)) *RegistryProvider_CountActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RegistryProvider_CountActive_Call) Return(n int, err error) *RegistryProvider_CountActive_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *RegistryProvider_CountActive_Call) RunAndReturn(run func(ctx context.Context) (int, error)) *RegistryProvider_CountActive_Call {
	_c.Call.Return(run)
	return _c
}

// Deactivate provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) Deactivate(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Deactivate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RegistryProvider_Deactivate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deactivate'
type RegistryProvider_Deactivate_Call struct {
	*mock.Call
}

// Deactivate is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *RegistryProvider_Expecter) Deactivate(ctx interface{}, id interface{}) *RegistryProvider_Deactivate_Call {
	return &RegistryProvider_Deactivate_Call{Call: _e.mock.On("Deactivate", ctx, id)}
}

func (_c *RegistryProvider_Deactivate_Call) Run(run func(ctx context.Context, id string)) *RegistryProvider_Deactivate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RegistryProvider_Deactivate_Call) Return(err error) *RegistryProvider_Deactivate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RegistryProvider_Deactivate_Call) RunAndReturn(run func(ctx context.Context, id string) error) *RegistryProvider_Deactivate_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) Get(ctx context.Context, id string) (registry.Entity, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 registry.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (registry.Entity, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) registry.Entity); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RegistryProvider_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RegistryProvider_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *RegistryProvider_Expecter) Get(ctx interface{}, id interface{}) *RegistryProvider_Get_Call {
	return &RegistryProvider_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *RegistryProvider_Get_Call) Run(run func(ctx context.Context, id string)) *RegistryProvider_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RegistryProvider_Get_Call) Return(v registry.Entity, err error) *RegistryProvider_Get_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *RegistryProvider_Get_Call) RunAndReturn(run func(ctx context.Context, id string) (registry.Entity, error)) *RegistryProvider_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadata provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) GetMetadata(ctx context.Context, id string, key string) (string, error) {
	ret := _mock.Called(ctx, id, key)

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, id, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, id, key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, id, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RegistryProvider_GetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadata'
type RegistryProvider_GetMetadata_Call struct {
	*mock.Call
}

// GetMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - key string
func (_e *RegistryProvider_Expecter) GetMetadata(ctx interface{}, id interface{}, key interface{}) *RegistryProvider_GetMetadata_Call {
	return &RegistryProvider_GetMetadata_Call{Call: _e.mock.On("GetMetadata", ctx, id, key)}
}

func (_c *RegistryProvider_GetMetadata_Call) Run(run func(ctx context.Context, id string, key string)) *RegistryProvider_GetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *RegistryProvider_GetMetadata_Call) Return(s string, err error) *RegistryProvider_GetMetadata_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *RegistryProvider_GetMetadata_Call) RunAndReturn(run func(ctx context.Context, id string, key string) (string, error)) *RegistryProvider_GetMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// IsRegistered provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) IsRegistered(ctx context.Context, id string) bool {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsRegistered")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// RegistryProvider_IsRegistered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRegistered'
type RegistryProvider_IsRegistered_Call struct {
	*mock.Call
}

// IsRegistered is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *RegistryProvider_Expecter) IsRegistered(ctx interface{}, id interface{}) *RegistryProvider_IsRegistered_Call {
	return &RegistryProvider_IsRegistered_Call{Call: _e.mock.On("IsRegistered", ctx, id)}
}

func (_c *RegistryProvider_IsRegistered_Call) Run(run func(ctx context.Context, id string)) *RegistryProvider_IsRegistered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RegistryProvider_IsRegistered_Call) Return(b bool) *RegistryProvider_IsRegistered_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *RegistryProvider_IsRegistered_Call) RunAndReturn(run func(ctx context.Context, id string) bool) *RegistryProvider_IsRegistered_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) List(ctx context.Context) ([]registry.Entity, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []registry.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]registry.Entity, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []registry.Entity); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]registry.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RegistryProvider_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type RegistryProvider_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RegistryProvider_Expecter) List(ctx interface{}) *RegistryProvider_List_Call {
	return &RegistryProvider_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *RegistryProvider_List_Call) Run(run func(ctx context.Context)) *RegistryProvider_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RegistryProvider_List_Call) Return(vs []registry.Entity, err error) *RegistryProvider_List_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *RegistryProvider_List_Call) RunAndReturn(run func(ctx context.Context) ([]registry.Entity, error)) *RegistryProvider_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListActive provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) ListActive(ctx context.Context) ([]registry.Entity, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListActive")
	}

	var r0 []registry.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]registry.Entity, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []registry.Entity); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]registry.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RegistryProvider_ListActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActive'
type RegistryProvider_ListActive_Call struct {
	*mock.Call
}

// ListActive is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RegistryProvider_Expecter) ListActive(ctx interface{}) *RegistryProvider_ListActive_Call {
	return &RegistryProvider_ListActive_Call{Call: _e.mock.On("ListActive", ctx)}
}

func (_c *RegistryProvider_ListActive_Call) Run(run func(ctx context.Context)) *RegistryProvider_ListActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RegistryProvider_ListActive_Call) Return(vs []registry.Entity, err error) *RegistryProvider_ListActive_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *RegistryProvider_ListActive_Call) RunAndReturn(run func(ctx context.Context) ([]registry.Entity, error)) *RegistryProvider_ListActive_Call {
	_c.Call.Return(run)
	return _c
}

// ListByMetadata provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) ListByMetadata(ctx context.Context, key string, value string) ([]registry.Entity, error) {
	ret := _mock.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for ListByMetadata")
	}

	var r0 []registry.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]registry.Entity, error)); ok {
		return returnFunc(ctx, key, value)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []registry.Entity); ok {
		r0 = returnFunc(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]registry.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RegistryProvider_ListByMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByMetadata'
type RegistryProvider_ListByMetadata_Call struct {
	*mock.Call
}

// ListByMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
func (_e *RegistryProvider_Expecter) ListByMetadata(ctx interface{}, key interface{}, value interface{}) *RegistryProvider_ListByMetadata_Call {
	return &RegistryProvider_ListByMetadata_Call{Call: _e.mock.On("ListByMetadata", ctx, key, value)}
}

func (_c *RegistryProvider_ListByMetadata_Call) Run(run func(ctx context.Context, key string, value string)) *RegistryProvider_ListByMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *RegistryProvider_ListByMetadata_Call) Return(vs []registry.Entity, err error) *RegistryProvider_ListByMetadata_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *RegistryProvider_ListByMetadata_Call) RunAndReturn(run func(ctx context.Context, key string, value string) ([]registry.Entity, error)) *RegistryProvider_ListByMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) Register(ctx context.Context, entity registry.Entity) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, registry.Entity) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RegistryProvider_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type RegistryProvider_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - entity registry.Entity
func (_e *RegistryProvider_Expecter) Register(ctx interface{}, entity interface{}) *RegistryProvider_Register_Call {
	return &RegistryProvider_Register_Call{Call: _e.mock.On("Register", ctx, entity)}
}

func (_c *RegistryProvider_Register_Call) Run(run func(ctx context.Context, entity registry.Entity)) *RegistryProvider_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 registry.Entity
		if args[1] != nil {
			arg1 = args[1].(registry.Entity)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RegistryProvider_Register_Call) Return(err error) *RegistryProvider_Register_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RegistryProvider_Register_Call) RunAndReturn(run func(ctx context.Context, entity registry.Entity) error) *RegistryProvider_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMetadata provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) RemoveMetadata(ctx context.Context, id string, key string) error {
	ret := _mock.Called(ctx, id, key)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMetadata")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, id, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RegistryProvider_RemoveMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMetadata'
type RegistryProvider_RemoveMetadata_Call struct {
	*mock.Call
}

// RemoveMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - key string
func (_e *RegistryProvider_Expecter) RemoveMetadata(ctx interface{}, id interface{}, key interface{}) *RegistryProvider_RemoveMetadata_Call {
	return &RegistryProvider_RemoveMetadata_Call{Call: _e.mock.On("RemoveMetadata", ctx, id, key)}
}

func (_c *RegistryProvider_RemoveMetadata_Call) Run(run func(ctx context.Context, id string, key string)) *RegistryProvider_RemoveMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *RegistryProvider_RemoveMetadata_Call) Return(err error) *RegistryProvider_RemoveMetadata_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RegistryProvider_RemoveMetadata_Call) RunAndReturn(run func(ctx context.Context, id string, key string) error) *RegistryProvider_RemoveMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) Search(ctx context.Context, query string) ([]registry.Entity, error) {
	ret := _mock.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []registry.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]registry.Entity, error)); ok {
		return returnFunc(ctx, query)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []registry.Entity); ok {
		r0 = returnFunc(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]registry.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RegistryProvider_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type RegistryProvider_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
func (_e *RegistryProvider_Expecter) Search(ctx interface{}, query interface{}) *RegistryProvider_Search_Call {
	return &RegistryProvider_Search_Call{Call: _e.mock.On("Search", ctx, query)}
}

func (_c *RegistryProvider_Search_Call) Run(run func(ctx context.Context, query string)) *RegistryProvider_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RegistryProvider_Search_Call) Return(vs []registry.Entity, err error) *RegistryProvider_Search_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *RegistryProvider_Search_Call) RunAndReturn(run func(ctx context.Context, query string) ([]registry.Entity, error)) *RegistryProvider_Search_Call {
	_c.Call.Return(run)
	return _c
}

// SearchByMetadata provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) SearchByMetadata(ctx context.Context, metadata map[string]string) ([]registry.Entity, error) {
	ret := _mock.Called(ctx, metadata)

	if len(ret) == 0 {
		panic("no return value specified for SearchByMetadata")
	}

	var r0 []registry.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]string) ([]registry.Entity, error)); ok {
		return returnFunc(ctx, metadata)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]string) []registry.Entity); ok {
		r0 = returnFunc(ctx, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]registry.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = returnFunc(ctx, metadata)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RegistryProvider_SearchByMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchByMetadata'
type RegistryProvider_SearchByMetadata_Call struct {
	*mock.Call
}

// SearchByMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - metadata map[string]string
func (_e *RegistryProvider_Expecter) SearchByMetadata(ctx interface{}, metadata interface{}) *RegistryProvider_SearchByMetadata_Call {
	return &RegistryProvider_SearchByMetadata_Call{Call: _e.mock.On("SearchByMetadata", ctx, metadata)}
}

func (_c *RegistryProvider_SearchByMetadata_Call) Run(run func(ctx context.Context, metadata map[string]string)) *RegistryProvider_SearchByMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 map[string]string
		if args[1] != nil {
			arg1 = args[1].(map[string]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RegistryProvider_SearchByMetadata_Call) Return(vs []registry.Entity, err error) *RegistryProvider_SearchByMetadata_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *RegistryProvider_SearchByMetadata_Call) RunAndReturn(run func(ctx context.Context, metadata map[string]string) ([]registry.Entity, error)) *RegistryProvider_SearchByMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// SetMetadata provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) SetMetadata(ctx context.Context, id string, key string, value string) error {
	ret := _mock.Called(ctx, id, key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetMetadata")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, id, key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RegistryProvider_SetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMetadata'
type RegistryProvider_SetMetadata_Call struct {
	*mock.Call
}

// SetMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - key string
//   - value string
func (_e *RegistryProvider_Expecter) SetMetadata(ctx interface{}, id interface{}, key interface{}, value interface{}) *RegistryProvider_SetMetadata_Call {
	return &RegistryProvider_SetMetadata_Call{Call: _e.mock.On("SetMetadata", ctx, id, key, value)}
}

func (_c *RegistryProvider_SetMetadata_Call) Run(run func(ctx context.Context, id string, key string, value string)) *RegistryProvider_SetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *RegistryProvider_SetMetadata_Call) Return(err error) *RegistryProvider_SetMetadata_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RegistryProvider_SetMetadata_Call) RunAndReturn(run func(ctx context.Context, id string, key string, value string) error) *RegistryProvider_SetMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// Unregister provides a mock function for the type RegistryProvider
func (_mock *RegistryProvider) Unregister(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Unregister")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RegistryProvider_Unregister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unregister'
type RegistryProvider_Unregister_Call struct {
	*mock.Call
}

// Unregister is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *RegistryProvider_Expecter) Unregister(ctx interface{}, id interface{}) *RegistryProvider_Unregister_Call {
	return &RegistryProvider_Unregister_Call{Call: _e.mock.On("Unregister", ctx, id)}
}

func (_c *RegistryProvider_Unregister_Call) Run(run func(ctx context.Context, id string)) *RegistryProvider_Unregister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RegistryProvider_Unregister_Call) Return(err error) *RegistryProvider_Unregister_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RegistryProvider_Unregister_Call) RunAndReturn(run func(ctx context.Context, id string) error) *RegistryProvider_Unregister_Call {
	_c.Call.Return(run)
	return _c
}
