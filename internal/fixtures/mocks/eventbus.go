// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amirasaad/fintech/pkg/domain/common"
	"github.com/amirasaad/fintech/pkg/eventbus"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBus creates a new instance of MockBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBus {
	mock := &MockBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBus is an autogenerated mock type for the Bus type
type MockBus struct {
	mock.Mock
}

type MockBus_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBus) EXPECT() *MockBus_Expecter {
	return &MockBus_Expecter{mock: &_m.Mock}
}

// Emit provides a mock function for the type MockBus
func (_mock *MockBus) Emit(ctx context.Context, event common.Event) error {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for Emit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.Event) error); ok {
		r0 = returnFunc(ctx, event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBus_Emit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Emit'
type MockBus_Emit_Call struct {
	*mock.Call
}

// Emit is a helper method to define mock.On call
//   - ctx context.Context
//   - event common.Event
func (_e *MockBus_Expecter) Emit(ctx interface{}, event interface{}) *MockBus_Emit_Call {
	return &MockBus_Emit_Call{Call: _e.mock.On("Emit", ctx, event)}
}

func (_c *MockBus_Emit_Call) Run(run func(ctx context.Context, event common.Event)) *MockBus_Emit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.Event
		if args[1] != nil {
			arg1 = args[1].(common.Event)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBus_Emit_Call) Return(err error) *MockBus_Emit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBus_Emit_Call) RunAndReturn(run func(ctx context.Context, event common.Event) error) *MockBus_Emit_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockBus
func (_mock *MockBus) Register(eventType string, handler eventbus.HandlerFunc) {
	_mock.Called(eventType, handler)
	return
}

// MockBus_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockBus_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - eventType string
//   - handler eventbus.HandlerFunc
func (_e *MockBus_Expecter) Register(eventType interface{}, handler interface{}) *MockBus_Register_Call {
	return &MockBus_Register_Call{Call: _e.mock.On("Register", eventType, handler)}
}

func (_c *MockBus_Register_Call) Run(run func(eventType string, handler eventbus.HandlerFunc)) *MockBus_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 eventbus.HandlerFunc
		if args[1] != nil {
			arg1 = args[1].(eventbus.HandlerFunc)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBus_Register_Call) Return() *MockBus_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBus_Register_Call) RunAndReturn(run func(eventType string, handler eventbus.HandlerFunc)) *MockBus_Register_Call {
	_c.Run(run)
	return _c
}
