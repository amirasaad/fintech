// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amirasaad/fintech/pkg/repository"
	mock "github.com/stretchr/testify/mock"
)

// NewUnitOfWork creates a new instance of UnitOfWork. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnitOfWork(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnitOfWork {
	mock := &UnitOfWork{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UnitOfWork is an autogenerated mock type for the UnitOfWork type
type UnitOfWork struct {
	mock.Mock
}

type UnitOfWork_Expecter struct {
	mock *mock.Mock
}

func (_m *UnitOfWork) EXPECT() *UnitOfWork_Expecter {
	return &UnitOfWork_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type UnitOfWork
func (_mock *UnitOfWork) Do(ctx context.Context, fn func(uow repository.UnitOfWork) error) error {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(uow repository.UnitOfWork) error) error); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UnitOfWork_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type UnitOfWork_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(uow repository.UnitOfWork) error
func (_e *UnitOfWork_Expecter) Do(ctx interface{}, fn interface{}) *UnitOfWork_Do_Call {
	return &UnitOfWork_Do_Call{Call: _e.mock.On("Do", ctx, fn)}
}

func (_c *UnitOfWork_Do_Call) Run(run func(ctx context.Context, fn func(uow repository.UnitOfWork) error)) *UnitOfWork_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(uow repository.UnitOfWork) error
		if args[1] != nil {
			arg1 = args[1].(func(uow repository.UnitOfWork) error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UnitOfWork_Do_Call) Return(err error) *UnitOfWork_Do_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UnitOfWork_Do_Call) RunAndReturn(run func(ctx context.Context, fn func(uow repository.UnitOfWork) error) error) *UnitOfWork_Do_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepository provides a mock function for the type UnitOfWork
func (_mock *UnitOfWork) GetRepository(repoType any) (any, error) {
	ret := _mock.Called(repoType)

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any) (any, error)); ok {
		return returnFunc(repoType)
	}
	if returnFunc, ok := ret.Get(0).(func(any) any); ok {
		r0 = returnFunc(repoType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(any) error); ok {
		r1 = returnFunc(repoType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UnitOfWork_GetRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepository'
type UnitOfWork_GetRepository_Call struct {
	*mock.Call
}

// GetRepository is a helper method to define mock.On call
//   - repoType any
func (_e *UnitOfWork_Expecter) GetRepository(repoType interface{}) *UnitOfWork_GetRepository_Call {
	return &UnitOfWork_GetRepository_Call{Call: _e.mock.On("GetRepository", repoType)}
}

func (_c *UnitOfWork_GetRepository_Call) Run(run func(repoType any)) *UnitOfWork_GetRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UnitOfWork_GetRepository_Call) Return(v any, err error) *UnitOfWork_GetRepository_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *UnitOfWork_GetRepository_Call) RunAndReturn(run func(repoType any) (any, error)) *UnitOfWork_GetRepository_Call {
	_c.Call.Return(run)
	return _c
}
