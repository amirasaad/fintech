// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/amirasaad/fintech/pkg/currency"
	mock "github.com/stretchr/testify/mock"
)

// NewCurrencyConverter creates a new instance of CurrencyConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCurrencyConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *CurrencyConverter {
	mock := &CurrencyConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CurrencyConverter is an autogenerated mock type for the CurrencyConverter type
type CurrencyConverter struct {
	mock.Mock
}

type CurrencyConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *CurrencyConverter) EXPECT() *CurrencyConverter_Expecter {
	return &CurrencyConverter_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function for the type CurrencyConverter
func (_mock *CurrencyConverter) Convert(amount float64, from currency.Code, to currency.Code) (*currency.Info, error) {
	ret := _mock.Called(amount, from, to)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 *currency.Info
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(float64, currency.Code, currency.Code) (*currency.Info, error)); ok {
		return returnFunc(amount, from, to)
	}
	if returnFunc, ok := ret.Get(0).(func(float64, currency.Code, currency.Code) *currency.Info); ok {
		r0 = returnFunc(amount, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*currency.Info)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(float64, currency.Code, currency.Code) error); ok {
		r1 = returnFunc(amount, from, to)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CurrencyConverter_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type CurrencyConverter_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - amount float64
//   - from currency.Code
//   - to currency.Code
func (_e *CurrencyConverter_Expecter) Convert(amount interface{}, from interface{}, to interface{}) *CurrencyConverter_Convert_Call {
	return &CurrencyConverter_Convert_Call{Call: _e.mock.On("Convert", amount, from, to)}
}

func (_c *CurrencyConverter_Convert_Call) Run(run func(amount float64, from currency.Code, to currency.Code)) *CurrencyConverter_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 float64
		if args[0] != nil {
			arg0 = args[0].(float64)
		}
		var arg1 currency.Code
		if args[1] != nil {
			arg1 = args[1].(currency.Code)
		}
		var arg2 currency.Code
		if args[2] != nil {
			arg2 = args[2].(currency.Code)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *CurrencyConverter_Convert_Call) Return(info *currency.Info, err error) *CurrencyConverter_Convert_Call {
	_c.Call.Return(info, err)
	return _c
}

func (_c *CurrencyConverter_Convert_Call) RunAndReturn(run func(amount float64, from currency.Code, to currency.Code) (*currency.Info, error)) *CurrencyConverter_Convert_Call {
	_c.Call.Return(run)
	return _c
}

// GetRate provides a mock function for the type CurrencyConverter
func (_mock *CurrencyConverter) GetRate(from string, to string) (float64, error) {
	ret := _mock.Called(from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetRate")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (float64, error)); ok {
		return returnFunc(from, to)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) float64); ok {
		r0 = returnFunc(from, to)
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(from, to)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CurrencyConverter_GetRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRate'
type CurrencyConverter_GetRate_Call struct {
	*mock.Call
}

// GetRate is a helper method to define mock.On call
//   - from string
//   - to string
func (_e *CurrencyConverter_Expecter) GetRate(from interface{}, to interface{}) *CurrencyConverter_GetRate_Call {
	return &CurrencyConverter_GetRate_Call{Call: _e.mock.On("GetRate", from, to)}
}

func (_c *CurrencyConverter_GetRate_Call) Run(run func(from string, to string)) *CurrencyConverter_GetRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CurrencyConverter_GetRate_Call) Return(f float64, err error) *CurrencyConverter_GetRate_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *CurrencyConverter_GetRate_Call) RunAndReturn(run func(from string, to string) (float64, error)) *CurrencyConverter_GetRate_Call {
	_c.Call.Return(run)
	return _c
}

// IsSupported provides a mock function for the type CurrencyConverter
func (_mock *CurrencyConverter) IsSupported(from string, to string) bool {
	ret := _mock.Called(from, to)

	if len(ret) == 0 {
		panic("no return value specified for IsSupported")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(from, to)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// CurrencyConverter_IsSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSupported'
type CurrencyConverter_IsSupported_Call struct {
	*mock.Call
}

// IsSupported is a helper method to define mock.On call
//   - from string
//   - to string
func (_e *CurrencyConverter_Expecter) IsSupported(from interface{}, to interface{}) *CurrencyConverter_IsSupported_Call {
	return &CurrencyConverter_IsSupported_Call{Call: _e.mock.On("IsSupported", from, to)}
}

func (_c *CurrencyConverter_IsSupported_Call) Run(run func(from string, to string)) *CurrencyConverter_IsSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CurrencyConverter_IsSupported_Call) Return(b bool) *CurrencyConverter_IsSupported_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *CurrencyConverter_IsSupported_Call) RunAndReturn(run func(from string, to string) bool) *CurrencyConverter_IsSupported_Call {
	_c.Call.Return(run)
	return _c
}
