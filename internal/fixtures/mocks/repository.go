// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amirasaad/fintech/pkg/domain"
	"github.com/amirasaad/fintech/pkg/domain/common"
	"github.com/amirasaad/fintech/pkg/repository"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAccountRepository creates a new instance of MockAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountRepository {
	mock := &MockAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccountRepository is an autogenerated mock type for the AccountRepository type
type MockAccountRepository struct {
	mock.Mock
}

type MockAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountRepository) EXPECT() *MockAccountRepository_Expecter {
	return &MockAccountRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) Create(account *domain.Account) error {
	ret := _mock.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Account) error); ok {
		r0 = returnFunc(account)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - account *domain.Account
func (_e *MockAccountRepository_Expecter) Create(account interface{}) *MockAccountRepository_Create_Call {
	return &MockAccountRepository_Create_Call{Call: _e.mock.On("Create", account)}
}

func (_c *MockAccountRepository_Create_Call) Run(run func(account *domain.Account)) *MockAccountRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Account
		if args[0] != nil {
			arg0 = args[0].(*domain.Account)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAccountRepository_Create_Call) Return(err error) *MockAccountRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountRepository_Create_Call) RunAndReturn(run func(account *domain.Account) error) *MockAccountRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) Delete(id uuid.UUID) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockAccountRepository_Expecter) Delete(id interface{}) *MockAccountRepository_Delete_Call {
	return &MockAccountRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockAccountRepository_Delete_Call) Run(run func(id uuid.UUID)) *MockAccountRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAccountRepository_Delete_Call) Return(err error) *MockAccountRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountRepository_Delete_Call) RunAndReturn(run func(id uuid.UUID) error) *MockAccountRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) Get(id uuid.UUID) (*domain.Account, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (*domain.Account, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) *domain.Account); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAccountRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockAccountRepository_Expecter) Get(id interface{}) *MockAccountRepository_Get_Call {
	return &MockAccountRepository_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockAccountRepository_Get_Call) Run(run func(id uuid.UUID)) *MockAccountRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAccountRepository_Get_Call) Return(v *domain.Account, err error) *MockAccountRepository_Get_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockAccountRepository_Get_Call) RunAndReturn(run func(id uuid.UUID) (*domain.Account, error)) *MockAccountRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) Update(account *domain.Account) error {
	ret := _mock.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Account) error); ok {
		r0 = returnFunc(account)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - account *domain.Account
func (_e *MockAccountRepository_Expecter) Update(account interface{}) *MockAccountRepository_Update_Call {
	return &MockAccountRepository_Update_Call{Call: _e.mock.On("Update", account)}
}

func (_c *MockAccountRepository_Update_Call) Run(run func(account *domain.Account)) *MockAccountRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Account
		if args[0] != nil {
			arg0 = args[0].(*domain.Account)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAccountRepository_Update_Call) Return(err error) *MockAccountRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountRepository_Update_Call) RunAndReturn(run func(account *domain.Account) error) *MockAccountRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionRepository creates a new instance of MockTransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionRepository {
	mock := &MockTransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransactionRepository is an autogenerated mock type for the TransactionRepository type
type MockTransactionRepository struct {
	mock.Mock
}

type MockTransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionRepository) EXPECT() *MockTransactionRepository_Expecter {
	return &MockTransactionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) Create(transaction *domain.Transaction, convInfo *common.ConversionInfo) error {
	ret := _mock.Called(transaction, convInfo)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Transaction, *common.ConversionInfo) error); ok {
		r0 = returnFunc(transaction, convInfo)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTransactionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - transaction *domain.Transaction
//   - convInfo *common.ConversionInfo
func (_e *MockTransactionRepository_Expecter) Create(transaction interface{}, convInfo interface{}) *MockTransactionRepository_Create_Call {
	return &MockTransactionRepository_Create_Call{Call: _e.mock.On("Create", transaction, convInfo)}
}

func (_c *MockTransactionRepository_Create_Call) Run(run func(transaction *domain.Transaction, convInfo *common.ConversionInfo)) *MockTransactionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Transaction
		if args[0] != nil {
			arg0 = args[0].(*domain.Transaction)
		}
		var arg1 *common.ConversionInfo
		if args[1] != nil {
			arg1 = args[1].(*common.ConversionInfo)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_Create_Call) Return(err error) *MockTransactionRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionRepository_Create_Call) RunAndReturn(run func(transaction *domain.Transaction, convInfo *common.ConversionInfo) error) *MockTransactionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) Get(id uuid.UUID) (*domain.Transaction, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (*domain.Transaction, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) *domain.Transaction); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTransactionRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockTransactionRepository_Expecter) Get(id interface{}) *MockTransactionRepository_Get_Call {
	return &MockTransactionRepository_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockTransactionRepository_Get_Call) Run(run func(id uuid.UUID)) *MockTransactionRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_Get_Call) Return(v *domain.Transaction, err error) *MockTransactionRepository_Get_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockTransactionRepository_Get_Call) RunAndReturn(run func(id uuid.UUID) (*domain.Transaction, error)) *MockTransactionRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockTransactionRepository
func (_mock *MockTransactionRepository) List(userID uuid.UUID, accountID uuid.UUID) ([]*domain.Transaction, error) {
	ret := _mock.Called(userID, accountID)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*domain.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) ([]*domain.Transaction, error)); ok {
		return returnFunc(userID, accountID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) []*domain.Transaction); ok {
		r0 = returnFunc(userID, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(userID, accountID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTransactionRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - userID uuid.UUID
//   - accountID uuid.UUID
func (_e *MockTransactionRepository_Expecter) List(userID interface{}, accountID interface{}) *MockTransactionRepository_List_Call {
	return &MockTransactionRepository_List_Call{Call: _e.mock.On("List", userID, accountID)}
}

func (_c *MockTransactionRepository_List_Call) Run(run func(userID uuid.UUID, accountID uuid.UUID)) *MockTransactionRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionRepository_List_Call) Return(vs []*domain.Transaction, err error) *MockTransactionRepository_List_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockTransactionRepository_List_Call) RunAndReturn(run func(userID uuid.UUID, accountID uuid.UUID) ([]*domain.Transaction, error)) *MockTransactionRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Create(user *domain.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - user *domain.User
func (_e *MockUserRepository_Expecter) Create(user interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", user)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(user *domain.User)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(err error) *MockUserRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(user *domain.User) error) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Delete(id uuid.UUID) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockUserRepository_Expecter) Delete(id interface{}) *MockUserRepository_Delete_Call {
	return &MockUserRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockUserRepository_Delete_Call) Run(run func(id uuid.UUID)) *MockUserRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_Delete_Call) Return(err error) *MockUserRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Delete_Call) RunAndReturn(run func(id uuid.UUID) error) *MockUserRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Get(id uuid.UUID) (*domain.User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (*domain.User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) *domain.User); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUserRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockUserRepository_Expecter) Get(id interface{}) *MockUserRepository_Get_Call {
	return &MockUserRepository_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockUserRepository_Get_Call) Run(run func(id uuid.UUID)) *MockUserRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_Get_Call) Return(v *domain.User, err error) *MockUserRepository_Get_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockUserRepository_Get_Call) RunAndReturn(run func(id uuid.UUID) (*domain.User, error)) *MockUserRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetByEmail(email string) (*domain.User, error) {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return returnFunc(email)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = returnFunc(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockUserRepository_Expecter) GetByEmail(email interface{}) *MockUserRepository_GetByEmail_Call {
	return &MockUserRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *MockUserRepository_GetByEmail_Call) Run(run func(email string)) *MockUserRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_GetByEmail_Call) Return(v *domain.User, err error) *MockUserRepository_GetByEmail_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockUserRepository_GetByEmail_Call) RunAndReturn(run func(email string) (*domain.User, error)) *MockUserRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetByUsername(username string) (*domain.User, error) {
	ret := _mock.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return returnFunc(username)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = returnFunc(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockUserRepository_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockUserRepository_Expecter) GetByUsername(username interface{}) *MockUserRepository_GetByUsername_Call {
	return &MockUserRepository_GetByUsername_Call{Call: _e.mock.On("GetByUsername", username)}
}

func (_c *MockUserRepository_GetByUsername_Call) Run(run func(username string)) *MockUserRepository_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_GetByUsername_Call) Return(v *domain.User, err error) *MockUserRepository_GetByUsername_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockUserRepository_GetByUsername_Call) RunAndReturn(run func(username string) (*domain.User, error)) *MockUserRepository_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Update(user *domain.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - user *domain.User
func (_e *MockUserRepository_Expecter) Update(user interface{}) *MockUserRepository_Update_Call {
	return &MockUserRepository_Update_Call{Call: _e.mock.On("Update", user)}
}

func (_c *MockUserRepository_Update_Call) Run(run func(user *domain.User)) *MockUserRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_Update_Call) Return(err error) *MockUserRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Update_Call) RunAndReturn(run func(user *domain.User) error) *MockUserRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Valid provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Valid(id uuid.UUID, password string) bool {
	ret := _mock.Called(id, password)

	if len(ret) == 0 {
		panic("no return value specified for Valid")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string) bool); ok {
		r0 = returnFunc(id, password)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockUserRepository_Valid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Valid'
type MockUserRepository_Valid_Call struct {
	*mock.Call
}

// Valid is a helper method to define mock.On call
//   - id uuid.UUID
//   - password string
func (_e *MockUserRepository_Expecter) Valid(id interface{}, password interface{}) *MockUserRepository_Valid_Call {
	return &MockUserRepository_Valid_Call{Call: _e.mock.On("Valid", id, password)}
}

func (_c *MockUserRepository_Valid_Call) Run(run func(id uuid.UUID, password string)) *MockUserRepository_Valid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_Valid_Call) Return(b bool) *MockUserRepository_Valid_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockUserRepository_Valid_Call) RunAndReturn(run func(id uuid.UUID, password string) bool) *MockUserRepository_Valid_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUnitOfWork creates a new instance of MockUnitOfWork. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnitOfWork(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnitOfWork {
	mock := &MockUnitOfWork{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUnitOfWork is an autogenerated mock type for the UnitOfWork type
type MockUnitOfWork struct {
	mock.Mock
}

type MockUnitOfWork_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnitOfWork) EXPECT() *MockUnitOfWork_Expecter {
	return &MockUnitOfWork_Expecter{mock: &_m.Mock}
}

// AccountRepository provides a mock function for the type MockUnitOfWork
func (_mock *MockUnitOfWork) AccountRepository() (repository.AccountRepository, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AccountRepository")
	}

	var r0 repository.AccountRepository
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (repository.AccountRepository, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() repository.AccountRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.AccountRepository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUnitOfWork_AccountRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountRepository'
type MockUnitOfWork_AccountRepository_Call struct {
	*mock.Call
}

// AccountRepository is a helper method to define mock.On call
func (_e *MockUnitOfWork_Expecter) AccountRepository() *MockUnitOfWork_AccountRepository_Call {
	return &MockUnitOfWork_AccountRepository_Call{Call: _e.mock.On("AccountRepository")}
}

func (_c *MockUnitOfWork_AccountRepository_Call) Run(run func()) *MockUnitOfWork_AccountRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnitOfWork_AccountRepository_Call) Return(accountRepository repository.AccountRepository, err error) *MockUnitOfWork_AccountRepository_Call {
	_c.Call.Return(accountRepository, err)
	return _c
}

func (_c *MockUnitOfWork_AccountRepository_Call) RunAndReturn(run func() (repository.AccountRepository, error)) *MockUnitOfWork_AccountRepository_Call {
	_c.Call.Return(run)
	return _c
}

// Do provides a mock function for the type MockUnitOfWork
func (_mock *MockUnitOfWork) Do(ctx context.Context, fn func(uow repository.UnitOfWork) error) error {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(uow repository.UnitOfWork) error) error); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUnitOfWork_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockUnitOfWork_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(uow repository.UnitOfWork) error
func (_e *MockUnitOfWork_Expecter) Do(ctx interface{}, fn interface{}) *MockUnitOfWork_Do_Call {
	return &MockUnitOfWork_Do_Call{Call: _e.mock.On("Do", ctx, fn)}
}

func (_c *MockUnitOfWork_Do_Call) Run(run func(ctx context.Context, fn func(uow repository.UnitOfWork) error)) *MockUnitOfWork_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(uow repository.UnitOfWork) error
		if args[1] != nil {
			arg1 = args[1].(func(uow repository.UnitOfWork) error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUnitOfWork_Do_Call) Return(err error) *MockUnitOfWork_Do_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUnitOfWork_Do_Call) RunAndReturn(run func(ctx context.Context, fn func(uow repository.UnitOfWork) error) error) *MockUnitOfWork_Do_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepository provides a mock function for the type MockUnitOfWork
func (_mock *MockUnitOfWork) GetRepository(repoType any) (any, error) {
	ret := _mock.Called(repoType)

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any) (any, error)); ok {
		return returnFunc(repoType)
	}
	if returnFunc, ok := ret.Get(0).(func(any) any); ok {
		r0 = returnFunc(repoType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(any) error); ok {
		r1 = returnFunc(repoType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUnitOfWork_GetRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepository'
type MockUnitOfWork_GetRepository_Call struct {
	*mock.Call
}

// GetRepository is a helper method to define mock.On call
//   - repoType any
func (_e *MockUnitOfWork_Expecter) GetRepository(repoType interface{}) *MockUnitOfWork_GetRepository_Call {
	return &MockUnitOfWork_GetRepository_Call{Call: _e.mock.On("GetRepository", repoType)}
}

func (_c *MockUnitOfWork_GetRepository_Call) Run(run func(repoType any)) *MockUnitOfWork_GetRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUnitOfWork_GetRepository_Call) Return(v any, err error) *MockUnitOfWork_GetRepository_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockUnitOfWork_GetRepository_Call) RunAndReturn(run func(repoType any) (any, error)) *MockUnitOfWork_GetRepository_Call {
	_c.Call.Return(run)
	return _c
}

// TransactionRepository provides a mock function for the type MockUnitOfWork
func (_mock *MockUnitOfWork) TransactionRepository() (repository.TransactionRepository, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TransactionRepository")
	}

	var r0 repository.TransactionRepository
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (repository.TransactionRepository, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() repository.TransactionRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.TransactionRepository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUnitOfWork_TransactionRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactionRepository'
type MockUnitOfWork_TransactionRepository_Call struct {
	*mock.Call
}

// TransactionRepository is a helper method to define mock.On call
func (_e *MockUnitOfWork_Expecter) TransactionRepository() *MockUnitOfWork_TransactionRepository_Call {
	return &MockUnitOfWork_TransactionRepository_Call{Call: _e.mock.On("TransactionRepository")}
}

func (_c *MockUnitOfWork_TransactionRepository_Call) Run(run func()) *MockUnitOfWork_TransactionRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnitOfWork_TransactionRepository_Call) Return(transactionRepository repository.TransactionRepository, err error) *MockUnitOfWork_TransactionRepository_Call {
	_c.Call.Return(transactionRepository, err)
	return _c
}

func (_c *MockUnitOfWork_TransactionRepository_Call) RunAndReturn(run func() (repository.TransactionRepository, error)) *MockUnitOfWork_TransactionRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UserRepository provides a mock function for the type MockUnitOfWork
func (_mock *MockUnitOfWork) UserRepository() (repository.UserRepository, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserRepository")
	}

	var r0 repository.UserRepository
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (repository.UserRepository, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() repository.UserRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.UserRepository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUnitOfWork_UserRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserRepository'
type MockUnitOfWork_UserRepository_Call struct {
	*mock.Call
}

// UserRepository is a helper method to define mock.On call
func (_e *MockUnitOfWork_Expecter) UserRepository() *MockUnitOfWork_UserRepository_Call {
	return &MockUnitOfWork_UserRepository_Call{Call: _e.mock.On("UserRepository")}
}

func (_c *MockUnitOfWork_UserRepository_Call) Run(run func()) *MockUnitOfWork_UserRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnitOfWork_UserRepository_Call) Return(userRepository repository.UserRepository, err error) *MockUnitOfWork_UserRepository_Call {
	_c.Call.Return(userRepository, err)
	return _c
}

func (_c *MockUnitOfWork_UserRepository_Call) RunAndReturn(run func() (repository.UserRepository, error)) *MockUnitOfWork_UserRepository_Call {
	_c.Call.Return(run)
	return _c
}
