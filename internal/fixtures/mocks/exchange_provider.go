// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amirasaad/fintech/pkg/provider/exchange"
	mock "github.com/stretchr/testify/mock"
)

// NewExchangeProvider creates a new instance of ExchangeProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExchangeProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExchangeProvider {
	mock := &ExchangeProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ExchangeProvider is an autogenerated mock type for the Exchange type
type ExchangeProvider struct {
	mock.Mock
}

type ExchangeProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ExchangeProvider) EXPECT() *ExchangeProvider_Expecter {
	return &ExchangeProvider_Expecter{mock: &_m.Mock}
}

// CheckHealth provides a mock function for the type ExchangeProvider
func (_mock *ExchangeProvider) CheckHealth(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckHealth")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExchangeProvider_CheckHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckHealth'
type ExchangeProvider_CheckHealth_Call struct {
	*mock.Call
}

// CheckHealth is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ExchangeProvider_Expecter) CheckHealth(ctx interface{}) *ExchangeProvider_CheckHealth_Call {
	return &ExchangeProvider_CheckHealth_Call{Call: _e.mock.On("CheckHealth", ctx)}
}

func (_c *ExchangeProvider_CheckHealth_Call) Run(run func(ctx context.Context)) *ExchangeProvider_CheckHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ExchangeProvider_CheckHealth_Call) Return(err error) *ExchangeProvider_CheckHealth_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExchangeProvider_CheckHealth_Call) RunAndReturn(run func(ctx context.Context) error) *ExchangeProvider_CheckHealth_Call {
	_c.Call.Return(run)
	return _c
}

// FetchRate provides a mock function for the type ExchangeProvider
func (_mock *ExchangeProvider) FetchRate(ctx context.Context, from string, to string) (*exchange.RateInfo, error) {
	ret := _mock.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for FetchRate")
	}

	var r0 *exchange.RateInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*exchange.RateInfo, error)); ok {
		return returnFunc(ctx, from, to)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *exchange.RateInfo); ok {
		r0 = returnFunc(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exchange.RateInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExchangeProvider_FetchRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRate'
type ExchangeProvider_FetchRate_Call struct {
	*mock.Call
}

// FetchRate is a helper method to define mock.On call
//   - ctx context.Context
//   - from string
//   - to string
func (_e *ExchangeProvider_Expecter) FetchRate(ctx interface{}, from interface{}, to interface{}) *ExchangeProvider_FetchRate_Call {
	return &ExchangeProvider_FetchRate_Call{Call: _e.mock.On("FetchRate", ctx, from, to)}
}

func (_c *ExchangeProvider_FetchRate_Call) Run(run func(ctx context.Context, from string, to string)) *ExchangeProvider_FetchRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ExchangeProvider_FetchRate_Call) Return(rateInfo *exchange.RateInfo, err error) *ExchangeProvider_FetchRate_Call {
	_c.Call.Return(rateInfo, err)
	return _c
}

func (_c *ExchangeProvider_FetchRate_Call) RunAndReturn(run func(ctx context.Context, from string, to string) (*exchange.RateInfo, error)) *ExchangeProvider_FetchRate_Call {
	_c.Call.Return(run)
	return _c
}

// FetchRates provides a mock function for the type ExchangeProvider
func (_mock *ExchangeProvider) FetchRates(ctx context.Context, from string) (map[string]*exchange.RateInfo, error) {
	ret := _mock.Called(ctx, from)

	if len(ret) == 0 {
		panic("no return value specified for FetchRates")
	}

	var r0 map[string]*exchange.RateInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (map[string]*exchange.RateInfo, error)); ok {
		return returnFunc(ctx, from)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) map[string]*exchange.RateInfo); ok {
		r0 = returnFunc(ctx, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*exchange.RateInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, from)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ExchangeProvider_FetchRates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRates'
type ExchangeProvider_FetchRates_Call struct {
	*mock.Call
}

// FetchRates is a helper method to define mock.On call
//   - ctx context.Context
//   - from string
func (_e *ExchangeProvider_Expecter) FetchRates(ctx interface{}, from interface{}) *ExchangeProvider_FetchRates_Call {
	return &ExchangeProvider_FetchRates_Call{Call: _e.mock.On("FetchRates", ctx, from)}
}

func (_c *ExchangeProvider_FetchRates_Call) Run(run func(ctx context.Context, from string)) *ExchangeProvider_FetchRates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ExchangeProvider_FetchRates_Call) Return(stringToRateInfo map[string]*exchange.RateInfo, err error) *ExchangeProvider_FetchRates_Call {
	_c.Call.Return(stringToRateInfo, err)
	return _c
}

func (_c *ExchangeProvider_FetchRates_Call) RunAndReturn(run func(ctx context.Context, from string) (map[string]*exchange.RateInfo, error)) *ExchangeProvider_FetchRates_Call {
	_c.Call.Return(run)
	return _c
}

// IsSupported provides a mock function for the type ExchangeProvider
func (_mock *ExchangeProvider) IsSupported(from string, to string) bool {
	ret := _mock.Called(from, to)

	if len(ret) == 0 {
		panic("no return value specified for IsSupported")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(from, to)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// ExchangeProvider_IsSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSupported'
type ExchangeProvider_IsSupported_Call struct {
	*mock.Call
}

// IsSupported is a helper method to define mock.On call
//   - from string
//   - to string
func (_e *ExchangeProvider_Expecter) IsSupported(from interface{}, to interface{}) *ExchangeProvider_IsSupported_Call {
	return &ExchangeProvider_IsSupported_Call{Call: _e.mock.On("IsSupported", from, to)}
}

func (_c *ExchangeProvider_IsSupported_Call) Run(run func(from string, to string)) *ExchangeProvider_IsSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ExchangeProvider_IsSupported_Call) Return(b bool) *ExchangeProvider_IsSupported_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *ExchangeProvider_IsSupported_Call) RunAndReturn(run func(from string, to string) bool) *ExchangeProvider_IsSupported_Call {
	_c.Call.Return(run)
	return _c
}

// Metadata provides a mock function for the type ExchangeProvider
func (_mock *ExchangeProvider) Metadata() exchange.ProviderMetadata {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 exchange.ProviderMetadata
	if returnFunc, ok := ret.Get(0).(func() exchange.ProviderMetadata); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(exchange.ProviderMetadata)
	}
	return r0
}

// ExchangeProvider_Metadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metadata'
type ExchangeProvider_Metadata_Call struct {
	*mock.Call
}

// Metadata is a helper method to define mock.On call
func (_e *ExchangeProvider_Expecter) Metadata() *ExchangeProvider_Metadata_Call {
	return &ExchangeProvider_Metadata_Call{Call: _e.mock.On("Metadata")}
}

func (_c *ExchangeProvider_Metadata_Call) Run(run func()) *ExchangeProvider_Metadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExchangeProvider_Metadata_Call) Return(providerMetadata exchange.ProviderMetadata) *ExchangeProvider_Metadata_Call {
	_c.Call.Return(providerMetadata)
	return _c
}

func (_c *ExchangeProvider_Metadata_Call) RunAndReturn(run func() exchange.ProviderMetadata) *ExchangeProvider_Metadata_Call {
	_c.Call.Return(run)
	return _c
}

// SupportedPairs provides a mock function for the type ExchangeProvider
func (_mock *ExchangeProvider) SupportedPairs() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SupportedPairs")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// ExchangeProvider_SupportedPairs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SupportedPairs'
type ExchangeProvider_SupportedPairs_Call struct {
	*mock.Call
}

// SupportedPairs is a helper method to define mock.On call
func (_e *ExchangeProvider_Expecter) SupportedPairs() *ExchangeProvider_SupportedPairs_Call {
	return &ExchangeProvider_SupportedPairs_Call{Call: _e.mock.On("SupportedPairs")}
}

func (_c *ExchangeProvider_SupportedPairs_Call) Run(run func()) *ExchangeProvider_SupportedPairs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExchangeProvider_SupportedPairs_Call) Return(strings []string) *ExchangeProvider_SupportedPairs_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *ExchangeProvider_SupportedPairs_Call) RunAndReturn(run func() []string) *ExchangeProvider_SupportedPairs_Call {
	_c.Call.Return(run)
	return _c
}
