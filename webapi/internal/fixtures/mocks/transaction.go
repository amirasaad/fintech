// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/amirasaad/fintech/pkg/dto"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TransactionRepository is an autogenerated mock type for the Repository type
type TransactionRepository struct {
	mock.Mock
}

type TransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionRepository) EXPECT() *TransactionRepository_Expecter {
	return &TransactionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type TransactionRepository
func (_mock *TransactionRepository) Create(ctx context.Context, create dto.TransactionCreate) error {
	ret := _mock.Called(ctx, create)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.TransactionCreate) error); ok {
		r0 = returnFunc(ctx, create)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TransactionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TransactionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - create dto.TransactionCreate
func (_e *TransactionRepository_Expecter) Create(ctx interface{}, create interface{}) *TransactionRepository_Create_Call {
	return &TransactionRepository_Create_Call{Call: _e.mock.On("Create", ctx, create)}
}

func (_c *TransactionRepository_Create_Call) Run(run func(ctx context.Context, create dto.TransactionCreate)) *TransactionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dto.TransactionCreate
		if args[1] != nil {
			arg1 = args[1].(dto.TransactionCreate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TransactionRepository_Create_Call) Return(err error) *TransactionRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TransactionRepository_Create_Call) RunAndReturn(run func(ctx context.Context, create dto.TransactionCreate) error) *TransactionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type TransactionRepository
func (_mock *TransactionRepository) Get(ctx context.Context, id uuid.UUID) (*dto.TransactionRead, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *dto.TransactionRead
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dto.TransactionRead, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dto.TransactionRead); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TransactionRead)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TransactionRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TransactionRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *TransactionRepository_Expecter) Get(ctx interface{}, id interface{}) *TransactionRepository_Get_Call {
	return &TransactionRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *TransactionRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *TransactionRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TransactionRepository_Get_Call) Return(transactionRead *dto.TransactionRead, err error) *TransactionRepository_Get_Call {
	_c.Call.Return(transactionRead, err)
	return _c
}

func (_c *TransactionRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*dto.TransactionRead, error)) *TransactionRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPaymentID provides a mock function for the type TransactionRepository
func (_mock *TransactionRepository) GetByPaymentID(ctx context.Context, paymentID string) (*dto.TransactionRead, error) {
	ret := _mock.Called(ctx, paymentID)

	if len(ret) == 0 {
		panic("no return value specified for GetByPaymentID")
	}

	var r0 *dto.TransactionRead
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*dto.TransactionRead, error)); ok {
		return returnFunc(ctx, paymentID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *dto.TransactionRead); ok {
		r0 = returnFunc(ctx, paymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TransactionRead)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, paymentID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TransactionRepository_GetByPaymentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPaymentID'
type TransactionRepository_GetByPaymentID_Call struct {
	*mock.Call
}

// GetByPaymentID is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentID string
func (_e *TransactionRepository_Expecter) GetByPaymentID(ctx interface{}, paymentID interface{}) *TransactionRepository_GetByPaymentID_Call {
	return &TransactionRepository_GetByPaymentID_Call{Call: _e.mock.On("GetByPaymentID", ctx, paymentID)}
}

func (_c *TransactionRepository_GetByPaymentID_Call) Run(run func(ctx context.Context, paymentID string)) *TransactionRepository_GetByPaymentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TransactionRepository_GetByPaymentID_Call) Return(transactionRead *dto.TransactionRead, err error) *TransactionRepository_GetByPaymentID_Call {
	_c.Call.Return(transactionRead, err)
	return _c
}

func (_c *TransactionRepository_GetByPaymentID_Call) RunAndReturn(run func(ctx context.Context, paymentID string) (*dto.TransactionRead, error)) *TransactionRepository_GetByPaymentID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByAccount provides a mock function for the type TransactionRepository
func (_mock *TransactionRepository) ListByAccount(ctx context.Context, accountID uuid.UUID) ([]*dto.TransactionRead, error) {
	ret := _mock.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for ListByAccount")
	}

	var r0 []*dto.TransactionRead
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*dto.TransactionRead, error)); ok {
		return returnFunc(ctx, accountID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*dto.TransactionRead); ok {
		r0 = returnFunc(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.TransactionRead)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TransactionRepository_ListByAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByAccount'
type TransactionRepository_ListByAccount_Call struct {
	*mock.Call
}

// ListByAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID uuid.UUID
func (_e *TransactionRepository_Expecter) ListByAccount(ctx interface{}, accountID interface{}) *TransactionRepository_ListByAccount_Call {
	return &TransactionRepository_ListByAccount_Call{Call: _e.mock.On("ListByAccount", ctx, accountID)}
}

func (_c *TransactionRepository_ListByAccount_Call) Run(run func(ctx context.Context, accountID uuid.UUID)) *TransactionRepository_ListByAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TransactionRepository_ListByAccount_Call) Return(transactionReads []*dto.TransactionRead, err error) *TransactionRepository_ListByAccount_Call {
	_c.Call.Return(transactionReads, err)
	return _c
}

func (_c *TransactionRepository_ListByAccount_Call) RunAndReturn(run func(ctx context.Context, accountID uuid.UUID) ([]*dto.TransactionRead, error)) *TransactionRepository_ListByAccount_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUser provides a mock function for the type TransactionRepository
func (_mock *TransactionRepository) ListByUser(ctx context.Context, userID uuid.UUID) ([]*dto.TransactionRead, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListByUser")
	}

	var r0 []*dto.TransactionRead
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*dto.TransactionRead, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*dto.TransactionRead); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.TransactionRead)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TransactionRepository_ListByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUser'
type TransactionRepository_ListByUser_Call struct {
	*mock.Call
}

// ListByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *TransactionRepository_Expecter) ListByUser(ctx interface{}, userID interface{}) *TransactionRepository_ListByUser_Call {
	return &TransactionRepository_ListByUser_Call{Call: _e.mock.On("ListByUser", ctx, userID)}
}

func (_c *TransactionRepository_ListByUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *TransactionRepository_ListByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TransactionRepository_ListByUser_Call) Return(transactionReads []*dto.TransactionRead, err error) *TransactionRepository_ListByUser_Call {
	_c.Call.Return(transactionReads, err)
	return _c
}

func (_c *TransactionRepository_ListByUser_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) ([]*dto.TransactionRead, error)) *TransactionRepository_ListByUser_Call {
	_c.Call.Return(run)
	return _c
}

// PartialUpdate provides a mock function for the type TransactionRepository
func (_mock *TransactionRepository) PartialUpdate(ctx context.Context, id uuid.UUID, update dto.TransactionUpdate) error {
	ret := _mock.Called(ctx, id, update)

	if len(ret) == 0 {
		panic("no return value specified for PartialUpdate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.TransactionUpdate) error); ok {
		r0 = returnFunc(ctx, id, update)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TransactionRepository_PartialUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PartialUpdate'
type TransactionRepository_PartialUpdate_Call struct {
	*mock.Call
}

// PartialUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - update dto.TransactionUpdate
func (_e *TransactionRepository_Expecter) PartialUpdate(ctx interface{}, id interface{}, update interface{}) *TransactionRepository_PartialUpdate_Call {
	return &TransactionRepository_PartialUpdate_Call{Call: _e.mock.On("PartialUpdate", ctx, id, update)}
}

func (_c *TransactionRepository_PartialUpdate_Call) Run(run func(ctx context.Context, id uuid.UUID, update dto.TransactionUpdate)) *TransactionRepository_PartialUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 dto.TransactionUpdate
		if args[2] != nil {
			arg2 = args[2].(dto.TransactionUpdate)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *TransactionRepository_PartialUpdate_Call) Return(err error) *TransactionRepository_PartialUpdate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TransactionRepository_PartialUpdate_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, update dto.TransactionUpdate) error) *TransactionRepository_PartialUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type TransactionRepository
func (_mock *TransactionRepository) Update(ctx context.Context, id uuid.UUID, update dto.TransactionUpdate) error {
	ret := _mock.Called(ctx, id, update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.TransactionUpdate) error); ok {
		r0 = returnFunc(ctx, id, update)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TransactionRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TransactionRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - update dto.TransactionUpdate
func (_e *TransactionRepository_Expecter) Update(ctx interface{}, id interface{}, update interface{}) *TransactionRepository_Update_Call {
	return &TransactionRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, update)}
}

func (_c *TransactionRepository_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, update dto.TransactionUpdate)) *TransactionRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 dto.TransactionUpdate
		if args[2] != nil {
			arg2 = args[2].(dto.TransactionUpdate)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *TransactionRepository_Update_Call) Return(err error) *TransactionRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TransactionRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, update dto.TransactionUpdate) error) *TransactionRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertByPaymentID provides a mock function for the type TransactionRepository
func (_mock *TransactionRepository) UpsertByPaymentID(ctx context.Context, paymentID string, create dto.TransactionCreate) error {
	ret := _mock.Called(ctx, paymentID, create)

	if len(ret) == 0 {
		panic("no return value specified for UpsertByPaymentID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, dto.TransactionCreate) error); ok {
		r0 = returnFunc(ctx, paymentID, create)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TransactionRepository_UpsertByPaymentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertByPaymentID'
type TransactionRepository_UpsertByPaymentID_Call struct {
	*mock.Call
}

// UpsertByPaymentID is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentID string
//   - create dto.TransactionCreate
func (_e *TransactionRepository_Expecter) UpsertByPaymentID(ctx interface{}, paymentID interface{}, create interface{}) *TransactionRepository_UpsertByPaymentID_Call {
	return &TransactionRepository_UpsertByPaymentID_Call{Call: _e.mock.On("UpsertByPaymentID", ctx, paymentID, create)}
}

func (_c *TransactionRepository_UpsertByPaymentID_Call) Run(run func(ctx context.Context, paymentID string, create dto.TransactionCreate)) *TransactionRepository_UpsertByPaymentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 dto.TransactionCreate
		if args[2] != nil {
			arg2 = args[2].(dto.TransactionCreate)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *TransactionRepository_UpsertByPaymentID_Call) Return(err error) *TransactionRepository_UpsertByPaymentID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TransactionRepository_UpsertByPaymentID_Call) RunAndReturn(run func(ctx context.Context, paymentID string, create dto.TransactionCreate) error) *TransactionRepository_UpsertByPaymentID_Call {
	_c.Call.Return(run)
	return _c
}
