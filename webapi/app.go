package webapi

import (
	"errors"
	"time"

	"github.com/amirasaad/fintech/pkg/config"
	"github.com/amirasaad/fintech/pkg/service"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/limiter"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/gofiber/swagger"

	// docs are generated by Swag CLI, you have to import them.
	_ "github.com/amirasaad/fintech/docs"
)

func NewApp(
	accountSvc *service.AccountService,
	userSvc *service.UserService,
	authSvc *service.AuthService,
	currencySvc *service.CurrencyService,
	cfg *config.AppConfig,
) *fiber.App {
	return newAppWithRateLimit(accountSvc, userSvc, authSvc, currencySvc, cfg, 5, 1*time.Second)
}

func newAppWithRateLimit(
	accountSvc *service.AccountService,
	userSvc *service.UserService,
	authSvc *service.AuthService,
	currencySvc *service.CurrencyService,
	cfg *config.AppConfig,
	maxRequests int,
	expiration time.Duration,
) *fiber.App {
	app := fiber.New(fiber.Config{
		ErrorHandler: func(c *fiber.Ctx, err error) error {
			return ProblemDetailsJSON(c, "Internal Server Error", err)
		},
	})
	app.Get("/swagger/*", swagger.New(swagger.Config{
		TryItOutEnabled:      true,
		WithCredentials:      true,
		PersistAuthorization: true,
	}))

	app.Use(limiter.New(limiter.Config{
		Max:        maxRequests,
		Expiration: expiration,
		KeyGenerator: func(c *fiber.Ctx) string {
			return c.IP()
		},
		LimitReached: func(c *fiber.Ctx) error {
			return ProblemDetailsJSON(c, "Too Many Requests", errors.New("rate limit exceeded"), fiber.StatusTooManyRequests)
		},
	}))
	app.Use(recover.New())

	app.Get("/", func(c *fiber.Ctx) error {
		return c.SendString("App is working! ðŸš€")
	})

	AccountRoutes(app, accountSvc, authSvc, cfg)
	UserRoutes(app, userSvc, authSvc, cfg)
	AuthRoutes(app, authSvc)
	CurrencyRoutes(app, currencySvc, authSvc, cfg)

	return app
}
