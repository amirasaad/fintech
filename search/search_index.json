{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Index","text":"A modern, event-driven fintech platform for learning, prototyping, and experimentation. <p>This project demonstrates best practices in Go for building scalable, secure, and modular financial systems. It\u2019s designed for educational use\u2014explore event-driven architecture, clean code, and real-world fintech patterns in a safe, open-source environment.</p> <p>Technologies Used</p> Technology Purpose Badge Go Main language Fiber Web framework GORM ORM PostgreSQL Database Redis Caching JWT Authentication MkDocs Material Documentation Conventional Commits Commit style Testify Testing"},{"location":"index.html#quick-navigation","title":"\ud83e\udded Quick Navigation","text":"<ul> <li>Currency System</li> <li>Multi-Currency</li> <li>Exchange Rates</li> <li>Refactoring Patterns</li> <li>Account Service Refactor</li> <li>Decorator Pattern</li> <li>Unit of Work Pattern</li> <li>Event-Driven Payments</li> </ul>"},{"location":"index.html#highlights","title":"\ud83d\udcdd Highlights","text":"<ul> <li>\ud83d\udd04 Event-driven payments</li> <li>\ud83c\udf10 Multi-currency support</li> <li>\ud83d\udd12 Secure authentication</li> <li>\ud83e\uddf0 Unit of Work &amp; Repository patterns</li> <li>\ud83c\udfe6 Educational, open-source fintech platform</li> </ul>"},{"location":"index.html#features","title":"\ud83c\udfc1 Features","text":"<ul> <li>\ud83c\udf10 Multi-currency support</li> <li>\ud83d\udd04 Real-time exchange rates</li> <li>\ud83d\udd12 JWT authentication</li> <li>\ud83e\uddf0 Unit of Work &amp; Repository patterns</li> <li>\ud83c\udfd7\ufe0f Clean architecture &amp; DDD</li> </ul>"},{"location":"index.html#getting-started","title":"\ud83d\udee0\ufe0f Getting Started","text":"<ol> <li>Clone the repo</li> <li>See the Getting Started for setup</li> <li>Explore docs using the sidebar or search</li> </ol>"},{"location":"index.html#contributing","title":"\ud83c\udfc5 Contributing","text":"<p>See our guide: ../CONTRIBUTING.md</p>"},{"location":"index.html#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License.</p> <p> \u26a0\ufe0f For Educational Purpose Only </p>"},{"location":"DOCUMENTATION_UPDATES.html","title":"\ud83d\udcda Documentation Updates Summary","text":"<p>This document summarizes the recent updates made to bring the documentation in line with the current state of the application.</p>"},{"location":"DOCUMENTATION_UPDATES.html#updated-files","title":"\ud83d\udd04 Updated Files","text":""},{"location":"DOCUMENTATION_UPDATES.html#1-readmemd-root","title":"1. README.md (Root)","text":"<ul> <li>Issue: Duplicate content in event-driven architecture sections</li> <li>Fix: Removed duplicate sections and consolidated into a single, accurate event flow description</li> <li>Changes:</li> <li>Updated event flow diagrams to match current implementation</li> <li>Corrected event names (e.g., <code>DepositBusinessValidationEvent</code> vs <code>DepositConversionDoneEvent</code>)</li> <li>Updated Mermaid diagrams to reflect actual event chains</li> <li>Removed redundant architecture explanations</li> </ul>"},{"location":"DOCUMENTATION_UPDATES.html#2-docsdomain-eventsmd","title":"2. docs/domain-events.md","text":"<ul> <li>Issue: Referenced wrong file paths and outdated event names</li> <li>Fix: Updated to reflect current event structure and locations</li> <li>Changes:</li> <li>Corrected path from <code>pkg/domain/account/events/</code> to <code>pkg/domain/events/</code></li> <li>Updated event lists to match current implementation</li> <li>Added missing events like <code>DepositBusinessValidationEvent</code>, <code>WithdrawBusinessValidationEvent</code></li> <li>Updated event flow diagrams</li> <li>Added proper event structure documentation</li> <li>Included testing strategy and best practices</li> </ul>"},{"location":"DOCUMENTATION_UPDATES.html#3-docsarchitecturemd","title":"3. docs/architecture.md","text":"<ul> <li>Issue: Outdated workflow descriptions and missing current implementation details</li> <li>Fix: Updated to reflect current event-driven architecture</li> <li>Changes:</li> <li>Updated event flow diagrams for all three flows (deposit, withdraw, transfer)</li> <li>Corrected event names and sequences</li> <li>Added handler responsibilities section</li> <li>Updated benefits and testing strategy sections</li> <li>Removed outdated \"proposed\" architecture section</li> <li>Added current implementation details</li> </ul>"},{"location":"DOCUMENTATION_UPDATES.html#4-docsproject-structuremd","title":"4. docs/project-structure.md","text":"<ul> <li>Issue: Missing directories and outdated structure information</li> <li>Fix: Updated to reflect current project organization</li> <li>Changes:</li> <li>Added missing directories like <code>pkg/handler/</code>, <code>pkg/eventbus/</code>, etc.</li> <li>Updated handler structure to show deposit/withdraw/transfer subdirectories</li> <li>Added missing service subdirectories</li> <li>Corrected file descriptions</li> <li>Added architecture layers explanation</li> <li>Updated design principles section</li> </ul>"},{"location":"DOCUMENTATION_UPDATES.html#5-docsrefactoringevent-driven-deposit-flowmd","title":"5. docs/refactoring/event-driven-deposit-flow.md","text":"<ul> <li>Issue: Completely outdated event flow and handler descriptions</li> <li>Fix: Rewrote to match current implementation</li> <li>Changes:</li> <li>Updated event sequence to match actual implementation</li> <li>Corrected event names and flow</li> <li>Added current handler responsibilities</li> <li>Updated implementation details with actual code patterns</li> <li>Added currency conversion logic explanation</li> <li>Updated testing examples</li> <li>Added error handling scenarios</li> </ul>"},{"location":"DOCUMENTATION_UPDATES.html#6-docsrefactoringevent-driven-withdraw-flowmd","title":"6. docs/refactoring/event-driven-withdraw-flow.md","text":"<ul> <li>Issue: Outdated event flow and missing current implementation details</li> <li>Fix: Updated to reflect current withdraw implementation</li> <li>Changes:</li> <li>Updated event sequence diagram</li> <li>Corrected event names and flow</li> <li>Added withdraw-specific validation logic</li> <li>Updated handler responsibilities</li> <li>Added balance validation details</li> <li>Updated testing strategy</li> <li>Added error scenarios specific to withdrawals</li> <li>Added comparison with deposit flow</li> </ul>"},{"location":"DOCUMENTATION_UPDATES.html#key-corrections-made","title":"\ud83c\udfaf Key Corrections Made","text":""},{"location":"DOCUMENTATION_UPDATES.html#event-flow-accuracy","title":"Event Flow Accuracy","text":"<ul> <li>Before: Documentation showed incorrect event sequences</li> <li>After: Event flows now match the actual implementation in E2E tests</li> </ul>"},{"location":"DOCUMENTATION_UPDATES.html#event-names","title":"Event Names","text":"<ul> <li>Before: Used outdated or incorrect event names</li> <li>After: All event names match the current <code>pkg/domain/events/</code> definitions</li> </ul>"},{"location":"DOCUMENTATION_UPDATES.html#handler-structure","title":"Handler Structure","text":"<ul> <li>Before: Referenced non-existent handlers or incorrect responsibilities</li> <li>After: Accurately describes current handler implementations in <code>pkg/handler/</code></li> </ul>"},{"location":"DOCUMENTATION_UPDATES.html#file-paths","title":"File Paths","text":"<ul> <li>Before: Incorrect paths to source files</li> <li>After: All paths point to actual files in the current codebase</li> </ul>"},{"location":"DOCUMENTATION_UPDATES.html#implementation-details","title":"Implementation Details","text":"<ul> <li>Before: Generic or outdated code examples</li> <li>After: Actual code patterns and structures from current implementation</li> </ul>"},{"location":"DOCUMENTATION_UPDATES.html#verification","title":"\ud83e\uddea Verification","text":"<p>All documentation updates were verified against:</p> <ol> <li>Current source code in <code>pkg/domain/events/</code></li> <li>Handler implementations in <code>pkg/handler/</code></li> <li>E2E test flows in <code>pkg/handler/e2e_event_flow_test.go</code></li> <li>Actual project structure and file organization</li> </ol>"},{"location":"DOCUMENTATION_UPDATES.html#remaining-tasks","title":"\ud83d\udccb Remaining Tasks","text":"<p>The following areas may need future attention:</p> <ol> <li>API Documentation: OpenAPI specs may need updates if endpoints changed</li> <li>Payment Integration Docs: May need updates if Stripe integration changed</li> <li>Currency System Docs: May need updates if currency handling changed</li> <li>Testing Documentation: Could be expanded with new test patterns</li> </ol>"},{"location":"DOCUMENTATION_UPDATES.html#benefits","title":"\ud83c\udf89 Benefits","text":"<p>These updates provide:</p> <ul> <li>Accurate Reference: Developers can trust the documentation</li> <li>Better Onboarding: New team members get correct information</li> <li>Maintenance Clarity: Clear understanding of current architecture</li> <li>Testing Guidance: Accurate examples for writing tests</li> <li>Event Flow Understanding: Correct event sequences for debugging</li> </ul>"},{"location":"DOCUMENTATION_UPDATES.html#next-steps","title":"\ud83d\udcda Next Steps","text":"<ol> <li>Regular Reviews: Schedule periodic documentation reviews</li> <li>Automated Checks: Consider adding documentation validation to CI/CD</li> <li>Living Documentation: Keep docs updated with code changes</li> <li>Feedback Loop: Encourage team feedback on documentation accuracy</li> </ol>"},{"location":"api-usage.html","title":"API Endpoints &amp; Usage","text":"<p>The Fintech Platform exposes a comprehensive RESTful API for all its functionalities. The API design prioritizes clear resource naming, standard HTTP methods, and meaningful status codes.</p>"},{"location":"api-usage.html#openapi-specification","title":"\ud83d\udcc4 OpenAPI Specification","text":"<p>A detailed OpenAPI (Swagger) specification is available at api/openapi.yaml. This file can be used with tools like Swagger UI to explore and test the API interactively.</p>"},{"location":"api-usage.html#example-requests","title":"\ud83d\udcdd Example Requests","text":"<p>You can find practical examples of API requests in the requests file, which can be executed directly using IDE extensions like the REST Client for VS Code or similar tools.</p>"},{"location":"api-usage.html#webhook-endpoints","title":"\u26a1 Webhook Endpoints","text":"<ul> <li><code>POST /webhook/payment-status</code>: Receives asynchronous payment status updates from payment providers. This endpoint is called by the provider (or mock) to confirm payment completion or failure. (Event-driven, not called by end users)</li> <li>Requires <code>X-Webhook-Signature</code> header for verification</li> <li>Accepts JSON payload with payment status and metadata</li> </ul>"},{"location":"api-usage.html#asynchronousevent-driven-endpoints","title":"\u26a1 Asynchronous/Event-Driven Endpoints","text":"<ul> <li><code>POST /account/:id/deposit</code>: Initiates a deposit transaction</li> <li>Returns <code>202 \u26a1 Accepted</code> immediately with a <code>Location</code> header to track status</li> <li>Requires <code>amount</code> and <code>currency</code> in the request body</li> <li> <p>Example: <code>{\"amount\": 100.50, \"currency\": \"USD\"}</code></p> </li> <li> <p><code>POST /account/:id/withdraw</code>: Initiates a withdrawal transaction</p> </li> <li>Returns <code>202 Accepted</code> immediately with a <code>Location</code> header to track status</li> <li>Requires <code>amount</code> and <code>currency</code> in the request body</li> <li> <p>Example: <code>{\"amount\": 50.00, \"currency\": \"USD\"}</code></p> </li> <li> <p><code>POST /account/transfer</code>: Initiates a transfer between accounts</p> </li> <li>Returns <code>202 \u26a1 Accepted</code> immediately with a <code>Location</code> header</li> <li>Requires <code>from_account_id</code>, <code>to_account_id</code>, <code>amount</code>, and <code>currency</code></li> <li>Example: <code>{\"from_account_id\": \"uuid1\", \"to_account_id\": \"uuid2\", \"amount\": 75.25, \"currency\": \"USD\"}</code></li> </ul>"},{"location":"api-usage.html#authentication","title":"\ud83d\udd11 Authentication","text":"<ul> <li><code>POST /login</code>: Authenticates a user with their credentials (username/email and password) and returns a JSON Web Token (JWT) upon successful authentication. This token must be included in the <code>Authorization</code> header for all protected endpoints. \ud83d\udd10</li> </ul>"},{"location":"api-usage.html#user-management","title":"\ud83d\udc64 User Management","text":"<ul> <li><code>POST /user</code>: Registers a new user in the system. \u2795</li> <li>Required fields: <code>username</code>, <code>email</code>, <code>password</code></li> <li> <p>Example: <code>{\"username\": \"johndoe\", \"email\": \"john@example.com\", \"password\": \"secure123\"}</code></p> </li> <li> <p><code>POST /login</code>: Authenticates a user and returns a JWT token</p> </li> <li>Required fields: <code>email</code> or <code>username</code>, and <code>password</code></li> <li> <p>Returns: <code>{\"token\": \"jwt.token.here\", \"expires_in\": 3600}</code></p> </li> <li> <p><code>GET /user/:id</code>: Retrieves the profile details of a specific user by their ID. (Protected) \ud83d\udd0d</p> </li> <li>Requires valid JWT in <code>Authorization: Bearer &lt;token&gt;</code> header</li> <li> <p>Returns user details without sensitive information</p> </li> <li> <p><code>PUT /user/:id</code>: Updates the profile information for a specific user. (Protected) \u270f\ufe0f</p> </li> <li>Accepts partial updates</li> <li> <p>Example: <code>{\"email\": \"new.email@example.com\"}</code></p> </li> <li> <p><code>DELETE /user/:id</code>: Deletes a user account from the system. (Protected) \ud83d\uddd1\ufe0f</p> </li> <li>Requires confirmation</li> <li>Cascades to associated accounts and transactions</li> </ul>"},{"location":"api-usage.html#account-operations","title":"\ud83d\udcb3 Account Operations","text":"<ul> <li><code>POST /account</code>: Creates a new financial account. (Protected) \ud83c\udd95</li> <li>Required fields: <code>currency</code> (3-letter ISO code)</li> <li> <p>Example: <code>{\"currency\": \"USD\"}</code></p> </li> <li> <p><code>GET /account/:id</code>: Retrieves account details by ID. (Protected) \ud83d\udd0d</p> </li> <li> <p>Returns balance, currency, and metadata</p> </li> <li> <p><code>GET /accounts</code>: Lists all accounts for the authenticated user. (Protected) \ud83d\udccb</p> </li> <li> <p>Supports pagination with <code>limit</code> and <code>offset</code> query params</p> </li> <li> <p><code>GET /account/:id/balance</code>: Fetches the current balance. (Protected) \ud83d\udcb2</p> </li> <li> <p>Returns: <code>{\"account_id\": \"uuid\", \"balance\": 100.50, \"currency\": \"USD\"}</code></p> </li> <li> <p><code>GET /account/:id/transactions</code>: Retrieves transaction history. (Protected) \ud83d\udcdc</p> </li> <li>Supports filtering by date range and transaction type</li> <li>Example: <code>/account/123/transactions?from=2025-01-01&amp;to=2025-12-31</code></li> </ul>"},{"location":"api-usage.html#transaction-operations","title":"\ud83d\udcb0 Transaction Operations","text":"<ul> <li><code>GET /transactions</code>: Lists all transactions for the authenticated user. (Protected) \ud83d\udccb</li> <li>Supports filtering by account, type, and status</li> <li> <p>Pagination with <code>limit</code> and <code>offset</code></p> </li> <li> <p><code>GET /transaction/:id</code>: Retrieves details of a specific transaction. (Protected) \ud83d\udd0d</p> </li> <li>Shows full transaction details and status</li> </ul>"},{"location":"api-usage.html#currency-operations","title":"\ud83c\udf10 Currency Operations","text":"<ul> <li><code>GET /currencies</code>: Lists all supported currencies</li> <li><code>GET /exchange-rate</code>: Gets current exchange rate between two currencies</li> <li>Parameters: <code>from</code> (required), <code>to</code> (required)</li> <li>Example: <code>/exchange-rate?from=USD&amp;to=EUR</code></li> </ul>"},{"location":"api-usage.html#error-handling","title":"\ud83d\udea8 Error Handling","text":"<p>The API follows RESTful conventions for error responses and uses consistent error handling patterns:</p>"},{"location":"api-usage.html#http-status-codes","title":"HTTP Status Codes","text":"Status Code Description 200 OK Request succeeded 201 Created Resource created successfully 202 Accepted Request accepted for processing 204 No Content Request succeeded, no content to return 400 Bad Request Invalid request data or validation errors 401 Unauthorized Authentication required or invalid credentials 403 Forbidden Authenticated but not authorized 404 Not Found Resource not found 409 Conflict Resource conflict (e.g., duplicate email) 422 Unprocessable Entity Business rule violations 429 Too Many Requests Rate limit exceeded 500 Internal Server Error Unexpected server error"},{"location":"api-usage.html#error-response-format","title":"Error Response Format","text":"<p>All error responses follow the RFC 9457 Problem Details format:</p> <pre><code>{\n  \"type\": \"https://example.com/errors/invalid-currency\",\n  \"title\": \"Invalid Currency\",\n  \"status\": 422,\n  \"detail\": \"Currency 'XYZ' is not supported. Supported currencies: USD, EUR, GBP, JPY\",\n  \"instance\": \"/account/123/deposit\",\n  \"errors\": [\n    {\n      \"field\": \"currency\",\n      \"message\": \"must be a valid currency code\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api-usage.html#common-error-scenarios","title":"Common Error Scenarios","text":""},{"location":"api-usage.html#authentication-authorization-4xx","title":"Authentication &amp; Authorization (4xx)","text":"<ul> <li>401 Unauthorized</li> <li>Missing or invalid JWT token</li> <li>Expired or revoked token</li> <li> <p>Invalid credentials on login</p> </li> <li> <p>403 Forbidden</p> </li> <li>User lacks required permissions</li> <li>Attempt to access another user's resources</li> <li>Account disabled or locked</li> </ul>"},{"location":"api-usage.html#client-errors-4xx","title":"Client Errors (4xx)","text":"<ul> <li>400 Bad Request</li> <li>Invalid JSON in request body</li> <li>Missing required fields</li> <li>Invalid field formats (email, UUID, etc.)</li> <li> <p>Invalid query parameters</p> </li> <li> <p>404 Not Found</p> </li> <li>User/Account/Transaction not found</li> <li>Invalid resource ID format</li> <li> <p>Deleted resources</p> </li> <li> <p>409 Conflict</p> </li> <li>Duplicate email/username</li> <li>Concurrent modification</li> <li> <p>Resource already exists</p> </li> <li> <p>422 Unprocessable Entity</p> </li> <li>Insufficient funds</li> <li>Invalid currency conversion</li> <li>Business rule violations</li> <li>Invalid transaction amount</li> </ul>"},{"location":"api-usage.html#rate-limiting-429","title":"Rate Limiting (429)","text":"<ul> <li>Too many requests from this IP</li> <li>Too many failed login attempts</li> <li>API quota exceeded</li> </ul>"},{"location":"api-usage.html#error-codes-reference","title":"Error Codes Reference","text":"Code Description HTTP Status <code>AUTH_REQUIRED</code> Authentication required 401 <code>INVALID_CREDENTIALS</code> Invalid username/password 401 <code>ACCESS_DENIED</code> Insufficient permissions 403 <code>RESOURCE_NOT_FOUND</code> Requested resource not found 404 <code>DUPLICATE_ENTRY</code> Resource already exists 409 <code>INSUFFICIENT_FUNDS</code> Not enough balance 422 <code>INVALID_CURRENCY</code> Unsupported currency 422 <code>VALIDATION_ERROR</code> Request validation failed 400 <code>RATE_LIMIT_EXCEEDED</code> Too many requests 429 <code>INTERNAL_ERROR</code> Server error 500"},{"location":"api-usage.html#best-practices-for-error-handling","title":"Best Practices for Error Handling","text":"<ol> <li>Always check the status code first</li> <li>Parse the error response for details</li> <li>Display user-friendly messages based on error codes</li> <li>Handle rate limiting with exponential backoff</li> <li>Log full error details for debugging</li> <li>Implement retry logic for transient errors</li> </ol>"},{"location":"api-usage.html#example-handling-errors-in-javascript","title":"Example: Handling Errors in JavaScript","text":"<pre><code>async function makeRequest(url, options = {}) {\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      ...options\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      // Handle error\n      throw error;\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n}\n</code></pre>"},{"location":"architecture.html","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<p>This document outlines the event-driven architecture of the Fintech application, detailing the current implementation and design principles.</p>"},{"location":"architecture.html#current-event-driven-architecture","title":"\ud83e\uddec Current Event-Driven Architecture","text":"<p>The system is built on a robust, event-driven model to handle core financial flows like deposits, withdrawals, and transfers. This approach ensures that business logic is decoupled, scalable, and easy to maintain.</p>"},{"location":"architecture.html#core-concepts","title":"\ud83e\udde9 Core Concepts","text":"<ul> <li>Domain Events: Plain Go structs that represent significant business occurrences (e.g., <code>DepositRequestedEvent</code>, <code>ConversionDoneEvent</code>).</li> <li>Event Bus: A central component responsible for routing events to the appropriate handlers.</li> <li>Handlers: Functions that subscribe to specific events, execute a single piece of business logic, and may emit new events to continue the flow.</li> </ul>"},{"location":"architecture.html#conversion-handler-strategy-pattern-implementation","title":"\u265f\ufe0f Conversion Handler: Strategy Pattern Implementation","text":"<p>A key part of the current architecture is the generic <code>ConversionHandler</code>. This handler uses the Strategy Pattern to determine which event to emit after a currency conversion, providing flexibility and adhering to the Open/Closed Principle.</p> <ul> <li><code>EventFactory</code> Interface: An interface that defines a single method, <code>CreateNextEvent</code>.</li> <li>Concrete Factories: Each business flow (<code>deposit</code>, <code>withdraw</code>, <code>transfer</code>) has its own factory that implements this interface (e.g., <code>DepositEventFactory</code>).</li> <li>Handler Logic: The <code>ConversionHandler</code> takes a map of factories. Instead of a <code>switch</code>, it looks up the appropriate factory based on the event's <code>FlowType</code> and delegates the creation of the next event to it.</li> </ul> <p>This design allows new flows to be added to the conversion process without modifying the core handler logic\u2014only a new factory and its registration are needed.</p>"},{"location":"architecture.html#current-event-flows","title":"\ud83c\udf0a Current Event Flows","text":"<p>The system implements three main business flows:</p>"},{"location":"architecture.html#deposit-flow","title":"Deposit Flow","text":"<p><code>mermaid graph TD     A[DepositRequested] --&gt; B[CurrencyConversionRequested]     B --&gt; C[CurrencyConverted]     C --&gt; D[DepositCurrencyConverted]     D --&gt; E[DepositBusinessValidated]     E --&gt; F[PaymentInitiated]</code></p>"},{"location":"architecture.html#withdraw-flow","title":"Withdraw Flow","text":"<p><code>mermaid graph TD     A[WithdrawRequested] --&gt; B[CurrencyConversionRequested]     B --&gt; C[CurrencyConverted]     C --&gt; D[WithdrawCurrencyConverted]     D --&gt; E[WithdrawBusinessValidated]     E --&gt; F[PaymentInitiated]</code></p>"},{"location":"architecture.html#transfer-flow","title":"Transfer Flow","text":"<p><code>mermaid graph TD     A[TransferRequested] --&gt; B[CurrencyConversionRequested]     B --&gt; C[CurrencyConverted]     C --&gt; D[TransferCurrencyConverted]     D --&gt; E[TransferCompleted]</code></p>"},{"location":"architecture.html#handler-responsibilities","title":"\ud83c\udfdb\ufe0f Handler Responsibilities","text":"<p>Each handler in the system follows the Single Responsibility Principle:</p> <ol> <li>Validation Handlers: Perform input validation and business rule checks</li> <li>HandleProcessed Handlers: Handle database operations and transaction creation</li> <li>Business Validation Handlers: Perform complex business logic validation</li> <li>Conversion Handlers: Handle currency conversion operations</li> <li>Payment Handlers: Integrate with external payment providers</li> </ol>"},{"location":"architecture.html#event-bus-pattern","title":"\ud83d\udd04 Event Bus Pattern","text":"<p>The event bus implementation provides:</p> <ul> <li>Type-safe event registration: Handlers register for specific event types</li> <li>Synchronous processing: Events are processed immediately for consistency</li> <li>Error handling: Failed handlers can emit failure events or return errors</li> <li>Logging integration: All events are logged with correlation IDs for tracing</li> </ul>"},{"location":"architecture.html#testing-strategy","title":"\ud83e\uddea Testing Strategy","text":"<p>The architecture supports comprehensive testing:</p> <ul> <li>Unit Tests: Individual handlers tested in isolation with mocks</li> <li>Integration Tests: Full event chains tested end-to-end</li> <li>E2E Tests: Complete business flows verified with real event sequences</li> <li>Static Analysis: Automated cycle detection prevents infinite event loops</li> </ul>"},{"location":"architecture.html#benefits-of-current-architecture","title":"\ud83d\udcca Benefits of Current Architecture","text":"<ul> <li>Modularity: Each handler is independent and can be developed/tested separately</li> <li>Scalability: New business flows can be added without modifying existing code</li> <li>Maintainability: Clear separation of concerns makes the codebase easy to understand</li> <li>Testability: Event-driven design enables comprehensive testing strategies</li> <li>Traceability: Correlation IDs and structured logging provide full audit trails</li> </ul>"},{"location":"architecture.html#future-considerations","title":"\ud83d\udd2e Future Considerations","text":"<p>While the current architecture is robust, potential improvements include:</p> <ul> <li>Asynchronous Processing: For high-throughput scenarios</li> <li>Event Sourcing: For complete audit trails and replay capabilities</li> <li>CQRS Integration: For read/write separation in complex scenarios</li> <li>Distributed Events: For microservice architectures</li> </ul>"},{"location":"architecture.html#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Domain Events</li> <li>Event-Driven Payments</li> <li>Service Domain Communication</li> <li>Testing Guide</li> </ul>"},{"location":"domain-events.html","title":"\ud83d\udce1 Domain Events in Fintech","text":"<p>Event-driven architecture: decoupling business logic with domain events</p>"},{"location":"domain-events.html#overview","title":"\ud83c\udfc1 Overview","text":"<p>Domain events are immutable messages that represent significant business occurrences within the system. In this fintech project, domain events are the backbone of the event-driven architecture, enabling modular, decoupled, and extensible workflows for payments, transfers, deposits, withdrawals, and account operations.</p>"},{"location":"domain-events.html#key-principles","title":"\ud83d\udd11 Key Principles","text":"<ol> <li>Immutable: Events are records of things that happened in the past</li> <li>Self-Contained: Each event carries all necessary data</li> <li>Named in Past Tense: Events represent something that has already occurred</li> <li>Causality: Events form a directed acyclic graph (DAG)</li> <li>Idempotency: Event handling must be idempotent</li> </ol>"},{"location":"domain-events.html#event-structure","title":"\ud83c\udfd7\ufe0f Event Structure","text":"<p>All domain events implement the following interface:</p> <pre><code>type Event interface {\n\n    Type() string // Event type\n</code></pre>"},{"location":"domain-events.html#event-bus","title":"\ud83c\udf10 Event Bus","text":"<p>Events are published to an event bus that routes them to registered handlers:</p> <pre><code>type EventBus interface {\n    Emit(ctx context.Context, event Event) error\n    Register(eventType string, handler EventHandler) error\n}\n</code></pre>"},{"location":"domain-events.html#event-store","title":"\ud83d\udcca Event Store","text":"<p>All events are persisted in an event store for audit and replay:</p> <pre><code>type EventStore interface {\n    Save(events []Event) error\n    Load(aggregateID string) ([]Event, error)\n    Subscribe(handler EventHandler) error\n}\n</code></pre>"},{"location":"domain-events.html#key-domain-events","title":"\ud83e\udde9 Key Domain Events","text":"<p>Events are defined in <code>pkg/domain/events/</code>:</p>"},{"location":"domain-events.html#deposit-flow","title":"Deposit Flow","text":"<ul> <li><code>Deposit.Requested</code> - Initial deposit request</li> <li><code>Deposit.CurrencyConverted</code> - Input validation completed</li> <li><code>Deposit.Validated</code> - Deposit record created in database</li> <li><code>Payment.Initiated</code> - Payment processing started with provider</li> </ul>"},{"location":"domain-events.html#withdraw-flow","title":"Withdraw Flow","text":"<ul> <li><code>Withdraw.Requested</code> - Initial withdraw request</li> <li><code>Withdraw.CurrencyConverted</code> - Input validation completed</li> <li><code>Withdraw.Validated</code> - Withdraw record created in database</li> <li><code>Payment.Initiated</code> - Payment processing started with provider</li> </ul>"},{"location":"domain-events.html#transfer-flow","title":"Transfer Flow","text":"<ul> <li><code>Transfer.Requested</code> - Initial transfer request</li> <li><code>Transfer.CurrencyConverted</code> - Input validation completed</li> <li><code>Transfer.Validated</code> - Transfer record created in database</li> <li><code>Transfer.Completed</code> - Transfer fully completed</li> </ul>"},{"location":"domain-events.html#payment-events","title":"Payment Events","text":"<ul> <li><code>Payment.Initiated</code> - Payment processing started with provider</li> <li><code>Payment.Processed</code> - Payment processed by webhook</li> <li><code>Payment.Completed</code> - Payment confirmed by provider</li> <li><code>Payment.Failed</code> - Payment processing failed</li> </ul>"},{"location":"domain-events.html#common-events","title":"Common Events","text":"<ul> <li><code>AccountBalanceUpdatedEvent</code> - Account balance was updated</li> <li><code>TransactionCreatedEvent</code> - New transaction was created</li> </ul>"},{"location":"domain-events.html#event-flow-relationships","title":"\ud83d\uddbc\ufe0f Event Flow Relationships","text":"<p>```mermaid flowchart TD     subgraph Deposit         DR[Deposit.Requested]         DC[Deposit.CurrencyConverted]         DV[Deposit.Validated]</p> <pre><code>    DR --&gt; DC\n    DC --&gt; DV\n    DV --&gt; PI\nend\n\nsubgraph Withdraw\n    WR[Withdraw.Requested]\n    WC[Withdraw.CurrencyConverted]\n    WV[Withdraw.Validated]\n\n    WR --&gt; WC\n    WC --&gt; WV\n    WV --&gt; PI\nend\n\nsubgraph Transfer\n    TR[Transfer.Requested]\n    TV[Transfer.Validated]\n    TCC[Transfer.CurrencyConverted]\n    TC[Transfer.Completed]\n\n    TR --&gt; TV\n    TV --&gt; TCC\n    TCC --&gt; TC\nend\n\nsubgraph Payment\n    PI[Payment.Initiated]\n    PP[Payment.Processed]\n    PC[Payment.Completed]\n    PF[Payment.Failed]\n\n    PI --&gt; PP\n    PP --&gt; PC\n    PC --&gt; PF\nend\n</code></pre> <p>```</p>"},{"location":"domain-events.html#common-flowevent","title":"Common FlowEvent","text":"<pre><code>type FlowEvent struct {\n    FlowType      string    // \"deposit\", \"withdraw\", \"transfer\", \"payment\", \"payment\"\n    UserID        uuid.UUID\n    AccountID     uuid.UUID\n    CorrelationID uuid.UUID\n    Timestamp     time.Time\n}\n</code></pre>"},{"location":"domain-events.html#event-interface","title":"Event Interface","text":"<pre><code>type Event interface {\n    Type() string\n}\n</code></pre>"},{"location":"domain-events.html#best-practices","title":"\ud83d\udee0\ufe0f Best Practices","text":"<ul> <li>Immutability: Events should never be mutated after creation.</li> <li>Explicit Event Types: Use clear, descriptive event type names (see <code>Type()</code> methods).</li> <li>Decoupling: Business logic should be implemented in event handlers, not in the event emitters.</li> <li>Extensibility: Add new events for new business flows; subscribe handlers as needed.</li> <li>Correlation IDs: All events include correlation IDs for tracing across the entire flow.</li> <li>Structured Logging: All handlers use emoji-rich structured logging for clarity.</li> </ul>"},{"location":"domain-events.html#testing","title":"\ud83e\uddea Testing","text":"<ul> <li>E2E Event Flow Tests: Verify complete event chains for each business flow</li> <li>Unit Tests: Test individual event handlers in isolation</li> <li>Mock Integration: Use testify mocks for repository and external service interactions</li> <li>Static Analysis: Automated cycle detection prevents infinite event loops</li> </ul>"},{"location":"domain-events.html#references","title":"\ud83d\udcda References","text":"<ul> <li>Event-Driven Architecture</li> <li>Event-Driven Payments</li> <li>Event-Driven Stripe Webhook</li> <li>EventBus Implementation</li> <li>Payment Handlers</li> <li>Domain Event Definitions</li> </ul>"},{"location":"examples.html","title":"Examples","text":"<p>Here are some examples demonstrating how to interact with the Fintech Platform.</p>"},{"location":"examples.html#cli-interaction","title":"\ud83d\udda5\ufe0f CLI Interaction","text":"<ol> <li>Start the CLI:</li> </ol> <pre><code>go run cmd/cli/main.go\n</code></pre> <ol> <li>Login (when prompted):</li> </ol> <pre><code># Enter your username/email and password when prompted\n</code></pre> <ol> <li>Create an account:</li> </ol> <pre><code>&gt; create\nAccount created: ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, Balance=0.00\n</code></pre> <ol> <li>Deposit funds:</li> </ol> <pre><code>&gt; deposit xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 100.50\nDeposited 100.50 to account xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx. New balance: 100.50\n</code></pre> <ol> <li>Check balance:</li> </ol> <pre><code>&gt; balance xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\nAccount xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx balance: 100.50\n</code></pre>"},{"location":"examples.html#api-interaction-using-curl","title":"\ud83c\udf10 API Interaction (using <code>curl</code>)","text":"<ol> <li>Register a new user:</li> </ol> <pre><code>curl -X POST http://localhost:3000/user \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"apiuser\",\"email\":\"api@example.com\",\"password\":\"apipassword\"}'\n</code></pre> <ol> <li>Login to get a JWT token:</li> </ol> <pre><code>curl -X POST http://localhost:3000/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"identity\":\"apiuser\",\"password\":\"apipassword\"}'\n# Copy the token from the response for subsequent requests\n</code></pre> <ol> <li>Create an account (using the JWT token):</li> </ol> <pre><code>curl -X POST http://localhost:3000/account \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\"\n</code></pre> <ol> <li>Deposit funds into the account:</li> </ol> <pre><code>curl -X POST http://localhost:3000/account/YOUR_ACCOUNT_ID/deposit \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  -d '{\"amount\": 500.75}'\n# Note: This creates a pending transaction. The account balance will only update after the payment provider (or mock) calls the webhook endpoint to confirm payment completion.\n</code></pre> <ol> <li>Get account balance:</li> </ol> <pre><code>curl -X GET http://localhost:3000/account/YOUR_ACCOUNT_ID/balance \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\"\n</code></pre>"},{"location":"getting-started.html","title":"Getting Started","text":"<p>These instructions will guide you through setting up and running the Fintech Platform on your local machine for development and testing.</p>"},{"location":"getting-started.html#prerequisites","title":"\ud83d\udee0\ufe0f Prerequisites","text":"<ul> <li>Go: Version 1.22 or higher. Download from golang.org/dl. \ud83d\udc39</li> <li>Docker &amp; Docker Compose: For PostgreSQL and running the app in containers. docker.com \ud83d\udc33</li> <li>PostgreSQL Client (Optional): Tools like <code>psql</code> or GUI clients (e.g., DBeaver, pgAdmin) \ud83d\udc18</li> </ul>"},{"location":"getting-started.html#installation","title":"\u2b07\ufe0f Installation","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/amirasaad/fintech.git\ncd fintech\n</code></pre> <ol> <li>Set up Environment Variables:</li> </ol> <pre><code>cp .env_sample .env\n# Edit .env as needed (see .env_sample for options)\n</code></pre> <p>At a minimum, set a strong value for <code>AUTH_JWT_SECRET</code> in <code>.env</code>.</p>"},{"location":"getting-started.html#running-the-application","title":"\u25b6\ufe0f Running the Application","text":""},{"location":"getting-started.html#using-docker-compose-recommended","title":"\ud83d\udc33 Using Docker Compose (Recommended)","text":"<pre><code>docker compose up --build -d\n</code></pre> <ul> <li>The app will be at <code>http://localhost:3000</code>.</li> <li>PostgreSQL at port <code>5432</code>.</li> </ul>"},{"location":"getting-started.html#running-locally-without-docker-for-go-app","title":"\ud83c\udfe0 Running Locally (without Docker for Go app)","text":"<ol> <li>Start PostgreSQL with Docker Compose:</li> </ol> <pre><code>docker compose up db -d\n</code></pre> <ol> <li>Run the Go app:</li> </ol> <pre><code>go run cmd/server/main.go\n</code></pre>"},{"location":"getting-started.html#running-the-cli","title":"\ud83d\udda5\ufe0f Running the CLI","text":"<pre><code>go run cmd/cli/main.go\n</code></pre>"},{"location":"getting-started.html#migrations","title":"\ud83d\uddc4\ufe0f Migrations","text":"<ul> <li>Create a new migration:</li> </ul> <pre><code>make migrate-create\n</code></pre> <ul> <li>Apply all migrations:</li> </ul> <pre><code>make migrate-up\n</code></pre> <ul> <li>Revert last migration:</li> </ul> <pre><code>make migrate-down\n</code></pre> <ul> <li>See <code>internal/migrations/</code> for migration files.</li> </ul>"},{"location":"getting-started.html#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>The app loads env vars from <code>.env</code> (via <code>godotenv</code>).</li> <li>For payment/webhook testing, use the mock provider or call the webhook endpoint manually.</li> <li>See docs/index.md for navigation and more guides.</li> </ul>"},{"location":"project-structure.html","title":"Project Structure","text":"<p>This document outlines the organization of the fintech platform's codebase. The project follows clean architecture principles with clear separation of concerns between domain logic, application services, and infrastructure.</p>"},{"location":"project-structure.html#directory-overview","title":"\ud83d\udcc1 Directory Overview","text":"<p>The codebase is organized into several key directories, each with a specific purpose:</p> <ul> <li><code>/cmd</code> - Application entry points</li> <li><code>/internal</code> - Private application code (not for external use)</li> <li><code>/pkg</code> - Public packages that can be used by external applications</li> <li><code>/configs</code> - Configuration files</li> <li><code>/deployments</code> - Deployment configurations</li> <li><code>/docs</code> - Documentation</li> <li><code>/test</code> - Test suites</li> </ul>"},{"location":"project-structure.html#architecture-layers","title":"\ud83c\udfd7\ufe0f Architecture Layers","text":"<p>The application follows a clean architecture with these layers:</p> <ol> <li>Domain Layer - Core business logic and entities</li> <li>Application Layer - Use cases and business rules</li> <li>Interface Layer - API endpoints and external interfaces</li> <li>Infrastructure Layer - External services and persistence</li> </ol>"},{"location":"project-structure.html#development-workflow","title":"\ud83d\udd04 Development Workflow","text":"<ul> <li>Configuration via environment variables</li> <li>Containerized with Docker</li> <li>CI/CD with GitHub Actions</li> <li>Automated testing and code quality checks</li> </ul> <pre><code>fintech/\n\u251c\u2500\u2500 .github/          # GitHub Actions workflows for CI/CD \ud83d\ude80\n\u251c\u2500\u2500 api/              # Vercel serverless function entry point (for serverless deployments) \u2601\ufe0f\n\u251c\u2500\u2500 cmd/              # Main application entry points\n\u2502   \u251c\u2500\u2500 cli/          # Command-Line Interface application \ud83d\udcbb\n\u2502   \u2514\u2500\u2500 server/       # HTTP server application \ud83c\udf10\n\u251c\u2500\u2500 docs/             # Project documentation, OpenAPI spec, HTTP request examples, coverage reports \ud83d\udcc4\n\u251c\u2500\u2500 infra/            # Infrastructure Layer \ud83c\udfd7\ufe0f\n\u2502   \u251c\u2500\u2500 eventbus/     # Internal event bus for domain/integration events \u26a1\n\u2502   \u251c\u2500\u2500 provider/     # Payment/currency providers, webhook simulation \ud83c\udfe6\n\u2502   \u2514\u2500\u2500 repository/   # Concrete repository implementations \ud83d\udcbe\n\u251c\u2500\u2500 pkg/              # Core Application Packages (Domain, Application, and Shared Infrastructure) \ud83d\udce6\n\u2502   \u251c\u2500\u2500 cache/        # Caching interfaces and implementations \ud83d\uddc4\ufe0f\n\u2502   \u251c\u2500\u2500 commands/     # Command pattern implementations \u26a1\n\u2502   \u251c\u2500\u2500 currency/     # Currency domain logic and utilities \ud83d\udcb1\n\u2502   \u251c\u2500\u2500 domain/       # Domain Layer: Core business entities and rules \u2764\ufe0f\n\u2502   \u2502   \u251c\u2500\u2500 account/  # Account domain entities and business logic \ud83d\udcb3\n\u2502   \u2502   \u251c\u2500\u2500 events/   # Domain events for event-driven architecture \ud83d\udce1\n\u2502   \u2502   \u251c\u2500\u2500 money/    # Money value object and currency handling \ud83d\udcb0\n\u2502   \u2502   \u2514\u2500\u2500 user/     # User domain entities \ud83d\udc64\n\u2502   \u251c\u2500\u2500 dto/          # Data Transfer Objects for API communication \ud83d\udccb\n\u2502   \u251c\u2500\u2500 eventbus/     # Event bus interfaces and implementations \ud83d\ude8c\n\u2502   \u251c\u2500\u2500 handler/      # Event handlers for business flows \ud83c\udfaf\n\u2502   \u2502   \u251c\u2500\u2500 account/  # Account-related event handlers\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 deposit/   # Deposit flow handlers\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 transfer/  # Transfer flow handlers\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 withdraw/  # Withdraw flow handlers\n\u2502   \u2502   \u251c\u2500\u2500 conversion/    # Currency conversion handlers\n\u2502   \u2502   \u251c\u2500\u2500 payment/       # Payment processing handlers\n\u2502   \u2502   \u2514\u2500\u2500 transaction/   # Transaction-related handlers\n\u2502   \u251c\u2500\u2500 mapper/       # Object mapping utilities \ud83d\udd04\n\u2502   \u251c\u2500\u2500 middleware/   # Shared middleware components \ud83d\udea6\n\u2502   \u251c\u2500\u2500 processor/    # Business process orchestrators \u2699\ufe0f\n\u2502   \u251c\u2500\u2500 provider/     # External service provider interfaces \ud83d\udd0c\n\u2502   \u251c\u2500\u2500 queries/      # Query pattern implementations \ud83d\udd0d\n\u2502   \u251c\u2500\u2500 registry/     # Service registry and dependency injection \ud83d\udccb\n\u2502   \u251c\u2500\u2500 repository/   # Repository interfaces &amp; UoW \ud83d\uddc3\ufe0f\n\u2502   \u251c\u2500\u2500 service/      # Application Layer: Orchestrates use cases, emits/handles events \u2699\ufe0f\n\u2502   \u2502   \u251c\u2500\u2500 account/  # Account service implementations\n\u2502   \u2502   \u251c\u2500\u2500 auth/     # Authentication services\n\u2502   \u2502   \u251c\u2500\u2500 currency/ # Currency services\n\u2502   \u2502   \u2514\u2500\u2500 user/     # User services\n\u2502   \u2514\u2500\u2500 utils/        # Shared utility functions \ud83d\udee0\ufe0f\n\u251c\u2500\u2500 webapi/           # Presentation Layer (Web API) \ud83c\udf10\n\u2502   \u251c\u2500\u2500 account/      # Account HTTP handlers, DTOs, webhooks, and related tests \ud83d\udcb3\n\u2502   \u251c\u2500\u2500 auth/         # Authentication HTTP handlers and DTOs \ud83d\udd11\n\u2502   \u251c\u2500\u2500 common/       # Shared web API utilities (e.g., error formatting) \ud83d\udee0\ufe0f\n\u2502   \u251c\u2500\u2500 currency/     # Currency HTTP handlers and DTOs \ud83d\udcb1\n\u2502   \u251c\u2500\u2500 testutils/    # Test helpers for web API layer \ud83e\uddea\n\u2502   \u251c\u2500\u2500 user/         # User HTTP handlers and DTOs \ud83d\udc64\n\u2502   \u2514\u2500\u2500 app.go        # Fiber application setup and route registration \ud83d\ude80\n\u251c\u2500\u2500 internal/         # Internal packages (not for external use) \ud83d\udd12\n\u2502   \u2514\u2500\u2500 fixtures/     # Test fixtures and mocks \ud83e\uddea\n\u251c\u2500\u2500 scripts/          # Build and deployment scripts \ud83d\udcdc\n\u251c\u2500\u2500 config/           # Configuration management \u2699\ufe0f\n\u251c\u2500\u2500 go.mod            # Go module definition \ud83d\udcdd\n\u251c\u2500\u2500 go.sum            # Go module checksums \u2705\n\u251c\u2500\u2500 Makefile          # Automation scripts \ud83e\udd16\n\u251c\u2500\u2500 Dockerfile        # Docker build instructions \ud83d\udc33\n\u251c\u2500\u2500 docker-compose.yml# Docker Compose config \ud83d\udee0\ufe0f\n\u251c\u2500\u2500 .env.example      # Example environment variables \ud83d\udcc4\n\u251c\u2500\u2500 .gitignore        # Ignore rules \ud83d\ude48\n\u251c\u2500\u2500 README.md         # Project README \ud83d\udcd6\n\u251c\u2500\u2500 ARCHITECTURE.md   # Architecture documentation \ud83c\udfd7\ufe0f\n\u251c\u2500\u2500 CONTRIBUTING.md   # Contribution guidelines \ud83e\udd1d\n\u2514\u2500\u2500 vercel.json       # Vercel deployment config \u2601\ufe0f\n</code></pre>"},{"location":"project-structure.html#architecture-layers_1","title":"\ud83c\udfd7\ufe0f Architecture Layers","text":""},{"location":"project-structure.html#domain-layer-pkgdomain","title":"Domain Layer (<code>pkg/domain/</code>)","text":"<ul> <li>Pure business logic with no external dependencies</li> <li>Value objects like <code>Money</code> for type safety</li> <li>Domain entities like <code>Account</code> and <code>User</code></li> <li>Domain events for event-driven architecture</li> </ul>"},{"location":"project-structure.html#application-layer-pkgservice-pkghandler","title":"Application Layer (<code>pkg/service/</code>, <code>pkg/handler/</code>)","text":"<ul> <li>Use case orchestration through services</li> <li>Event handlers for business flow processing</li> <li>Application-specific business rules</li> </ul>"},{"location":"project-structure.html#infrastructure-layer-infra","title":"Infrastructure Layer (<code>infra/</code>)","text":"<ul> <li>Database implementations using GORM</li> <li>External service integrations (Stripe, currency APIs)</li> <li>Event bus implementations</li> </ul>"},{"location":"project-structure.html#presentation-layer-webapi","title":"Presentation Layer (<code>webapi/</code>)","text":"<ul> <li>HTTP handlers using Fiber framework</li> <li>Request/response DTOs</li> <li>Authentication and middleware</li> </ul>"},{"location":"project-structure.html#key-design-principles","title":"\ud83c\udfaf Key Design Principles","text":"<ul> <li>Clean Architecture: Clear separation between layers</li> <li>Domain-Driven Design: Business logic encapsulated in domain layer</li> <li>Event-Driven Architecture: Loose coupling through domain events</li> <li>Dependency Injection: Services registered through registry pattern</li> <li>Repository Pattern: Data access abstraction</li> <li>Unit of Work Pattern: Transaction management</li> </ul>"},{"location":"project-structure.html#testing-structure","title":"\ud83e\uddea Testing Structure","text":"<ul> <li>Unit Tests: Located alongside source files (<code>*_test.go</code>)</li> <li>Integration Tests: Test complete workflows</li> <li>E2E Tests: Test full business scenarios</li> <li>Test Fixtures: Shared test data in <code>internal/fixtures/</code></li> <li>Mocks: Generated mocks for interfaces</li> </ul> <p>Each directory and file is designed to support clean architecture and event-driven design. See the rest of the docs for deeper dives into each layer.</p>"},{"location":"service-domain-communication.html","title":"Service Domain Layer Communication","text":"<p>This project follows clean architecture principles, with clear separation between the service and domain layers.</p>"},{"location":"service-domain-communication.html#diagram","title":"Diagram","text":"<p><code>mermaid flowchart TD     A[\"API Handler / Controller\"] --&gt; B[\"Service Layer&lt;br/&gt;(e.g., AccountService)\"]     B --&gt;|\"Constructs/Calls\"| C[\"Domain Entity&lt;br/&gt;(e.g., Account, User)\"]     B --&gt;|\"Uses\"| D[\"Domain Service&lt;br/&gt;(e.g., CurrencyConverter)\"]     B --&gt;|\"Persists/Loads\"| E[\"Repository Interface\"]     E --&gt;|\"Implements\"| F[\"Infrastructure Repo&lt;br/&gt;(DB, Cache, etc.)\"]     C &lt;--&gt; D</code></p> <ul> <li>API Handler: Receives request, calls service.</li> <li>Service Layer: Orchestrates use case, manages transactions, calls domain logic.</li> <li>Domain Entity/Service: Contains business rules, invariants.</li> <li>Repository: Abstracts persistence, injected into service.</li> <li>Infrastructure: Actual DB/cache implementation.</li> </ul>"},{"location":"service-domain-communication.html#example-account-deposit","title":"Example: Account Deposit","text":"<p>Domain Layer (<code>pkg/domain/account.go</code>):</p> <pre><code>func (a *Account) Deposit(userID uuid.UUID, money Money) (*Transaction, error) {\n    if userID != a.UserID {\n        return nil, ErrUserUnauthorized\n    }\n    if money.Amount &lt;= 0 {\n        return nil, ErrInvalidAmount\n    }\n    a.Balance += money.Amount\n    tx := NewTransaction(a.ID, userID, money)\n    return tx, nil\n}\n</code></pre> <p>Service Layer (<code>pkg/service/account.go</code>):</p> <pre><code>func (s *AccountService) Deposit(userID, accountID uuid.UUID, amount float64, currencyCode currency.Code) (*domain.Transaction, *domain.ConversionInfo, error) {\n    // ...\n    tx, err := account.Deposit(userID, money)\n    if err != nil {\n        _ = uow.Rollback()\n        return nil, nil, err\n    }\n    err = repo.Update(account)\n    if err != nil {\n        _ = uow.Rollback()\n        return nil, nil, err\n    }\n    // ...\n}\n</code></pre> <ul> <li>Service Layer: Orchestrates the use case, manages transactions, and coordinates repositories.</li> <li>Domain Layer: Enforces business rules and invariants.</li> <li>Repositories: Abstract persistence, injected into services.</li> <li>Unit of Work: Ensures atomicity of operations.</li> </ul>"},{"location":"service-domain-communication.html#dtos-and-domain-invariants","title":"DTOs and Domain Invariants","text":"<p>DTOs (Data Transfer Objects) are used strictly for moving data between layers (API, service, repository). All business rules and invariants must be enforced in the domain layer. Always convert DTOs to domain models before applying any business logic or persisting data. Repositories should never enforce business rules\u2014this keeps the domain pure and the system maintainable.</p>"},{"location":"service-domain-communication.html#event-driven-architecture-notes-lessons-2024-refactor","title":"\ud83e\udde9 Event-Driven Architecture: Notes &amp; Lessons (2024 Refactor)","text":"<ul> <li>Event Bus Pattern: All business flows (deposit, withdraw, transfer) use an event bus to decouple event emission from handling. Handlers are registered for specific event types, not for generic interfaces or central switch/if logic.</li> <li>SRP &amp; DRY: Each handler is responsible for a single event type and business concern. Shared logic is factored into helpers or interfaces only when multiple stable use cases exist.</li> <li>Payment Initiation is Flow-Agnostic: The payment initiation handler accepts both deposit and withdraw validated events, extracting the required fields without caring about the flow type. This avoids unnecessary branching and keeps the handler extensible.</li> <li>Cycle Detection: A static analysis tool (<code>scripts/event_cycle_check.go</code>) is used to detect event cycles and is integrated into pre-commit hooks to prevent infinite event loops.</li> <li>Consistent Logging: All handlers use structured, emoji-rich logging for clarity and traceability.</li> <li>Legacy Cleanup: All legacy event types and handlers have been removed for clarity and maintainability.</li> <li>Design Lessons:<ul> <li>Prefer explicit handler registration for extensibility and SRP.</li> <li>Use interfaces for shared event contracts only when justified by multiple stable use cases (YAGNI principle).</li> <li>Avoid \"refactor ping-pong\" between switch/if and abstraction by documenting design decisions and refactoring only when requirements change.</li> </ul> </li> </ul> <p>See the main <code>README.md</code> for a summary and further references.</p>"},{"location":"testing.html","title":"\ud83e\uddea Testing Guide","text":"<p>Comprehensive testing is crucial for ensuring the reliability and correctness of our financial application. This guide covers our testing strategy, tools, and best practices.</p>"},{"location":"testing.html#testing-strategy","title":"\ud83c\udfaf Testing Strategy","text":""},{"location":"testing.html#unit-tests","title":"Unit Tests","text":"<ul> <li>Test individual functions and methods in isolation</li> <li>Located alongside the code they test (e.g., <code>_test.go</code> files)</li> <li>Focus on pure business logic and domain rules</li> </ul>"},{"location":"testing.html#integration-tests","title":"Integration Tests","text":"<ul> <li>Test interactions between components</li> <li>Use in-memory or test database instances</li> <li>Verify event publishing/subscribing behavior</li> </ul>"},{"location":"testing.html#end-to-end-tests","title":"End-to-End Tests","text":"<ul> <li>Test complete user flows</li> <li>Use test containers for external services</li> <li>Verify system behavior from API to database</li> </ul>"},{"location":"testing.html#test-suite-execution","title":"\ud83d\udee0\ufe0f Test Suite Execution","text":""},{"location":"testing.html#run-all-tests","title":"Run All Tests","text":"<pre><code>go test -v ./...\n</code></pre>"},{"location":"testing.html#run-tests-with-race-detector","title":"Run Tests with Race Detector","text":"<pre><code>go test -race ./...\n</code></pre>"},{"location":"testing.html#run-tests-in-a-specific-package","title":"Run Tests in a Specific Package","text":"<pre><code>cd pkg/account\ngo test -v\n</code></pre>"},{"location":"testing.html#code-coverage","title":"\ud83d\udcc8 Code Coverage","text":""},{"location":"testing.html#generate-coverage-report","title":"Generate Coverage Report","text":"<pre><code>make cov_report\n</code></pre> <p>This will:</p> <ol> <li>Run all tests with coverage</li> <li>Generate an HTML report at <code>docs/coverage.html</code></li> <li>Show coverage percentage in the terminal</li> </ol>"},{"location":"testing.html#event-driven-testing","title":"\ud83d\udd04 Event-Driven Testing","text":""},{"location":"testing.html#testing-event-handlers","title":"Testing Event Handlers","text":"<pre><code>func TestDepositHandler(t *testing.T) {\n    // Setup test dependencies\n    bus := NewInMemoryEventBus()\n    repo := NewMockAccountRepository()\n    handler := NewDepositHandler(repo, bus)\n\n    // Register handler\n    bus.Subscribe(\"Deposit.Requested\", handler.Handle)\n\n    // Publish test event\n    event := DepositRequestedEvent{\n        Amount:   100,\n        AccountID: \"acc123\",\n    }\n    bus.Emit(context.Background(), event)\n\n    // Verify state changes\n    acc, _ := repo.FindByID(\"acc123\")\n    assert.Equal(t, 100, acc.Balance)\n}\n</code></pre>"},{"location":"testing.html#testing-event-flows","title":"Testing Event Flows","text":"<pre><code>func TestDepositFlow(t *testing.T) {\n    // Setup test environment\n    container := testutils.NewTestContainer(t)\n    defer container.Cleanup()\n\n    // Execute API request\n    resp, err := http.Post(\n        container.Server.URL + \"/deposit\",\n        \"application/json\",\n        strings.NewReader(`{\"amount\": 100, \"account_id\": \"acc123\"}`),\n    )\n    require.NoError(t, err)\n    require.Equal(t, http.StatusAccepted, resp.StatusCode)\n\n    // Simulate webhook callback\n    webhookResp, err := http.Post(\n        container.Server.URL + \"/webhooks/payment\",\n        \"application/json\",\n        strings.NewReader(`{\"event\": \"payment.completed\", \"amount\": 100, \"account_id\": \"acc123\"}`),\n    )\n    require.NoError(t, err)\n    require.Equal(t, http.StatusOK, webhookResp.StatusCode)\n\n    // Verify final state\n    acc, err := container.AccountRepo.FindByID(\"acc123\")\n    require.NoError(t, err)\n    assert.Equal(t, 100, acc.Balance)\n}\n</code></pre>"},{"location":"testing.html#test-doubles","title":"\ud83e\uddea Test Doubles","text":""},{"location":"testing.html#mocks","title":"Mocks","text":"<p>Use Mockery to generate mocks for interfaces:</p> <pre><code>mockery --name=AccountRepository --dir=pkg/domain --output=pkg/domain/mocks\n</code></pre>"},{"location":"testing.html#test-containers","title":"Test Containers","text":"<p>Use test containers for integration testing:</p> <pre><code>func TestMain(m *testing.M) {\n    container, err := testcontainers.StartPostgresContainer()\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer container.Terminate()\n\n    os.Exit(m.Run())\n}\n</code></pre>"},{"location":"testing.html#test-data-management","title":"\ud83d\udd0d Test Data Management","text":""},{"location":"testing.html#fixtures","title":"Fixtures","text":"<pre><code>func createTestAccount(t *testing.T, repo AccountRepository) *Account {\n    acc := &amp;Account{\n        ID:      \"test-account\",\n        Balance: 1000,\n        Status:  \"active\",\n    }\n    err := repo.Save(acc)\n    require.NoError(t, err)\n    return acc\n}\n</code></pre>"},{"location":"testing.html#test-helpers","title":"Test Helpers","text":"<pre><code>func mustParseTime(t *testing.T, value string) time.Time {\n    tm, err := time.Parse(time.RFC3339, value)\n    require.NoError(t, err)\n    return tm\n}\n</code></pre>"},{"location":"testing.html#continuous-integration","title":"\ud83d\ude80 Continuous Integration","text":"<p>Our CI pipeline runs:</p> <ol> <li>Unit tests with race detection</li> <li>Integration tests with test containers</li> <li>Linting and static analysis</li> <li>Code coverage reporting</li> </ol>"},{"location":"testing.html#best-practices","title":"\ud83d\udcdd Best Practices","text":"<ol> <li>Isolate Tests: Each test should be independent</li> <li>Use Table Tests: For testing multiple scenarios</li> <li>Test Edge Cases: Zero values, nil checks, error conditions</li> <li>Benchmark Critical Paths: Use Go's built-in benchmarking</li> <li>Keep Tests Fast: Use mocks for slow dependencies</li> <li>Test Error Cases: Ensure proper error handling</li> <li>Verify State and Behavior: Check both state changes and interactions</li> </ol>"},{"location":"testing.html#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>Go Testing Package</li> <li>Testify</li> <li>Testcontainers Go</li> <li>Mockery</li> </ul>"},{"location":"api/index.html","title":"OpenAPI Spec","text":""},{"location":"api/openapi.html","title":"OpenAPI Spec","text":""},{"location":"architecture/api-versioning.html","title":"API Versioning Strategy","text":"<p>This document outlines the API versioning strategy for the FinTech API to ensure backward compatibility and smooth transitions between versions.</p>"},{"location":"architecture/api-versioning.html#versioning-scheme","title":"Versioning Scheme","text":"<ul> <li>Current Version: 1.1</li> <li>Version Format: <code>v{major}.{minor}</code> (e.g., <code>v1.1</code>)</li> <li>Default Version: <code>v1.0</code> (when no version is specified)</li> </ul>"},{"location":"architecture/api-versioning.html#version-identification","title":"Version Identification","text":"<p>API versions can be specified using one of the following methods (in order of precedence):</p> <ol> <li>URL Path (Recommended):</li> </ol> <pre><code>GET /v1.1/accounts\n</code></pre> <ol> <li>Accept Header:</li> </ol> <pre><code>Accept: application/vnd.fintech.v1.1+json\n</code></pre> <ol> <li>Custom Header:</li> </ol> <pre><code>X-API-Version: 1.1\n</code></pre>"},{"location":"architecture/api-versioning.html#backward-compatibility-policy","title":"Backward Compatibility Policy","text":""},{"location":"architecture/api-versioning.html#version-11-current","title":"Version 1.1 (Current)","text":"<ul> <li>Changes:</li> <li>Added support for transaction fees</li> <li>Added new exchange rate caching mechanism</li> <li>Backward Compatibility: Fully backward compatible with v1.0</li> </ul>"},{"location":"architecture/api-versioning.html#version-10-legacy","title":"Version 1.0 (Legacy)","text":"<ul> <li>Initial stable release</li> <li>No breaking changes from previous versions</li> </ul>"},{"location":"architecture/api-versioning.html#handling-breaking-changes","title":"Handling Breaking Changes","text":"<p>For future breaking changes, we will:</p> <ol> <li>Increment the major version number</li> <li>Maintain the previous major version for a reasonable deprecation period</li> <li>Provide migration guides and tools when possible</li> <li>Clearly document breaking changes in release notes</li> </ol>"},{"location":"architecture/api-versioning.html#best-practices-for-clients","title":"Best Practices for Clients","text":"<ol> <li>Always specify the API version in requests</li> <li>Handle HTTP 400 responses for unsupported versions</li> <li>Test new versions in a staging environment before upgrading production</li> <li>Monitor deprecation notices for the APIs you use</li> </ol>"},{"location":"architecture/api-versioning.html#example-requests","title":"Example Requests","text":""},{"location":"architecture/api-versioning.html#using-url-path","title":"Using URL Path","text":"<pre><code>GET /v1.1/accounts/123/transactions HTTP/1.1\nHost: api.fintech.example.com\n</code></pre>"},{"location":"architecture/api-versioning.html#using-accept-header","title":"Using Accept Header","text":"<pre><code>GET /accounts/123/transactions HTTP/1.1\nHost: api.fintech.example.com\nAccept: application/vnd.fintech.v1.1+json\n</code></pre>"},{"location":"architecture/api-versioning.html#version-discovery","title":"Version Discovery","text":"<p>You can discover available versions by making a request to the root endpoint:</p> <pre><code>GET / HTTP/1.1\nHost: api.fintech.example.com\n</code></pre> <p>Response:</p> <pre><code>{\n  \"versions\": [\"1.0\", \"1.1\"],\n  \"current_version\": \"1.1\",\n  \"min_supported_version\": \"1.0\"\n}\n</code></pre>"},{"location":"architecture/transfer-flow.html","title":"\u26a1 Event-Driven Transfer Flow (Current Architecture)","text":""},{"location":"architecture/transfer-flow.html#overview","title":"\ud83c\udfc1 Overview","text":"<p>The current transfer process is a fully event-driven, linear workflow. Each business step is handled by a dedicated, single-responsibility handler with defensive validation. This design ensures modularity, testability, and a clear, robust separation of concerns, preventing unintended side effects like accidental payment initiation.</p>"},{"location":"architecture/transfer-flow.html#event-flow-diagram","title":"\ud83d\uddbc\ufe0f Event Flow Diagram","text":"<p><code>mermaid flowchart TD     subgraph \"Refactored Transfer Event Flow\"         A[API Request] --&gt; B(TransferRequestedEvent);         B --&gt; C[Validation Handler];         C --&gt; D(TransferValidatedEvent);         D --&gt; E[Initial HandleProcessed Handler];         E --&gt; F(ConversionRequestedEvent);         F --&gt; G[Conversion Handler];         G --&gt; H(TransferConversionDoneEvent);         H --&gt; I[Business Validation Handler];         I --&gt; J(TransferDomainOpDoneEvent);         I --&gt;|On Failure| K(TransferFailedEvent);         J --&gt; L[Final HandleProcessed Handler];         L --&gt; M(TransferCompletedEvent);         L --&gt;|On Failure| K;     end</code></p>"},{"location":"architecture/transfer-flow.html#event-handler-responsibilities","title":"\ud83e\udde9 Event Handler Responsibilities","text":""},{"location":"architecture/transfer-flow.html#1-validation-handler","title":"1. Validation Handler","text":"<ul> <li>Consumes: <code>TransferRequestedEvent</code></li> <li>Responsibility: Performs basic structural validation on the request (e.g., non-nil UUIDs, positive amount). Malformed events are logged and discarded.</li> <li>Emits: <code>TransferValidatedEvent</code> on success.</li> </ul>"},{"location":"architecture/transfer-flow.html#2-initial-handleprocessed-handler","title":"2. Initial HandleProcessed Handler","text":"<ul> <li>Consumes: <code>TransferValidatedEvent</code></li> <li>Responsibility: Creates the initial outgoing transaction (<code>tx_out</code>) with a <code>pending</code> status. This provides a durable record of the request early.</li> <li>Emits: <code>ConversionRequestedEvent</code> to trigger currency conversion (if needed).</li> </ul>"},{"location":"architecture/transfer-flow.html#3-conversion-handler-generic","title":"3. Conversion Handler (Generic)","text":"<ul> <li>Consumes: <code>ConversionRequestedEvent</code></li> <li>Responsibility: Performs currency conversion.</li> <li>Emits: <code>TransferConversionDoneEvent</code> (a context-specific event).</li> </ul>"},{"location":"architecture/transfer-flow.html#4-business-validation-handler","title":"4. Business Validation Handler","text":"<ul> <li>Consumes: <code>TransferConversionDoneEvent</code></li> <li>Responsibility: Performs all business-level validation against the current state of the system (e.g., sufficient funds in the source account).</li> <li>Emits:</li> <li><code>TransferDomainOpDoneEvent</code> on success.</li> <li><code>TransferFailedEvent</code> on business rule failure (e.g., insufficient funds).</li> </ul>"},{"location":"architecture/transfer-flow.html#5-final-handleprocessed-handler","title":"5. Final HandleProcessed Handler","text":"<ul> <li>Consumes: <code>TransferDomainOpDoneEvent</code></li> <li>Responsibility: Atomically performs the final state changes:</li> <li>Creates the incoming transaction (<code>tx_in</code>) for the receiver with a <code>completed</code> status.</li> <li>Updates the outgoing transaction (<code>tx_out</code>) to <code>completed</code>.</li> <li>Updates the balances of both the source and destination accounts.</li> <li>Emits:</li> <li><code>TransferCompletedEvent</code> on success.</li> <li><code>TransferFailedEvent</code> if the atomic database operation fails.</li> </ul>"},{"location":"blog/index.html","title":"\u270d\ufe0f Blog","text":"<p>Welcome to the fintech project blog! Here you'll find updates, release notes, and deep dives into new features, architecture decisions, and best practices.</p>"},{"location":"blog/index.html#latest-updates","title":"\ud83c\udfc1 Latest Updates","text":"<p>Stay tuned for the latest news and technical articles.</p>"},{"location":"currency/index.html","title":"Currency &amp; Exchange","text":""},{"location":"currency/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>Currency System</li> <li>Exchange Rates</li> <li>Multi-Currency</li> </ul>"},{"location":"currency/currency-system.html","title":"Currency System","text":""},{"location":"currency/currency-system.html#overview","title":"\u2699\ufe0f Overview","text":"<p>Dynamic Currency Management</p> <p>The fintech application supports dynamic currency management, allowing currencies to be added, updated, and configured at runtime without requiring code changes or system restarts.</p>"},{"location":"currency/currency-system.html#architecture","title":"\ud83d\udce6 Architecture","text":""},{"location":"currency/currency-system.html#currency-registry-pkgcurrency","title":"\ud83c\udfd7\ufe0f Currency Registry (<code>pkg/currency/</code>)","text":"<p>The currency registry is the core component that manages currency metadata:</p> <pre><code>type Meta struct {\n    Decimals int    // Number of decimal places (e.g., 2 for USD, 8 for BTC)\n    Symbol   string // Currency symbol (e.g., \"$\", \"\u20bf\", \"\u20ac\")\n}\n\ntype Registry struct {\n    currencies map[string]Meta\n    mu         sync.RWMutex  // Thread-safe access\n}\n</code></pre>"},{"location":"currency/currency-system.html#global-registry","title":"\ud83d\uddc3\ufe0f Global Registry","text":"<p>A global registry instance provides convenience functions:</p> <pre><code>// Global convenience functions\ncurrency.Get(\"USD\")           // Get currency metadata\ncurrency.Register(\"BTC\", meta) // Add/update currency\ncurrency.IsSupported(\"EUR\")   // Check if currency is supported\ncurrency.ListSupported()      // Get all supported currencies\n</code></pre>"},{"location":"currency/currency-system.html#dynamic-currency-feature","title":"\ud83d\ude80 Dynamic Currency Feature","text":"<p>Register and Update Currencies at Runtime</p> <p>You can register new currencies or update existing ones on the fly, supporting both fiat and crypto use cases.</p>"},{"location":"currency/currency-system.html#runtime-currency-registration","title":"\ud83c\udfc1 Runtime Currency Registration","text":"<p>Add new currencies without restarting the application:</p> <pre><code>// Register cryptocurrencies\ncurrency.Register(\"BTC\", currency.Meta{Decimals: 8, Symbol: \"\u20bf\"})\ncurrency.Register(\"ETH\", currency.Meta{Decimals: 18, Symbol: \"\u039e\"})\n\n// Register new fiat currencies\ncurrency.Register(\"BRL\", currency.Meta{Decimals: 2, Symbol: \"R$\"})\n</code></pre>"},{"location":"currency/currency-system.html#currency-updates","title":"\ud83d\udee0\ufe0f Currency Updates","text":"<p>Update existing currency configurations:</p> <pre><code>// Update USD to support 3 decimal places for micro-transactions\ncurrency.Register(\"USD\", currency.Meta{Decimals: 3, Symbol: \"$\"})\n\n// Update JPY to support decimal places\ncurrency.Register(\"JPY\", currency.Meta{Decimals: 2, Symbol: \"\u00a5\"})\n</code></pre>"},{"location":"currency/currency-system.html#multi-tenant-support","title":"\ud83e\uddd1\u200d\ud83d\udcbc Multi-Tenant Support","text":"<p>Different tenants can have different currency configurations:</p> <pre><code>// Tenant A: Traditional banking\ntenantARegistry := currency.NewRegistry()\ntenantARegistry.Register(\"USD\", currency.Meta{Decimals: 2, Symbol: \"$\"})\ntenantARegistry.Register(\"EUR\", currency.Meta{Decimals: 2, Symbol: \"\u20ac\"})\n\n// Tenant B: Cryptocurrency exchange\ntenantBRegistry := currency.NewRegistry()\ntenantBRegistry.Register(\"BTC\", currency.Meta{Decimals: 8, Symbol: \"\u20bf\"})\ntenantBRegistry.Register(\"ETH\", currency.Meta{Decimals: 18, Symbol: \"\u039e\"})\n</code></pre>"},{"location":"currency/currency-system.html#graceful-fallback","title":"\ud83d\udee1\ufe0f Graceful Fallback","text":"<p>Unknown Currencies</p> <p>If you request metadata for an unknown currency, the system returns a default configuration. Always validate currency codes to avoid surprises.</p> <pre><code>// Unknown currency returns default configuration\nunknownInfo := currency.Get(\"UNKNOWN_CURRENCY\")\n// Returns: Meta{Decimals: 2, Symbol: \"UNKNOWN_CURRENCY\"}\n</code></pre>"},{"location":"currency/currency-system.html#domain-integration","title":"\ud83c\udfe6 Domain Integration","text":""},{"location":"currency/currency-system.html#account-creation-with-dynamic-currencies","title":"\ud83c\udfe6 Account Creation with Dynamic Currencies","text":"<pre><code>// Create accounts with any registered currency\nbtcAccount, err := domain.NewAccountWithCurrency(userID, \"BTC\")\nethAccount, err := domain.NewAccountWithCurrency(userID, \"ETH\")\n</code></pre>"},{"location":"currency/currency-system.html#money-operations-with-dynamic-currencies","title":"\ud83d\udcb0 Money Operations with Dynamic Currencies","text":"<p>Precision Enforcement</p> <p>Each currency enforces its own decimal precision. Attempting to use more decimals than allowed will result in an error.</p> <pre><code>// Create money objects with dynamic currencies\nbtcMoney, err := money.New(0.001, \"BTC\")  // 0.001 BTC\nethMoney, err := money.New(0.5, \"ETH\")    // 0.5 ETH\n\n// Perform operations\n_, err = btcAccount.Deposit(userID, btcMoney)\nbalance, err := btcAccount.GetBalance(userID)\n</code></pre>"},{"location":"currency/currency-system.html#precision-handling","title":"\ud83e\uddee Precision Handling","text":"<p>Each currency maintains its own precision rules:</p> <pre><code>// USD: 2 decimal places\nusdMoney, _ := domain.NewMoney(100.99, \"USD\")     // Valid\nusdMoney, _ := domain.NewMoney(100.999, \"USD\")    // Error: too many decimals\n\n// JPY: 0 decimal places\njpyMoney, _ := domain.NewMoney(1000, \"JPY\")       // Valid\njpyMoney, _ := domain.NewMoney(1000.5, \"JPY\")     // Error: decimals not allowed\n\n// BTC: 8 decimal places\nbtcMoney, _ := domain.NewMoney(0.00000001, \"BTC\") // Valid: 1 satoshi\n</code></pre>"},{"location":"currency/currency-system.html#real-world-use-cases","title":"\ud83c\udf0d Real-World Use Cases","text":""},{"location":"currency/currency-system.html#cryptocurrency-exchange","title":"\ud83c\udf0d Cryptocurrency Exchange","text":"<pre><code>// Register cryptocurrencies as they become available\ncurrency.Register(\"BTC\", currency.Meta{Decimals: 8, Symbol: \"\u20bf\"})\ncurrency.Register(\"ETH\", currency.Meta{Decimals: 18, Symbol: \"\u039e\"})\ncurrency.Register(\"USDT\", currency.Meta{Decimals: 6, Symbol: \"\u20ae\"})\ncurrency.Register(\"ADA\", currency.Meta{Decimals: 6, Symbol: \"\u20b3\"})\n\n// Create accounts for each cryptocurrency\nbtcAccount := domain.NewAccountWithCurrency(userID, \"BTC\")\nethAccount := domain.NewAccountWithCurrency(userID, \"ETH\")\n</code></pre>"},{"location":"currency/currency-system.html#international-banking","title":"\ud83c\udf0d International Banking","text":"<pre><code>// Support new national currencies\ncurrency.Register(\"TRY\", currency.Meta{Decimals: 2, Symbol: \"\u20ba\"}) // Turkish Lira\ncurrency.Register(\"INR\", currency.Meta{Decimals: 2, Symbol: \"\u20b9\"}) // Indian Rupee\ncurrency.Register(\"BRL\", currency.Meta{Decimals: 2, Symbol: \"R$\"}) // Brazilian Real\n</code></pre> <p>Micro-Transaction Support</p> <p>Update USD to support 3 decimal places for micro-transactions: <pre><code>currency.Register(\"USD\", currency.Meta{Decimals: 3, Symbol: \"$\"})\nmicroMoney, _ := domain.NewMoney(0.001, \"USD\")\n</code></pre></p>"},{"location":"currency/currency-system.html#currency-migration","title":"\ud83d\udd04 Currency Migration","text":"<pre><code>// Scenario: Migrating from 2 to 3 decimal places for USD\n// Step 1: Update the currency configuration\ncurrency.Register(\"USD\", currency.Meta{Decimals: 3, Symbol: \"$\"})\n\n// Step 2: Existing accounts continue to work\n// Step 3: New operations use the updated configuration\nnewMoney, _ := domain.NewMoney(100.999, \"USD\") // Now valid\n</code></pre>"},{"location":"currency/currency-system.html#configuration-management","title":"\ud83d\udee0\ufe0f Configuration Management","text":""},{"location":"currency/currency-system.html#2-precision-validation","title":"2. Precision Validation","text":"<pre><code>// Too many decimal places\nmoney, err := domain.NewMoney(100.999, \"USD\")\nif err != nil {\n    // err contains precision error message\n}\n</code></pre>"},{"location":"currency/currency-system.html#3-currency-mismatch","title":"3. Currency Mismatch","text":"<pre><code>// Cannot add different currencies\nusdMoney, _ := money.New(100, \"USD\")\neurMoney, _ := money.New(100, \"EUR\")\nsum, err := usdMoney.Add(eurMoney)\nif err != nil {\n    // err == domain.ErrInvalidCurrencyCode\n}\n</code></pre>"},{"location":"currency/currency-system.html#performance-considerations","title":"\u26a1 Performance Considerations","text":""},{"location":"currency/currency-system.html#1-registry-lookups","title":"1. Registry Lookups","text":"<ul> <li>Currency lookups are O(1) hash map operations</li> <li>Thread-safe with minimal lock contention</li> <li>Global registry uses read-write mutex for optimal performance</li> </ul>"},{"location":"currency/currency-system.html#2-memory-usage","title":"2. Memory Usage","text":"<ul> <li>Each currency metadata is small (~24 bytes)</li> <li>Registry grows linearly with number of currencies</li> <li>Default currencies are pre-loaded for fast access</li> </ul>"},{"location":"currency/currency-system.html#3-concurrency","title":"3. Concurrency","text":"<ul> <li>Read operations use read locks (shared access)</li> <li>Write operations use write locks (exclusive access)</li> <li>Designed for high read-to-write ratios</li> </ul>"},{"location":"currency/currency-system.html#best-practices","title":"\ud83c\udfc5 Best Practices","text":""},{"location":"currency/currency-system.html#1-currency-registration","title":"1. Currency Registration","text":"<pre><code>// Register currencies early in application startup\nfunc init() {\n    // Register default currencies\n    currency.Register(\"USD\", currency.Meta{Decimals: 2, Symbol: \"$\"})\n    currency.Register(\"EUR\", currency.Meta{Decimals: 2, Symbol: \"\u20ac\"})\n\n    // Load additional currencies from configuration\n    LoadCurrenciesFromConfig(\"currencies.json\")\n}\n</code></pre>"},{"location":"currency/currency-system.html#2-validation","title":"2. Validation","text":"<pre><code>// Always validate currency codes before use\nif !currency.IsSupported(currencyCode) {\n    return fmt.Errorf(\"unsupported currency: %s\", currencyCode)\n}\n</code></pre>"},{"location":"currency/currency-system.html#3-error-handling","title":"3. Error Handling","text":"<pre><code>// Handle currency-related errors gracefully\nmoney, err := domain.NewMoney(amount, currencyCode)\nif err != nil {\n    // Log error and return appropriate response\n    return fmt.Errorf(\"invalid money amount: %w\", err)\n}\n</code></pre>"},{"location":"currency/currency-system.html#testing","title":"\ud83e\uddea Testing","text":""},{"location":"currency/currency-system.html#1-unit-tests","title":"1. Unit Tests","text":"<pre><code>func TestDynamicCurrency(t *testing.T) {\n    // Register test currency\n    currency.Register(\"TEST\", currency.Meta{Decimals: 2, Symbol: \"T\"})\n\n    // Test account creation\n    account, err := domain.NewAccountWithCurrency(userID, \"TEST\")\n    assert.NoError(t, err)\n\n    // Test money operations\n    money, err := domain.NewMoney(100.50, \"TEST\")\n    assert.NoError(t, err)\n\n    // Test account operations\n    _, err = account.Deposit(userID, money)\n    assert.NoError(t, err)\n}\n</code></pre>"},{"location":"currency/currency-system.html#2-integration-tests","title":"2. Integration Tests","text":"<pre><code>func TestCurrencyHotReload(t *testing.T) {\n    // Test initial state\n    money1, _ := domain.NewMoney(100.99, \"USD\")\n\n    // Update currency configuration\n    currency.Register(\"USD\", currency.Meta{Decimals: 3, Symbol: \"$\"})\n\n    // Test new configuration\n    money2, _ := domain.NewMoney(100.999, \"USD\")\n    assert.NotEqual(t, money1.String(), money2.String())\n}\n</code></pre>"},{"location":"currency/currency-system.html#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>The dynamic currency system provides:</p> <ol> <li>Flexibility: Add currencies without code changes</li> <li>Scalability: Support for unlimited currencies</li> <li>Thread Safety: Safe concurrent access</li> <li>Performance: Fast lookups and minimal overhead</li> <li>Maintainability: Clean separation of concerns</li> <li>Extensibility: Easy to add new features</li> </ol> <p>This system enables the fintech application to adapt to changing business requirements and support new currencies as they emerge in the market.</p>"},{"location":"currency/exchange-rates.html","title":"Real Exchange Rates &amp; Currency Conversion","text":""},{"location":"currency/exchange-rates.html#overview","title":"\ud83d\udcc8 Overview","text":"<p>The fintech system uses a robust, production-ready exchange rate provider setup:</p> <ul> <li>ExchangeRateAPIProvider (<code>infra/provider/exchangerate_api.go</code>): Fetches real-time rates from exchangerate-api.com, with caching and health checks.</li> <li>exchange.Service (<code>pkg/service/exchange/service.go</code>): Orchestrates provider selection, caching, and fallback logic.</li> </ul> <p>Example:</p> <pre><code>// The exchange service is created in the factory\nexchangeService, err := exchange.New(exchange.Config{\n Registry: providerRegistry,\n Cache:    rateCache,\n Logger:   logger,\n})\n\n// In the application, you can then use the service to convert money\nconvertedMoney, err := exchangeService.Convert(ctx, originalMoney, \"USD\")\n</code></pre> <p>Why this matters</p> <p>This setup ensures reliable, up-to-date currency conversion with robust fallback and caching.</p>"},{"location":"currency/exchange-rates.html#conversion-flow","title":"Conversion Flow","text":"<ol> <li>The service layer requests a conversion (e.g., deposit/withdraw in a different currency).</li> <li>The domain layer performs the conversion using the latest exchange rate (via the real provider).</li> <li>The result is rounded to the correct number of decimals for the target currency using big.Rat.</li> <li>The value is stored in the smallest unit (e.g., cents for USD) as an integer (BIGINT in the DB).</li> <li>Conversion details (original amount, rate, etc.) are stored as DECIMAL(30,15) for full float64 compatibility.</li> </ol>"},{"location":"currency/exchange-rates.html#database-schema","title":"\ud83d\uddc4\ufe0f Database Schema","text":"<ul> <li>All money values are stored as BIGINT (smallest unit, e.g., cents).</li> <li>Conversion fields (original_amount, conversion_rate) in the transactions table are stored as DECIMAL(30,15) to support any float64 value.</li> </ul>"},{"location":"currency/exchange-rates.html#best-practices","title":"\ud83c\udfc5 Best Practices","text":"<ul> <li>Always pass raw float64 values to the domain layer; do not round in the service or API layers.</li> <li>The domain will round and validate as needed.</li> <li>All conversion and rounding logic is centralized for consistency and safety.</li> </ul>"},{"location":"currency/exchange-rates.html#example","title":"\ud83e\uddea Example","text":"<ul> <li>Deposit 1,000,000,000 JPY to a USD account:</li> <li>The system fetches the exchange rate, converts, and rounds to 2 decimals for USD.</li> <li>The result is stored as an integer (cents) in the DB.</li> <li>The original amount, rate, and conversion details are stored as DECIMAL(30,15).</li> </ul>"},{"location":"currency/exchange-rates.html#recent-improvements","title":"\ud83d\ude80 Recent Improvements","text":"<ul> <li>Domain-driven rounding and validation using big.Rat</li> <li>Full float64 compatibility for conversion fields</li> <li>DB schema updated for DECIMAL(30,15) on conversion fields</li> <li>All overflow and decimal errors are now handled before DB writes</li> </ul>"},{"location":"currency/multi-currency.html","title":"Multi-Currency","text":""},{"location":"currency/multi-currency.html#overview","title":"\ud83c\udf10 Overview","text":"<p>The fintech platform supports multi-currency accounts and transactions with robust, precise, and domain-driven conversion and rounding logic. All currency conversion and rounding is handled in the domain layer, ensuring:</p> <ul> <li>Any float64 value can be safely converted and stored.</li> <li>Rounding is always performed to the correct number of decimals for the target currency using big.Rat.</li> <li>The domain layer is responsible for all rounding and validation, not the service or API layers.</li> </ul>"},{"location":"currency/multi-currency.html#how-it-works","title":"How It Works","text":"<ul> <li>Users can deposit, withdraw, and transfer in any supported currency.</li> <li>The system fetches real-time exchange rates and performs conversion in the domain layer.</li> <li>The result is rounded to the correct number of decimals for the target currency.</li> <li>All values are stored in the smallest unit (e.g., cents for USD) as BIGINT.</li> <li>Conversion details (original amount, rate, etc.) are stored as DECIMAL(30,15) for full float64 compatibility.</li> </ul>"},{"location":"currency/multi-currency.html#database-schema","title":"\ud83d\uddc4\ufe0f Database Schema","text":"<ul> <li>Money values: BIGINT (smallest unit)</li> <li>Conversion fields: DECIMAL(30,15)</li> </ul>"},{"location":"currency/multi-currency.html#best-practices","title":"\ud83c\udfc5 Best Practices","text":"<ul> <li>Pass raw float64 values to the domain layer; do not round in the service or API layers.</li> <li>The domain will round and validate as needed.</li> <li>All conversion and rounding logic is centralized for consistency and safety.</li> </ul>"},{"location":"currency/multi-currency.html#example","title":"\ud83e\uddea Example","text":"<ul> <li>Deposit 1,000,000,000 JPY to a USD account:</li> <li>The system fetches the exchange rate, converts, and rounds to 2 decimals for USD.</li> <li>The result is stored as an integer (cents) in the DB.</li> <li>The original amount, rate, and conversion details are stored as DECIMAL(30,15).</li> </ul>"},{"location":"currency/multi-currency.html#recent-improvements","title":"\ud83d\ude80 Recent Improvements","text":"<ul> <li>Domain-driven rounding and validation using big.Rat</li> <li>Full float64 compatibility for conversion fields</li> <li>DB schema updated for DECIMAL(30,15) on conversion fields</li> <li>All overflow and decimal errors are now handled before DB writes</li> </ul>"},{"location":"payments/index.html","title":"Payments","text":""},{"location":"payments/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>Event-Driven Payments</li> <li>Event-Driven Stripe Webhook</li> <li>Stripe Integration</li> </ul>"},{"location":"payments/accept-a-payment.html","title":"Accept a payment","text":"<p>Securely accept payments online.</p> <p>Build a payment form or use a prebuilt checkout page to start accepting online payments.</p>"},{"location":"payments/accept-a-payment.html#stripe-hosted-page","title":"Stripe-hosted page","text":"<p>This is a Stripe-hosted page for when platform is web and ui is stripe-hosted. View the original doc at https://docs.stripe.com/payments/accept-a-payment?platform=web&amp;ui=stripe-hosted.</p> <p>Redirect to a Stripe-hosted payment page using Stripe Checkout. See how this integration compares to Stripe\u2019s other integration types.</p> <p>Redirect to Stripe-hosted payment page</p> <ul> <li>20 preset fonts</li> <li>3 preset border radius</li> <li>Custom background and border color</li> <li>Custom logo</li> </ul> <p>Try it out</p>"},{"location":"payments/accept-a-payment.html#redirect-your-customer-to-stripe-checkout","title":"Redirect your customer to Stripe Checkout","text":"<p>Add a checkout button to your website that calls a server-side endpoint to create a Checkout Session.</p> <p>You can also create a Checkout Session for an existing customer, allowing you to prefill Checkout fields with known contact information and unify your purchase history for that customer.</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Buy cool new product&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- Use action=\"/create-checkout-session.php\" if your server is PHP based. --&gt;\n    &lt;form action=\"/create-checkout-session\" method=\"POST\"&gt;\n      &lt;button type=\"submit\"&gt;Checkout&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>A Checkout Session is the programmatic representation of what your customer sees when they\u2019re redirected to the payment form. You can configure it with options such as:</p> <ul> <li>Line items to charge</li> <li>Currencies to use</li> </ul> <p>You must populate <code>success_url</code> with the URL value of a page on your website that Checkout returns your customer to after they complete the payment. You can optionally also provide a <code>cancel_url</code> value of a page on your website that Checkout returns your customer to if they terminate the payment process before completion.</p> <p>Checkout Sessions expire 24 hours after creation by default.</p> <p>After creating a Checkout Session, redirect your customer to the URL returned in the response.</p> <pre><code>\\# This example sets up an endpoint using the Sinatra framework.\n\n\nrequire 'json'\nrequire 'sinatra'\nrequire 'stripe'\n&lt;&lt;setup key&gt;&gt;\n\npost '/create-checkout-session' do\n  session = Stripe::Checkout::Session.create({\n    line_items: [{\n      price_data: {\n        currency: 'usd',\n        product_data: {\n          name: 'T-shirt',\n        },\n        unit_amount: 2000,\n      },\n      quantity: 1,\n    }],\n    mode: 'payment',\n    # These placeholder URLs will be replaced in a following step.\n    success_url: 'https://example.com/success',\n    cancel_url: 'https://example.com/cancel',\n  })\n\n  redirect session.url, 303\nend\n\npost '/create-checkout-session' do\n  session = Stripe::Checkout::Session.create({\n    line_items: [{\n      price_data: {\n        currency: 'usd',\n        product_data: {\n          name: 'T-shirt',\n        },\n        unit_amount: 2000,\n      },\n      quantity: 1,\n    }],\n    mode: 'payment',\n    # These placeholder URLs will be replaced in a following step.\n    success_url: 'https://example.com/success',\n    cancel_url: 'https://example.com/cancel',\n  })\n\n  redirect session.url, 303\nend\n</code></pre> <pre><code>\\# This example sets up an endpoint using the Flask framework.\n# Watch this video to get started: https://youtu.be/7Ul1vfmsDck.\n\nimport os\nimport stripe\n\nfrom flask import Flask, redirect\n\napp = Flask(__name__)\n\nstripe.api_key = '&lt;&lt;secret key&gt;&gt;'\n\n@app.route('/create-checkout-session', methods=['POST'])\ndef create_checkout_session():\n  session = stripe.checkout.Session.create(\n    line_items=[{\n      'price_data': {\n        'currency': 'usd',\n        'product_data': {\n          'name': 'T-shirt',\n        },\n        'unit_amount': 2000,\n      },\n      'quantity': 1,\n    }],\n    mode='payment',\n    success_url='http://localhost:4242/success',\n    cancel_url='http://localhost:4242/cancel',\n  )\n\n  return redirect(session.url, code=303)\n\nif __name__== '__main__':\n    app.run(port=4242)\n</code></pre> <pre><code>&lt;?php\n\nrequire 'vendor/autoload.php';\n\n$stripe = new \\Stripe\\StripeClient('&lt;&lt;secret key&gt;&gt;');\n\n$checkout_session = $stripe-&gt;checkout-&gt;sessions-&gt;create([\n  'line_items' =&gt; [[\n    'price_data' =&gt; [\n      'currency' =&gt; 'usd',\n      'product_data' =&gt; [\n        'name' =&gt; 'T-shirt',\n      ],\n      'unit_amount' =&gt; 2000,\n    ],\n    'quantity' =&gt; 1,\n  ]],\n  'mode' =&gt; 'payment',\n  'success_url' =&gt; 'http://localhost:4242/success',\n  'cancel_url' =&gt; 'http://localhost:4242/cancel',\n]);\n\nheader(\"HTTP/1.1 303 See Other\");\nheader(\"Location: \" . $checkout_session-&gt;url);\n?&gt;\n</code></pre> <pre><code>import java.util.HashMap;\nimport java.util.Map;\nimport static spark.Spark.get;\nimport static spark.Spark.post;\nimport static spark.Spark.port;\nimport static spark.Spark.staticFiles;\n\nimport com.stripe.Stripe;\nimport com.stripe.model.checkout.Session;\nimport com.stripe.param.checkout.SessionCreateParams;\n\npublic class Server {\n\n  public static void main(String[] args) {\n    port(4242);\n    Stripe.apiKey = \"&lt;&lt;secret key&gt;&gt;\";\n\n    post(\"/create-checkout-session\", (request, response) -&gt; {\n\n      SessionCreateParams params =\n        SessionCreateParams.builder()\n          .setMode(SessionCreateParams.Mode.PAYMENT)\n          .setSuccessUrl(\"http://localhost:4242/success\")\n          .setCancelUrl(\"http://localhost:4242/cancel\")\n          .addLineItem(\n          SessionCreateParams.LineItem.builder()\n            .setQuantity(1L)\n            .setPriceData(\n              SessionCreateParams.LineItem.PriceData.builder()\n                .setCurrency(\"usd\")\n                .setUnitAmount(2000L)\n                .setProductData(\n                  SessionCreateParams.LineItem.PriceData.ProductData.builder()\n                    .setName(\"T-shirt\")\n                    .build())\n                .build())\n            .build())\n          .build();\n\n      Session session = Session.create(params);\n\n      response.redirect(session.getUrl(), 303);\n      return \"\";\n    });\n  }\n}\n</code></pre> <pre><code>// This example sets up an endpoint using the Express framework.\n\nconst express = require('express');\nconst app = express();\nconst stripe = require('stripe')('&lt;&lt;secret key&gt;&gt;')\n\napp.post('/create-checkout-session', async (req, res) =&gt; {\n  const session = await stripe.checkout.sessions.create({\n    line_items: [\n      {\n        price_data: {\n          currency: 'usd',\n          product_data: {\n            name: 'T-shirt',\n          },\n          unit_amount: 2000,\n        },\n        quantity: 1,\n      },\n    ],\n    mode: 'payment',\n    success_url: 'http://localhost:4242/success',\n    cancel_url: 'http://localhost:4242/cancel',\n  });\n\n  res.redirect(303, session.url);\n});\n\napp.listen(4242, () =&gt; console.log(`Listening on port ${4242}!`));\n</code></pre> <pre><code>package main\n\nimport (\n  \"net/http\"\n\n  \"github.com/labstack/echo\"\n  \"github.com/labstack/echo/middleware\"\n  \"github.com/stripe/stripe-go/v{{golang.major_version}}\"\n  \"github.com/stripe/stripe-go/v{{golang.major_version}}/checkout/session\"\n)\n\n// This example sets up an endpoint using the Echo framework.\n// Watch this video to get started: https://youtu.be/ePmEVBu8w6Y.\n\nfunc main() {\n  stripe.Key = \"&lt;&lt;secret key&gt;&gt;\"\n\n  e := echo.New()\n  e.Use(middleware.Logger())\n  e.Use(middleware.Recover())\n\n  e.POST(\"/create-checkout-session\", createCheckoutSession)\n\n  e.Logger.Fatal(e.Start(\"localhost:4242\"))\n}\n\nfunc createCheckoutSession(c echo.Context) (err error) {\n  params := &amp;stripe.CheckoutSessionParams{\n    Mode: stripe.String(string(stripe.CheckoutSessionModePayment)),\n    LineItems: []*stripe.CheckoutSessionLineItemParams{\n      &amp;stripe.CheckoutSessionLineItemParams{\n        PriceData: &amp;stripe.CheckoutSessionLineItemPriceDataParams{\n          Currency: stripe.String(\"usd\"),\n          ProductData: &amp;stripe.CheckoutSessionLineItemPriceDataProductDataParams{\n            Name: stripe.String(\"T-shirt\"),\n          },\n          UnitAmount: stripe.Int64(2000),\n        },\n        Quantity: stripe.Int64(1),\n      },\n    },\n    SuccessURL: stripe.String(\"http://localhost:4242/success\"),\n    CancelURL:  stripe.String(\"http://localhost:4242/cancel\"),\n  }\n\n  s, _ := session.New(params)\n\n  if err != nil {\n    return err\n  }\n\n  return c.Redirect(http.StatusSeeOther, s.URL)\n}\n</code></pre> <pre><code>// This example sets up an endpoint using the ASP.NET MVC framework.\n// Watch this video to get started: https://youtu.be/2-mMOB8MhmE.\n\nusing System.Collections.Generic;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Options;\nusing Stripe;\nusing Stripe.Checkout;\n\nnamespace server.Controllers\n{\n  public class PaymentsController : Controller\n  {\n    public PaymentsController()\n    {\n      StripeConfiguration.ApiKey = \"&lt;&lt;secret key&gt;&gt;\";\n    }\n\n    [HttpPost(\"create-checkout-session\")]\n    public ActionResult CreateCheckoutSession()\n    {\n      var options = new SessionCreateOptions\n      {\n        LineItems = new List&lt;SessionLineItemOptions&gt;\n        {\n          new SessionLineItemOptions\n          {\n            PriceData = new SessionLineItemPriceDataOptions\n            {\n              UnitAmount = 2000,\n              Currency = \"usd\",\n              ProductData = new SessionLineItemPriceDataProductDataOptions\n              {\n                Name = \"T-shirt\",\n              },\n            },\n            Quantity = 1,\n          },\n        },\n        Mode = \"payment\",\n        SuccessUrl = \"http://localhost:4242/success\",\n        CancelUrl = \"http://localhost:4242/cancel\",\n      };\n\n      var service = new SessionService();\n      Session session = service.Create(options);\n\n      Response.Headers.Add(\"Location\", session.Url);\n      return new StatusCodeResult(303);\n    }\n  }\n}\n</code></pre>"},{"location":"payments/accept-a-payment.html#payment-methods","title":"Payment methods","text":"<p>By default, Stripe enables cards and other common payment methods. You can turn individual payment methods on or off in the Stripe Dashboard. In Checkout, Stripe evaluates the currency and any restrictions, then dynamically presents the supported payment methods to the customer.</p> <p>To see how your payment methods appear to customers, enter a transaction ID or set an order amount and currency in the Dashboard.</p> <p>You can enable Apple Pay and Google Pay in your payment methods settings. By default, Apple Pay is enabled and Google Pay is disabled. However, in some cases Stripe filters them out even when they\u2019re enabled. We filter Google Pay if you enable automatic tax without collecting a shipping address.</p> <p>Checkout\u2019s Stripe-hosted pages don\u2019t need integration changes to enable Apple Pay or Google Pay. Stripe handles these payments the same way as other card payments.</p>"},{"location":"payments/accept-a-payment.html#confirm-your-endpoint","title":"Confirm your endpoint","text":"<p>Confirm your endpoint is accessible by starting your web server (for example, <code>localhost:4242</code>) and running the following command:</p> <pre><code>curl -X POST -is \"http://localhost:4242/create-checkout-session\" -d \"\"\n</code></pre> <p>You should see a response in your terminal that looks like this:</p> <pre><code>HTTP/1.1 303 See Other\nLocation: https://checkout.stripe.com/c/pay/cs_test_...\n...\n</code></pre>"},{"location":"payments/accept-a-payment.html#testing","title":"Testing","text":"<p>You should now have a working checkout button that redirects your customer to Stripe Checkout.</p> <ol> <li>Click the checkout button.</li> <li>You\u2019re redirected to the Stripe Checkout payment form.</li> </ol> <p>If your integration isn\u2019t working:</p> <ol> <li>Open the Network tab in your browser\u2019s developer tools.</li> <li>Click the checkout button and confirm it sent an XHR request to your server-side endpoint (<code>POST /create-checkout-session</code>).</li> <li>Verify the request is returning a 200 status.</li> <li>Use <code>console.log(session)</code> inside your button click listener to confirm the correct data returned.</li> </ol>"},{"location":"payments/accept-a-payment.html#show-a-success-page","title":"Show a success page","text":"<p>It\u2019s important for your customer to see a success page after they successfully submit the payment form. Host this success page on your site.</p> <p>Create a minimal success page:</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;&lt;title&gt;Thanks for your order!&lt;/title&gt;&lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Thanks for your order!&lt;/h1&gt;\n    &lt;p&gt;\n      We appreciate your business!\n      If you have any questions, please email\n      &lt;a href=\"mailto:orders@example.com\"&gt;orders@example.com&lt;/a&gt;.\n    &lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Next, update the Checkout Session creation endpoint to use this new page:</p> <pre><code>StripeConfiguration.ApiKey = \"&lt;&lt;secret key&gt;&gt;\";\n\nvar options = new Stripe.Checkout.SessionCreateOptions\n{\n    LineItems = new List&lt;Stripe.Checkout.SessionLineItemOptions&gt;\n    {\n        new Stripe.Checkout.SessionLineItemOptions\n        {\n            PriceData = new Stripe.Checkout.SessionLineItemPriceDataOptions\n            {\n                Currency = \"usd\",\n                ProductData = new Stripe.Checkout.SessionLineItemPriceDataProductDataOptions\n                {\n                    Name = \"T-shirt\",\n                },\n                UnitAmount = 2000,\n            },\n            Quantity = 1,\n        },\n    },\n    Mode = \"payment\",\n    SuccessUrl = \"http://localhost:4242/success.html\",\n    CancelUrl = \"http://localhost:4242/cancel.html\",\n};\nvar service = new Stripe.Checkout.SessionService();\nStripe.Checkout.Session session = service.Create(options);\n</code></pre> <pre><code>stripe.Key = \"&lt;&lt;secret key&gt;&gt;\"\n\nparams := &amp;stripe.CheckoutSessionParams{\n  LineItems: []*stripe.CheckoutSessionLineItemParams{\n    &amp;stripe.CheckoutSessionLineItemParams{\n      PriceData: &amp;stripe.CheckoutSessionLineItemPriceDataParams{\n        Currency: stripe.String(string(stripe.CurrencyUSD)),\n        ProductData: &amp;stripe.CheckoutSessionLineItemPriceDataProductDataParams{\n          Name: stripe.String(\"T-shirt\"),\n        },\n        UnitAmount: stripe.Int64(2000),\n      },\n      Quantity: stripe.Int64(1),\n    },\n  },\n  Mode: stripe.String(string(stripe.CheckoutSessionModePayment)),\n  SuccessURL: stripe.String(\"http://localhost:4242/success.html\"),\n  CancelURL: stripe.String(\"http://localhost:4242/cancel.html\"),\n};\nresult, err := session.New(params);\n</code></pre> <pre><code>Stripe.apiKey = \"&lt;&lt;secret key&gt;&gt;\";\n\nSessionCreateParams params =\n  SessionCreateParams.builder()\n    .addLineItem(\n      SessionCreateParams.LineItem.builder()\n        .setPriceData(\n          SessionCreateParams.LineItem.PriceData.builder()\n            .setCurrency(\"usd\")\n            .setProductData(\n              SessionCreateParams.LineItem.PriceData.ProductData.builder()\n                .setName(\"T-shirt\")\n                .build()\n            )\n            .setUnitAmount(2000L)\n            .build()\n        )\n        .setQuantity(1L)\n        .build()\n    )\n    .setMode(SessionCreateParams.Mode.PAYMENT)\n    .setSuccessUrl(\"http://localhost:4242/success.html\")\n    .setCancelUrl(\"http://localhost:4242/cancel.html\")\n    .build();\n\nSession session = Session.create(params);\n</code></pre> <pre><code>const stripe = require('stripe')('&lt;&lt;secret key&gt;&gt;');\n\nconst session = await stripe.checkout.sessions.create({\n  line_items: [\n    {\n      price_data: {\n        currency: 'usd',\n        product_data: {\n          name: 'T-shirt',\n        },\n        unit_amount: 2000,\n      },\n      quantity: 1,\n    },\n  ],\n  mode: 'payment',\n  success_url: 'http://localhost:4242/success.html',\n  cancel_url: 'http://localhost:4242/cancel.html',\n});\n</code></pre> <pre><code>import stripe\nstripe.api_key = \"&lt;&lt;secret key&gt;&gt;\"\n\nsession = stripe.checkout.Session.create(\n  line_items=[\n    {\n      \"price_data\": {\"currency\": \"usd\", \"product_data\": {\"name\": \"T-shirt\"}, \"unit_amount\": 2000},\n      \"quantity\": 1,\n    },\n  ],\n  mode=\"payment\",\n  success_url=\"http://localhost:4242/success.html\",\n  cancel_url=\"http://localhost:4242/cancel.html\",\n)\n</code></pre> <pre><code>$stripe = new \\Stripe\\StripeClient('&lt;&lt;secret key&gt;&gt;');\n\n$session = $stripe-&gt;checkout-&gt;sessions-&gt;create([\n  'line_items' =&gt; [\n    [\n      'price_data' =&gt; [\n        'currency' =&gt; 'usd',\n        'product_data' =&gt; ['name' =&gt; 'T-shirt'],\n        'unit_amount' =&gt; 2000,\n      ],\n      'quantity' =&gt; 1,\n    ],\n  ],\n  'mode' =&gt; 'payment',\n  'success_url' =&gt; 'http://localhost:4242/success.html',\n  'cancel_url' =&gt; 'http://localhost:4242/cancel.html',\n]);\n</code></pre> <pre><code>Stripe.api_key = '&lt;&lt;secret key&gt;&gt;'\n\nsession = Stripe::Checkout::Session.create({\n  line_items: [\n    {\n      price_data: {\n        currency: 'usd',\n        product_data: {name: 'T-shirt'},\n        unit_amount: 2000,\n      },\n      quantity: 1,\n    },\n  ],\n  mode: 'payment',\n  success_url: 'http://localhost:4242/success.html',\n  cancel_url: 'http://localhost:4242/cancel.html',\n})\n</code></pre> <p>If you want to customize your success page, read the custom success page guide.</p>"},{"location":"payments/accept-a-payment.html#testing_1","title":"Testing","text":"<ol> <li>Click your checkout button.</li> <li>Fill out the payment details with the test card information:</li> <li>Enter <code>4242 4242 4242 4242</code> as the card number.</li> <li>Enter any future date for card expiry.</li> <li>Enter any 3-digit number for CVC.</li> <li>Enter any billing postal code.</li> <li>Click Pay.</li> <li>You\u2019re redirected to your new success page.</li> </ol> <p>Next, find the new payment in the Stripe Dashboard. Successful payments appear in the Dashboard\u2019s list of payments. When you click a payment, it takes you to the payment details page. The Checkout summary section contains billing information and the list of items purchased, which you can use to manually fulfill the order.</p>"},{"location":"payments/accept-a-payment.html#handle-post-payment-events","title":"Handle post-payment events","text":"<p>Stripe sends a checkout.session.completed event when a customer completes a Checkout Session payment. Use the Dashboard webhook tool or follow the webhook guide to receive and handle these events, which might trigger you to:</p> <ul> <li>Send an order confirmation email to your customer.</li> <li>Log the sale in a database.</li> <li>Start a shipping workflow.</li> </ul> <p>Listen for these events rather than waiting for your customer to be redirected back to your website. Triggering fulfillment only from your Checkout landing page is unreliable. Setting up your integration to listen for asynchronous events allows you to accept different types of payment methods with a single integration.</p> <p>Learn more in our fulfillment guide for Checkout.</p> <p>Handle the following events when collecting payments with the Checkout:</p> Event Description Action checkout.session.completed Sent when a customer successfully completes a Checkout Session. Send the customer an order confirmation and fulfill their order. checkout.session.async_payment_succeeded Sent when a payment made with a delayed payment method, such as ACH direct debt, succeeds. Send the customer an order confirmation and fulfill their order. checkout.session.async_payment_failed Sent when a payment made with a delayed payment method, such as ACH direct debt, fails. Notify the customer of the failure and bring them back on-session to attempt payment again."},{"location":"payments/accept-a-payment.html#test-your-integration","title":"Test your integration","text":"<p>To test your Stripe-hosted payment form integration:</p> <ol> <li>Create a Checkout Session.</li> <li>Fill out the payment details with a method from the following table.</li> <li>Enter any future date for card expiry.</li> <li>Enter any 3-digit number for CVC.</li> <li>Enter any billing postal code.</li> <li>Click Pay. You\u2019re redirected to your <code>success_url</code>.</li> <li>Go to the Dashboard and look for the payment on the Transactions page. If your payment succeeded, you\u2019ll see it in that list.</li> <li>Click your payment to see more details, like a Checkout summary with billing information and the list of purchased items. You can use this information to fulfill the order.</li> </ol> <p>Learn more about testing your integration.</p> Card number Scenario How to test 4242424242424242 The card payment succeeds and doesn\u2019t require authentication. Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. 4000002500003155 The card payment requires authentication. Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. 4000000000009995 The card is declined with a decline code like <code>insufficient_funds</code>. Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. 6205500000000000004 The UnionPay card has a variable length of 13-19 digits. Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. Payment method Scenario How to test Your customer fails to authenticate on the redirect page for a redirect-based and immediate notification payment method. Choose any redirect-based payment method, fill out the required details, and confirm the payment. Then click Fail test payment on the redirect page. Pay by Bank Your customer successfully pays with a redirect-based and delayed notification payment method. Choose the payment method, fill out the required details, and confirm the payment. Then click Complete test payment on the redirect page. Pay by Bank Your customer fails to authenticate on the redirect page for a redirect-based and delayed notification payment method. Choose the payment method, fill out the required details, and confirm the payment. Then click Fail test payment on the redirect page. Payment method Scenario How to test SEPA Direct Debit Your customer successfully pays with SEPA Direct Debit. Fill out the form using the account number <code>AT321904300235473204</code>. The confirmed PaymentIntent initially transitions to processing, then transitions to the succeeded status three minutes later. SEPA Direct Debit Your customer\u2019s payment intent status transitions from <code>processing</code> to <code>requires_payment_method</code>. Fill out the form using the account number <code>AT861904300235473202</code>. <p>See Testing for additional information to test your integration.</p>"},{"location":"payments/accept-a-payment.html#test-cards","title":"Test cards","text":"Number Description 4242 4242 4242 4242 Succeeds and immediately processes the payment. 4000 0000 0000 3220 Requires 3D Secure 2 authentication for a successful payment. 4000 0000 0000 9995 Always fails with a decline code of <code>insufficient_funds</code>."},{"location":"payments/accept-a-payment.html#create-products-and-prices","title":"Create products and prices","text":"<p>You can set up your Checkout Session to accept tips and donations, or sell pay-what-you-want products and services.</p> <p>Before you create a Checkout Session, you can create Products and Prices upfront. Use products to represent different physical goods or levels of service, and Prices to represent each product\u2019s pricing.</p> <p>For example, you can create a T-shirt as a product with a price of 20 USD. This allows you to update and add prices without needing to change the details of your underlying products. You can either create products and prices with the Stripe Dashboard or API. Learn more about how products and prices work.</p> <p>The API only requires a <code>name</code> to create a Product. Checkout displays the product <code>name</code>, <code>description</code>, and <code>images</code> that you supply.</p> <pre><code>StripeConfiguration.ApiKey = \"&lt;&lt;secret key&gt;&gt;\";\n\nvar options = new ProductCreateOptions { Name = \"T-shirt\" };\nvar service = new ProductService();\nProduct product = service.Create(options);\n</code></pre> <pre><code>stripe.Key = \"&lt;&lt;secret key&gt;&gt;\"\n\nparams := &amp;stripe.ProductParams{Name: stripe.String(\"T-shirt\")};\nresult, err := product.New(params);\n</code></pre> <pre><code>Stripe.apiKey = \"&lt;&lt;secret key&gt;&gt;\";\n\nProductCreateParams params = ProductCreateParams.builder().setName(\"T-shirt\").build();\n\nProduct product = Product.create(params);\n</code></pre> <pre><code>const stripe = require('stripe')('&lt;&lt;secret key&gt;&gt;');\n\nconst product = await stripe.products.create({\n  name: 'T-shirt',\n});\n</code></pre> <pre><code>import stripe\nstripe.api_key = \"&lt;&lt;secret key&gt;&gt;\"\n\nproduct = stripe.Product.create(name=\"T-shirt\")\n</code></pre> <pre><code>$stripe = new \\Stripe\\StripeClient('&lt;&lt;secret key&gt;&gt;');\n\n$product = $stripe-&gt;products-&gt;create(['name' =&gt; 'T-shirt']);\n</code></pre> <pre><code>Stripe.api_key = '&lt;&lt;secret key&gt;&gt;'\n\nproduct = Stripe::Product.create({name: 'T-shirt'})\n</code></pre> <p>Next, create a Price to define how much to charge for your product. This includes how much the product costs and what currency to use.</p> <pre><code>StripeConfiguration.ApiKey = \"&lt;&lt;secret key&gt;&gt;\";\n\nvar options = new PriceCreateOptions\n{\n    Product = \"&lt;&lt;product&gt;&gt;\",\n    UnitAmount = 2000,\n    Currency = \"usd\",\n};\nvar service = new PriceService();\nPrice price = service.Create(options);\n</code></pre> <pre><code>stripe.Key = \"&lt;&lt;secret key&gt;&gt;\"\n\nparams := &amp;stripe.PriceParams{\n  Product: stripe.String(\"&lt;&lt;product&gt;&gt;\"),\n  UnitAmount: stripe.Int64(2000),\n  Currency: stripe.String(string(stripe.CurrencyUSD)),\n};\nresult, err := price.New(params);\n</code></pre> <pre><code>Stripe.apiKey = \"&lt;&lt;secret key&gt;&gt;\";\n\nPriceCreateParams params =\n  PriceCreateParams.builder()\n    .setProduct(\"&lt;&lt;product&gt;&gt;\")\n    .setUnitAmount(2000L)\n    .setCurrency(\"usd\")\n    .build();\n\nPrice price = Price.create(params);\n</code></pre> <pre><code>const stripe = require('stripe')('&lt;&lt;secret key&gt;&gt;');\n\nconst price = await stripe.prices.create({\n  product: '&lt;&lt;product&gt;&gt;',\n  unit_amount: 2000,\n  currency: 'usd',\n});\n</code></pre> <pre><code>import stripe\nstripe.api_key = \"&lt;&lt;secret key&gt;&gt;\"\n\nprice = stripe.Price.create(\n  product=\"&lt;&lt;product&gt;&gt;\",\n  unit_amount=2000,\n  currency=\"usd\",\n)\n</code></pre> <pre><code>$stripe = new \\Stripe\\StripeClient('&lt;&lt;secret key&gt;&gt;');\n\n$price = $stripe-&gt;prices-&gt;create([\n  'product' =&gt; '&lt;&lt;product&gt;&gt;',\n  'unit_amount' =&gt; 2000,\n  'currency' =&gt; 'usd',\n]);\n</code></pre> <pre><code>Stripe.api_key = '&lt;&lt;secret key&gt;&gt;'\n\nprice = Stripe::Price.create({\n  product: '&lt;&lt;product&gt;&gt;',\n  unit_amount: 2000,\n  currency: 'usd',\n})\n</code></pre> <p>Copy products created in a sandbox to live mode so that you don\u2019t need to re-create them. In the Product detail view in the Dashboard, click Copy to live mode in the upper right corner. You can only do this once for each product created in a sandbox. Subsequent updates to the test product aren\u2019t reflected for the live product.</p> <p>Make sure you\u2019re in a sandbox by clicking Sandboxes within the Dashboard account picker. Next, define the items you want to sell. To create a new product and price:</p> <ul> <li>Navigate to the Products section in the Dashboard.</li> <li>Click Add product.</li> <li>Select One time when setting the price.</li> </ul> <p>Checkout displays the product name, description, and images that you supply.</p> <p>Each price you create has an ID. When you create a Checkout Session, reference the price ID and quantity. If you\u2019re selling in multiple currencies, make your Price multi-currency. Checkout automatically determines the customer\u2019s local currency and presents that currency if the Price supports it.</p> <pre><code>StripeConfiguration.ApiKey = \"&lt;&lt;secret key&gt;&gt;\";\n\nvar options = new Stripe.Checkout.SessionCreateOptions\n{\n    Mode = \"payment\",\n    LineItems = new List&lt;Stripe.Checkout.SessionLineItemOptions&gt;\n    {\n        new Stripe.Checkout.SessionLineItemOptions { Price = \"{{PRICE_ID}}\", Quantity = 1 },\n    },\n    SuccessUrl = \"https://example.com/success?session_id={CHECKOUT_SESSION_ID}\",\n    CancelUrl = \"https://example.com/cancel\",\n};\nvar service = new Stripe.Checkout.SessionService();\nStripe.Checkout.Session session = service.Create(options);\n</code></pre> <pre><code>stripe.Key = \"&lt;&lt;secret key&gt;&gt;\"\n\nparams := &amp;stripe.CheckoutSessionParams{\n  Mode: stripe.String(string(stripe.CheckoutSessionModePayment)),\n  LineItems: []*stripe.CheckoutSessionLineItemParams{\n    &amp;stripe.CheckoutSessionLineItemParams{\n      Price: stripe.String(\"{{PRICE_ID}}\"),\n      Quantity: stripe.Int64(1),\n    },\n  },\n  SuccessURL: stripe.String(\"https://example.com/success?session_id={CHECKOUT_SESSION_ID}\"),\n  CancelURL: stripe.String(\"https://example.com/cancel\"),\n};\nresult, err := session.New(params);\n</code></pre> <pre><code>Stripe.apiKey = \"&lt;&lt;secret key&gt;&gt;\";\n\nSessionCreateParams params =\n  SessionCreateParams.builder()\n    .setMode(SessionCreateParams.Mode.PAYMENT)\n    .addLineItem(\n      SessionCreateParams.LineItem.builder().setPrice(\"{{PRICE_ID}}\").setQuantity(1L).build()\n    )\n    .setSuccessUrl(\"https://example.com/success?session_id={CHECKOUT_SESSION_ID}\")\n    .setCancelUrl(\"https://example.com/cancel\")\n    .build();\n\nSession session = Session.create(params);\n</code></pre> <p>```node const stripe = require('stripe')('&lt;&gt;'); <p>const session = await stripe.checkout.sessions.create({   mode: 'payment',   line_items: [     {       price: '{{PRICE_ID}}',       quantity: 1,     },   ],   success_url: 'https://example.com/success?session_id={CHECKOUT_SESSION_ID}',   cancel_url:</p>"},{"location":"payments/event-driven-payments.html","title":"Event-Driven Payments","text":""},{"location":"payments/event-driven-payments.html#flow-description","title":"\ud83c\udfc1 Flow Description","text":"<ol> <li>API Request</li> <li>User sends a request to deposit, withdraw, or transfer funds via the API (<code>/account/:id/deposit</code>, <code>/account/:id/withdraw</code>, <code>/account/:id/transfer</code>).</li> <li> <p>The Fiber handler parses and validates the request, then calls the corresponding method on the <code>account.Service</code>.</p> </li> <li> <p>Service Layer</p> </li> <li>The service method (<code>Deposit</code>, <code>Withdraw</code>, <code>Transfer</code>) initiates the payment with the (mock) payment provider.</li> <li> <p>For deposits/withdrawals, the service polls the payment provider for up to 5 seconds, checking if the payment is completed.</p> <ul> <li>If the payment is not completed in time, it returns an error.</li> <li>If completed, it proceeds to the next step.</li> </ul> </li> <li> <p>Business Logic (Chain of Responsibility)</p> </li> <li> <p>The service calls the <code>accountChain</code> (chain of responsibility pattern) to perform the business operation:</p> <ul> <li>Validation: Checks account/user validity.</li> <li>Money Creation: Constructs the money value object.</li> <li>Currency Conversion: Converts currency if needed.</li> <li>Domain Operation: Executes the deposit/withdraw/transfer on the domain model.</li> <li>HandleProcessed: Updates the account and creates the transaction in the database.</li> </ul> </li> <li> <p>API Response</p> </li> <li>The handler serializes the transaction and conversion info (if any) and returns a success response to the client.</li> </ol>"},{"location":"payments/event-driven-payments.html#mermaid-diagram-current-payment-flow","title":"\ud83d\uddbc\ufe0f Mermaid Diagram: Current Payment Flow","text":"<p>```mermaid sequenceDiagram     participant User     participant API     participant Service     participant PaymentProvider     participant Chain     participant DB</p> <pre><code>User-&gt;&gt;API: POST /account/:id/deposit (or withdraw/transfer)\nAPI-&gt;&gt;Service: Deposit/Withdraw/Transfer(...)\nService-&gt;&gt;PaymentProvider: InitiateDeposit/Withdraw(...)\nloop Poll for completion (5s)\n    Service-&gt;&gt;PaymentProvider: GetPaymentStatus(paymentID)\n    alt Completed\n        Service-&gt;&gt;Chain: Deposit/Withdraw/Transfer(...)\n        Chain-&gt;&gt;DB: Update account, create transaction\n        Chain-&gt;&gt;Service: Result\n    else Timeout/Error\n        Service-&gt;&gt;API: Error\n    end\nend\nService-&gt;&gt;API: Success (transaction, conversion info)\n</code></pre> <p>```</p>"},{"location":"payments/event-driven-payments.html#event-driven-payment-flow-migration","title":"\ud83d\udd04 Event-Driven Payment Flow Migration","text":""},{"location":"payments/event-driven-payments.html#high-level-architecture","title":"\ud83c\udfd7\ufe0f High-Level Architecture","text":"<ol> <li>User initiates deposit/withdrawal.</li> <li>System creates a transaction with status <code>initiated</code>.</li> <li>A <code>PaymentEvent</code> with status <code>initiated</code> is published.</li> <li>Payment is sent to provider and is in progress.</li> <li>System publishes a <code>PaymentEvent</code> with status <code>pending</code>.</li> <li>Returns immediately to the user (no blocking or polling).</li> <li>Payment provider processes the payment.</li> <li>When done, it sends a webhook/callback to your service.</li> <li>Webhook handler receives confirmation.</li> <li>Updates the transaction status to <code>completed</code> or <code>failed</code>.</li> <li>A <code>PaymentEvent</code> with status <code>completed</code> or <code>failed</code> is published.</li> <li>Triggers business logic (e.g., credit/debit account, notify user).</li> <li>User/client can poll or subscribe for status updates.</li> </ol>"},{"location":"payments/event-driven-payments.html#event-publishing-in-the-service-layer","title":"\ud83d\udd14 Event Publishing in the Service Layer","text":"<p>The service publishes a <code>PaymentEvent</code> at each stage:</p> <ul> <li>Initiated: When payment is requested by the user</li> <li>Pending: After provider call, while waiting for confirmation</li> <li>Completed: When payment is confirmed and business logic succeeds</li> <li>Failed: On payment provider error, timeout, or business error</li> </ul> <p>Example:</p> <pre><code>_ = s.eventBus.PublishPaymentEvent(account.PaymentEvent{\n    EventID:       uuid.NewString(),\n    TransactionID: resp.Transaction.ID.String(),\n    AccountID:     accountID.String(),\n    UserID:        userID.String(),\n    Amount:        int64(amount * 100),\n    Currency:      string(currencyCode),\n    Status:        account.PaymentStatusCompleted, // or Initiated/Pending/Failed\n    Provider:      \"mock\",\n    Timestamp:     time.Now().Unix(),\n    Metadata:      map[string]string{\"operation\": \"deposit\"},\n})\n</code></pre>"},{"location":"payments/event-driven-payments.html#in-memory-event-bus-for-testing","title":"\ud83e\uddea In-Memory Event Bus for Testing","text":"<p>For local development and testing, the <code>MemoryEventBus</code> implementation records all published events in a slice. This allows tests to assert on the number, order, and content of events:</p> <pre><code>memBus := &amp;eventbus.MemoryEventBus{}\nsvc := accountsvc.NewService(accountsvc.ServiceDeps{\n    // ...\n    EventBus: memBus,\n})\n// ...\ntx, _, err := svc.Deposit(userID, accountID, 100.0, currency.USD, \"Cash\")\nrequire.NoError(t, err)\nrequire.Len(t, memBus.Events, 4) // initiated, pending, completed, etc.\nassert.Equal(t, accountdomain.PaymentStatusInitiated, memBus.Events[0].Status)\nassert.Equal(t, accountdomain.PaymentStatusPending, memBus.Events[1].Status)\nassert.Equal(t, accountdomain.PaymentStatusCompleted, memBus.Events[3].Status)\n</code></pre>"},{"location":"payments/event-driven-payments.html#mermaid-diagram-event-driven-payment-flow","title":"\ud83d\uddbc\ufe0f Mermaid Diagram: Event-Driven Payment Flow","text":"<p>```mermaid sequenceDiagram     participant User     participant API     participant Service     participant EventBus     participant PaymentProvider     participant Webhook     participant DB</p> <pre><code>User-&gt;&gt;API: POST /account/:id/deposit (or withdraw)\nAPI-&gt;&gt;Service: Deposit/Withdraw(...)\nService-&gt;&gt;EventBus: Publish PaymentEvent (initiated)\nService-&gt;&gt;PaymentProvider: InitiateDeposit/Withdraw(...)\nService-&gt;&gt;EventBus: Publish PaymentEvent (pending)\nPaymentProvider--&gt;&gt;Webhook: Payment completed/failed (webhook)\nWebhook-&gt;&gt;Service: Handle webhook\nService-&gt;&gt;EventBus: Publish PaymentEvent (completed/failed)\nService-&gt;&gt;DB: Update account, create transaction\nService-&gt;&gt;API: Success (transaction, conversion info)\n</code></pre> <p>```</p>"},{"location":"payments/event-driven-payments.html#transaction-lifecycle","title":"\ud83d\udd01 Transaction Lifecycle","text":"<ul> <li>pending: Payment initiated, awaiting confirmation.</li> <li>completed: Payment confirmed by provider, funds credited/debited.</li> <li>failed: Payment failed or was rejected by provider.</li> </ul>"},{"location":"payments/event-driven-payments.html#endpoints","title":"\ud83d\udd17 Endpoints","text":"<ul> <li>POST /account/:id/deposit</li> <li>Initiates a deposit, creates a <code>pending</code> transaction.</li> <li> <p>Returns transaction ID and status.</p> </li> <li> <p>POST /account/:id/withdraw</p> </li> <li>Initiates a withdrawal, creates a <code>pending</code> transaction.</li> <li> <p>Returns transaction ID and status.</p> </li> <li> <p>POST /webhook/payment</p> </li> <li>Receives payment provider webhook/callback.</li> <li>Validates and updates transaction status.</li> <li> <p>Triggers business logic (credit/debit, notification).</p> </li> <li> <p>GET /transaction/:id/status (optional)</p> </li> <li>Returns current status of a transaction for polling clients.</li> </ul>"},{"location":"payments/event-driven-payments.html#migration-plan","title":"\ud83d\udea7 Migration Plan","text":"<ol> <li>Add <code>status</code> field to transaction model and database.</li> <li>Refactor service methods to create <code>pending</code> transactions and return immediately.</li> <li>Implement webhook/callback endpoint for payment confirmation.</li> <li>Update business logic to process status changes asynchronously.</li> <li>Update tests and mocks to simulate webhook/callbacks.</li> <li>Document new flow for team and clients.</li> </ol>"},{"location":"payments/event-driven-payments.html#testing-and-observability","title":"\ud83d\udd2c Testing and Observability","text":"<ul> <li>Unit tests: Cover all transaction state transitions and error cases.</li> <li>Integration/E2E tests: Simulate full payment flow, including webhook delivery.</li> <li>Logging: Log all state changes, webhook receipts, and errors.</li> <li>Tracing: Use OpenTelemetry to trace payment initiation, webhook handling, and status updates.</li> <li>Metrics: Track transaction counts, status transitions, webhook latency, and error rates.</li> </ul>"},{"location":"payments/event-driven-payments.html#best-practices","title":"\ud83c\udfc5 Best Practices","text":"<ul> <li>Webhook Security: Validate signatures, use HTTPS, and ensure idempotency.</li> <li>Error Handling: Implement retries and dead-letter queues for failed webhooks.</li> <li>Extensibility: Design for multiple payment providers and future event types.</li> <li>User Notification: Optionally notify users on status changes (email, websocket, etc.).</li> <li>Documentation: Keep this doc and API references up to date as the system evolves.</li> </ul>"},{"location":"payments/event-driven-payments.html#business-logic-and-handleprocessed-after-mega-refactor","title":"\ud83c\udfe6 Business Logic and HandleProcessed (After Mega Refactor)","text":"<ul> <li>HandleProcessed is now handled by operation-specific handlers:</li> <li><code>DepositPersistenceHandler</code></li> <li><code>WithdrawPersistenceHandler</code></li> <li><code>TransferPersistenceHandler</code></li> <li>Each handler pulls domain events and uses <code>transaction_factory.go</code> helpers to create transactions.</li> <li>Webhook triggers the correct handler and updates both transaction status and account balance.</li> <li>The legacy monolithic handler is removed.</li> </ul>"},{"location":"payments/event-driven-payments.html#updated-mermaid-diagram-event-driven-payment-flow","title":"\ud83d\udcc8 Updated Mermaid Diagram: Event-Driven Payment Flow","text":"<p>```mermaid sequenceDiagram     participant User     participant API     participant Service     participant EventBus     participant PaymentProvider     participant Webhook     participant DepositPersistenceHandler     participant WithdrawPersistenceHandler     participant TransferPersistenceHandler     participant DB</p> <pre><code>User-&gt;&gt;API: POST /account/:id/deposit (or withdraw/transfer)\nAPI-&gt;&gt;Service: Deposit/Withdraw/Transfer(...)\nService-&gt;&gt;EventBus: Publish PaymentEvent (initiated)\nService-&gt;&gt;PaymentProvider: InitiateDeposit/Withdraw/Transfer(...)\nService-&gt;&gt;EventBus: Publish PaymentEvent (pending)\nPaymentProvider--&gt;&gt;Webhook: Payment completed/failed (webhook)\nWebhook-&gt;&gt;Service: Handle webhook\nService-&gt;&gt;EventBus: Publish PaymentEvent (completed/failed)\nService-&gt;&gt;DepositPersistenceHandler: Persist deposit events\nService-&gt;&gt;WithdrawPersistenceHandler: Persist withdraw events\nService-&gt;&gt;TransferPersistenceHandler: Persist transfer events\nDepositPersistenceHandler-&gt;&gt;DB: Update account, create transaction\nWithdrawPersistenceHandler-&gt;&gt;DB: Update account, create transaction\nTransferPersistenceHandler-&gt;&gt;DB: Update accounts, create transactions\nService-&gt;&gt;API: Success (transaction, conversion info)\n</code></pre> <p>```</p>"},{"location":"payments/event-driven-payments.html#mermaid-diagram-stripe-webhook-event-driven-flow","title":"\ud83d\uddbc\ufe0f Mermaid Diagram: Stripe Webhook Event-Driven Flow","text":"<p>```mermaid sequenceDiagram     participant Stripe as \"Stripe\"     participant WebhookHandler as \"StripeWebhookHandler (webapi/account/webhook.go)\"     participant EventBus as \"EventBus (pkg/eventbus)\"     participant PaymentEventHandler as \"PaymentEventHandler (domain/service layer)\"     participant AccountService as \"AccountService\"</p> <pre><code>Stripe-&gt;&gt;WebhookHandler: POST /webhook (Stripe event)\nWebhookHandler-&gt;&gt;EventBus: Publish PaymentReceivedEvent\nEventBus-&gt;&gt;PaymentEventHandler: Dispatch PaymentReceivedEvent\nPaymentEventHandler-&gt;&gt;AccountService: Update transaction, account, etc.\nPaymentEventHandler--&gt;&gt;EventBus: (optional) Publish further events\nPaymentEventHandler-&gt;&gt;WebhookHandler: Ack (HTTP 200)\n</code></pre> <p>```</p> <p>This document is a living guide. Update as the migration progresses and new requirements emerge.</p>"},{"location":"payments/event-driven-stripe-webhook.html","title":"\u26a1 Event-Driven Stripe Webhook Flow","text":"<p>Modular, event-driven payment confirmation for Stripe</p>"},{"location":"payments/event-driven-stripe-webhook.html#overview","title":"\ud83c\udfc1 Overview","text":"<p>This document describes the event-driven architecture for handling Stripe payment webhooks in the fintech project. The HTTP handler emits a domain event to the event bus, and all business logic is handled by event-driven subscribers. This approach improves modularity, testability, and extensibility.</p>"},{"location":"payments/event-driven-stripe-webhook.html#architecture-sequence","title":"\ud83c\udfd7\ufe0f Architecture &amp; Sequence","text":"<p>The Stripe webhook flow is fully event-driven:</p> <ul> <li>The HTTP handler receives the Stripe event and publishes a <code>PaymentProcessedEvent</code> to the event bus.</li> <li>Event handlers (subscribers) listen for this event and perform business logic (e.g., updating transaction status, crediting accounts).</li> <li>The event bus orchestrates the flow, decoupling HTTP and business logic.</li> </ul>"},{"location":"payments/event-driven-stripe-webhook.html#webhook-payload-examples","title":"\ud83d\udcdd Webhook Payload Examples","text":""},{"location":"payments/event-driven-stripe-webhook.html#1-generic-payment-webhook","title":"1. Generic Payment Webhook","text":""},{"location":"payments/event-driven-stripe-webhook.html#request","title":"Request","text":"<pre><code>POST /webhook/payment\nContent-Type: application/json\n\n{\n  \"payment_id\": \"pi_3NxabcXYZpqr123\",\n  \"status\": \"completed\"\n}\n</code></pre>"},{"location":"payments/event-driven-stripe-webhook.html#success-response","title":"Success Response","text":"<pre><code>HTTP/1.1 200 OK\nContent-Length: 0\n</code></pre>"},{"location":"payments/event-driven-stripe-webhook.html#error-response","title":"Error Response","text":"<pre><code>HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n  \"error\": \"Invalid payload\"\n}\n</code></pre>"},{"location":"payments/event-driven-stripe-webhook.html#2-stripe-webhook","title":"2. Stripe Webhook","text":""},{"location":"payments/event-driven-stripe-webhook.html#request_1","title":"Request","text":"<pre><code>POST /webhook/stripe\nContent-Type: application/json\nStripe-Signature: t=1234567890,v1=abc123...\n\n{\n  \"id\": \"evt_123456789\",\n  \"type\": \"payment_intent.succeeded\",\n  \"data\": {\n    \"object\": {\n      \"id\": \"pi_3NxabcXYZpqr123\",\n      \"amount\": 1000,\n      \"currency\": \"usd\",\n      \"status\": \"succeeded\"\n    }\n  }\n}\n</code></pre>"},{"location":"payments/event-driven-stripe-webhook.html#success-response_1","title":"Success Response","text":"<pre><code>HTTP/1.1 200 OK\nContent-Length: 0\n</code></pre>"},{"location":"payments/event-driven-stripe-webhook.html#error-response_1","title":"Error Response","text":"<pre><code>HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n  \"error\": \"Invalid Stripe event\"\n}\n</code></pre>"},{"location":"payments/event-driven-stripe-webhook.html#sequence-diagram","title":"\ud83d\uddbc\ufe0f Sequence Diagram","text":"<p>```mermaid sequenceDiagram     participant Stripe as \"Stripe\"     participant Webhook as \"Webhook Handler (/webhook/stripe)\"     participant EventBus as \"EventBus\"     participant PaymentHandler as \"PaymentProcessedHandler\"     participant DB as \"DB/Domain\"</p> <pre><code>Stripe--&gt;&gt;Webhook: Sends payment_intent.succeeded\nWebhook-&gt;&gt;EventBus: Publish PaymentProcessedEvent\nEventBus-&gt;&gt;PaymentHandler: Handle PaymentProcessedEvent\nPaymentHandler-&gt;&gt;DB: Update transaction status, business logic\nPaymentHandler-&gt;&gt;EventBus: (optional) Publish further events\n</code></pre> <p>```</p>"},{"location":"payments/event-driven-stripe-webhook.html#detailed-flow","title":"\ud83d\udd04 Detailed Flow","text":"<ol> <li>Stripe sends a webhook to <code>/webhook/stripe</code> (e.g., <code>payment_intent.succeeded</code>).</li> <li>Webhook handler parses the event and publishes a <code>PaymentProcessedEvent</code> to the event bus.</li> <li>EventBus dispatches the event to all registered subscribers.</li> <li>PaymentProcessedHandler (subscriber) updates the transaction status in the database and triggers any required business logic.</li> <li>Further events can be published for downstream processing (e.g., notifications).</li> </ol>"},{"location":"payments/event-driven-stripe-webhook.html#key-components","title":"\ud83e\udde9 Key Components","text":"<ul> <li>HTTP Handler: <code>webapi/account/webhook.go</code></li> <li>EventBus: <code>pkg/eventbus</code></li> <li>Payment Event Handlers: pkg/handler/payment/</li> <li>Domain Events: pkg/domain/events/</li> </ul>"},{"location":"payments/event-driven-stripe-webhook.html#error-handling","title":"\ud83d\udd12 Error Handling","text":"<p>Webhook handlers implement the following error handling:</p>"},{"location":"payments/event-driven-stripe-webhook.html#1-validation-errors-400-bad-request","title":"1. Validation Errors (400 Bad Request)","text":"<ul> <li>Missing or invalid required fields</li> <li>Malformed JSON payload</li> <li>Invalid status values</li> <li>Stripe signature verification failure</li> </ul>"},{"location":"payments/event-driven-stripe-webhook.html#2-business-logic-errors-500-internal-server-error","title":"2. Business Logic Errors (500 Internal Server Error)","text":"<ul> <li>Database operation failures</li> <li>Event bus publishing failures</li> <li>Unexpected errors during processing</li> </ul>"},{"location":"payments/event-driven-stripe-webhook.html#3-rate-limiting-429-too-many-requests","title":"3. Rate Limiting (429 Too Many Requests)","text":"<ul> <li>Implemented at the reverse proxy/API gateway level</li> <li>Protects against abuse and DoS attacks</li> </ul>"},{"location":"payments/event-driven-stripe-webhook.html#4-idempotency","title":"4. Idempotency","text":"<ul> <li>All webhook handlers are idempotent</li> <li>Duplicate events with the same ID are processed only once</li> <li>Implemented using transaction IDs and event deduplication</li> </ul>"},{"location":"payments/event-driven-stripe-webhook.html#testing","title":"\ud83e\uddea Testing","text":"<ul> <li>Unit tests: Use a mock event bus to verify the handler publishes the correct event (webapi/account/webhook_test.go).</li> <li>Integration tests: Register real event handlers and assert on database state and event flow.</li> <li>Fixtures/mocks: Use internal/fixtures/mocks/ for repository and UoW mocks.</li> </ul>"},{"location":"payments/event-driven-stripe-webhook.html#extending-the-flow","title":"\ud83d\udee0\ufe0f Extending the Flow","text":""},{"location":"payments/event-driven-stripe-webhook.html#adding-new-webhook-handlers","title":"Adding New Webhook Handlers","text":"<ol> <li>Create a new handler function in the appropriate package</li> <li>Register the handler with the router in <code>webapi/account/webhook.go</code></li> <li>Implement business logic in event handlers</li> </ol>"},{"location":"payments/event-driven-stripe-webhook.html#supporting-new-stripe-event-types","title":"Supporting New Stripe Event Types","text":"<ol> <li>Add a new case in the <code>StripeWebhookHandler</code></li> <li>Create a corresponding domain event if needed</li> <li>Update the event bus subscriptions</li> </ol>"},{"location":"payments/event-driven-stripe-webhook.html#example-adding-paypal-webhook","title":"Example: Adding PayPal Webhook","text":"<pre><code>// 1. Add new handler function\nfunc PayPalWebhookHandler(svc *service.AccountService) fiber.Handler {\n    return func(c *fiber.Ctx) error {\n        // Parse and validate PayPal webhook\n        // Emit appropriate domain events\n    }\n}\n\n// 2. Register in router\nrouter.Post(\"/webhook/paypal\", PayPalWebhookHandler(accountSvc))\n</code></pre>"},{"location":"payments/event-driven-stripe-webhook.html#best-practices","title":"Best Practices","text":"<ul> <li>Keep HTTP handlers thin</li> <li>Validate all inputs</li> <li>Log all important operations</li> <li>Implement proper error handling</li> <li>Use context for cancellation and timeouts</li> </ul>"},{"location":"payments/event-driven-stripe-webhook.html#references","title":"\ud83d\udcda References","text":"<ul> <li>Event-Driven Payments</li> <li>Stripe Integration</li> <li>EventBus Implementation</li> <li>Payment Handlers</li> <li>Webhook Handler Tests</li> </ul>"},{"location":"payments/pay-out-to-people.html","title":"Pay out to people","text":"<p>Add money to your Stripe balance and pay out to sellers or service providers.</p> <ul> <li>Stripe compatibility: Connect (Connect is Stripe's solution for multi-party businesses, such as marketplace or software platforms, to route payments between sellers, customers, and other recipients)</li> <li>Requires: Stripe account, configured Connect platform</li> <li>Good for: Marketplaces, platforms</li> <li>Pricing: Connect pricing</li> </ul> <p>Use this guide to learn how to add funds to your account balance and transfer the funds into your users\u2019 bank accounts, without processing payments through Stripe. This guide uses an example of a Q&amp;A product that pays its writers a portion of the advertising revenue that their answers generate. The platform and connected accounts are both in the US.</p> <p>For businesses using automatic payouts, funds added to the payments balance in excess of the minimum balance are paid out in the next payout. You can configure your payout schedule and minimum balance settings in your Payout settings.</p> <p>Only team members with administrator access to the platform Stripe account and two-factor authentication enabled can add funds.</p>"},{"location":"payments/pay-out-to-people.html#prerequisites","title":"Prerequisites","text":""},{"location":"payments/pay-out-to-people.html#prerequisites_1","title":"Prerequisites","text":"<ul> <li> <p> Register your platform</p> </li> <li> <p> Add business details to activate your account</p> </li> <li> <p> Complete your platform profile</p> </li> <li> <p> Customise brand settings Add a business name, icon, and brand colour.</p> </li> </ul>"},{"location":"payments/pay-out-to-people.html#create-a-connected-account","title":"Create a connected account","text":"<p>When a user (seller or service provider) signs up on your platform, create a user Account (referred to as a connected account) so you can accept payments and move funds to their bank account. Connected accounts represent your users in Stripe\u2019s API and facilitate the collection of information requirements so Stripe can verify the user\u2019s identity. For a Q&amp;A product that pays for answers, the connected account represents the writer.</p> <p>This guide uses Express accounts which have certain restrictions. You can evaluate Custom accounts as an alternative.</p>"},{"location":"payments/pay-out-to-people.html#customize-your-signup-form","title":"Customize your signup form","text":"<p>In your platform settings, customise your Express sign-up form by changing the colour and logos that users see when they click your Connect (Connect is Stripe's solution for multi-party businesses, such as marketplace or software platforms, to route payments between sellers, customers, and other recipients) link. </p> <p>Default Express signup form </p> <p>Branding settings</p>"},{"location":"payments/pay-out-to-people.html#create-a-connected-account-link","title":"Create a connected account link","text":"<p>You can create a connected account onboarding link by clicking +Create on the Connected accounts page, and selecting Express for the account type, along with the transfers capability. Click Continue to generate a link to share with the user you want to onboard. </p> <p>Create a connected account </p> <p>Create an onboarding link</p> <p>This link directs users to a form where they can provide information to connect to your platform. For example, if you have a Q&amp;A platform, you can provide a link for writers to connect with the platform. The link is only for the single connected account you created. After your user completes the onboarding flow, you can view them in your accounts list. </p>"},{"location":"payments/pay-out-to-people.html#add-funds-to-your-balance","title":"Add funds to your balance","text":"<p>To add funds, go to the Balance section in the Dashboard. Click Add to balance and select a balance to add to funds to.</p> <p>Select Payments balance to add funds that are paid out to your connected accounts. You can also use funds added to the payments balance to cover future refunds and disputes or to repay your platform\u2019s negative balance. To learn more about Refunds and disputes balance, see adding funds to your Stripe balance.</p>"},{"location":"payments/pay-out-to-people.html#verify-your-bank-account","title":"Verify your bank account","text":"<p>Go through the verification process in the Dashboard when you first attempt to add funds from an unverified bank account. If your bank account is unverified, you\u2019ll need to confirm two microdeposits from Stripe. These deposits appear in your online banking statement within 1-2 business days. You\u2019ll see <code>ACCTVERIFY</code> as the statement description.</p> <p>Stripe notifies you in the Dashboard and through email when the microdeposits have arrived in your account. To complete the verification process, click the Dashboard notification in the Balance section, enter the two microdeposit amounts, and click Verify account. </p>"},{"location":"payments/pay-out-to-people.html#add-funds","title":"Add funds","text":"<p>Once verified, use the Dashboard to add funds to your account balance.</p> <ol> <li>In the Dashboard, go to the Balance section.</li> <li>Click Add to balance, and then select Payments balance.</li> <li>Enter the amount to top-up.</li> <li>If applicable, select a payment method from the dropdown (bank debit, bank transfer, or wire transfer).</li> <li>For bank debits, verify the amount and click Add funds. For bank transfers, use the Stripe banking information to initiate a bank transfer or wire transfer from your bank.</li> <li>The resulting object is called a top-up, which you can view in the Dashboard\u2019s Top-ups section. For bank transfers, the top-up isn\u2019t created until the funds are received.</li> </ol>"},{"location":"payments/pay-out-to-people.html#view-funds","title":"View funds","text":"<p>View your funds in the Top-ups tab under the Balance page. Each time you add funds we create a <code>top-up</code> object with a unique ID with the following format: tu_XXXXXX. You can see this in the top-up\u2019s detailed view.</p>"},{"location":"payments/pay-out-to-people.html#settlement-timing","title":"Settlement timing","text":"<p>US platforms add funds through ACH debit and can take 5-6 business days to become available in your Stripe balance. You can request a review of your account for faster settlement timing by contacting Stripe Support.</p> <p>As we learn more about your account, Stripe might be able to decrease your settlement timing automatically.</p> <p>Adding funds for future refunds and disputes or to repay a negative balance can happen through bank or electronic transfers and are available in 1-2 business days.</p>"},{"location":"payments/pay-out-to-people.html#pay-out-to-your-user","title":"Pay out to your user","text":"<p>After your user completes the onboarding process and you\u2019ve added funds to your balance, you can transfer some of your balance to your connected accounts. In this example, money is transferred from the Q&amp;A platform\u2019s balance to the individual writer.</p> <p>To pay your user, go to the Balance section of an account\u2019s details page and click Add funds. By default, any funds you transfer to a connected account accumulate in the connected account\u2019s Stripe balance and are paid out on a daily rolling basis. You can change the payout frequency by clicking the right-most button in the Balance section and selecting Edit payout schedule. </p> <p>Send funds to user </p> <p>Edit payout schedule</p>"},{"location":"payments/pay-out-to-people.html#see-also","title":"See also","text":"<ul> <li>Managing connected accounts in the Dashboard</li> </ul>"},{"location":"payments/stripe-integration.html","title":"Stripe Integration &amp; Multi-Currency Deposit Refactor","text":""},{"location":"payments/stripe-integration.html#overview","title":"\ud83c\udfc1 Overview","text":"<p>We integrated Stripe as a payment provider for deposits, refactored our multi-currency deposit flow, and improved our exchange rate caching logic. This ensures robust, auditable, and correct handling of all deposit scenarios, including cross-currency and zero-decimal currencies.</p>"},{"location":"payments/stripe-integration.html#what-we-did","title":"\ud83d\udee0\ufe0f What We Did","text":""},{"location":"payments/stripe-integration.html#stripe-payment-provider-integration","title":"\ud83c\udfe6 Stripe Payment Provider Integration","text":"<ul> <li>\ud83d\ude80 Implemented a <code>PaymentProvider</code> interface and a concrete Stripe implementation using the official stripe-go SDK.</li> <li>\ud83d\udd04 Migrated to the new <code>stripe.Client</code> pattern for future-proofing and better testability.</li> <li>\ud83e\udde9 Injected the payment provider into the handler chain for clean separation of concerns.</li> </ul>"},{"location":"payments/stripe-integration.html#deposit-flow-refactor","title":"\ud83d\udd17 Deposit Flow Refactor","text":"<ul> <li>\ud83c\udfd7\ufe0f The service layer now only emits a deposit event; all business logic is handled in the handler chain.</li> <li>\u2795 Added a <code>PaymentProviderHandler</code> to the chain, which:</li> <li>\ud83d\udcb3 Initiates payments with Stripe.</li> <li>\ud83c\udd94 Handles payment IDs and errors.</li> <li>\ud83d\udcb1 Ensured currency conversion is always performed before crediting the account, using up-to-date exchange rates.</li> </ul>"},{"location":"payments/stripe-integration.html#multi-currency-zero-decimal-currency-handling","title":"\ud83d\udcb1 Multi-Currency &amp; Zero-Decimal Currency Handling","text":"<ul> <li>\ud83d\udc1e Fixed a critical bug: previously, JPY deposits were multiplied by 100, resulting in 100x overcharging on Stripe.</li> <li>\ud83e\uddee Now, the amount sent to Stripe is calculated using currency metadata (e.g., decimals for USD vs. JPY).</li> <li>\ud83d\udcca All deposit and conversion logic is fully auditable and testable.</li> </ul>"},{"location":"payments/stripe-integration.html#exchange-rate-cache-logic","title":"\ud83d\uddc3\ufe0f Exchange Rate Cache Logic","text":"<ul> <li>\ud83d\udd04 Refactored cache lookup to always check both direct and reverse currency pairs, with consistent TTL/freshness logic.</li> <li>\ud83e\uddf9 Removed backend-specific logic for more predictable and maintainable caching.</li> </ul>"},{"location":"payments/stripe-integration.html#problems-we-faced-solutions","title":"\ud83d\udc1e Problems We Faced &amp; Solutions","text":""},{"location":"payments/stripe-integration.html#currency-conversion-mismatches","title":"\ud83d\udcb1 Currency Conversion Mismatches","text":"<ul> <li>\u274c Problem: Deposits in a currency different from the account\u2019s currency were not being converted, leading to accounting errors.</li> <li>\u2705 Solution: Enforced conversion in the handler chain, always crediting the account in its own currency.</li> </ul>"},{"location":"payments/stripe-integration.html#stripe-amount-calculation-for-zero-decimal-currencies","title":"\ud83d\udcb8 Stripe Amount Calculation for Zero-Decimal Currencies","text":"<ul> <li>\u274c Problem: JPY and other zero-decimal currencies were incorrectly multiplied by 100, causing 100x overcharging.</li> <li>\u2705 Solution: Used currency metadata to determine the correct multiplier for Stripe\u2019s smallest unit.</li> </ul>"},{"location":"payments/stripe-integration.html#inconsistent-exchange-rate-caching","title":"\ud83d\uddc3\ufe0f Inconsistent Exchange Rate Caching","text":"<ul> <li>\u274c Problem: Cache logic was inconsistent, sometimes missing valid rates or using stale data.</li> <li>\u2705 Solution: Unified cache lookup logic for both direct and reverse pairs, backend-agnostic.</li> </ul>"},{"location":"payments/stripe-integration.html#clean-architecture-testability","title":"\ud83e\udde9 Clean Architecture &amp; Testability","text":"<ul> <li>\u274c Problem: Payment provider logic was mixed into the service layer, making it hard to test and extend.</li> <li>\u2705 Solution: Moved all provider logic into a dedicated handler in the chain, improving modularity and testability.</li> </ul>"},{"location":"payments/stripe-integration.html#next-steps","title":"\ud83d\udd2e Next Steps","text":"<ul> <li>\ud83d\udd14 Integrate and test Stripe sandbox webhooks for real-time payment status updates.</li> <li>\ud83d\udcda Document webhook event handling and reconciliation logic.</li> <li>\ud83e\uddea Continue to add tests and monitoring for all payment and currency flows.</li> </ul>"},{"location":"payments/stripe-integration.html#references","title":"\ud83d\udcda References","text":"<ul> <li>stripe-go SDK</li> <li>Stripe API Docs</li> <li>Project code: <code>infra/provider/stripe_payment_provider.go</code>, <code>pkg/handler/</code>, <code>pkg/service/account/</code>, <code>infra/provider/exchange_rates.go</code></li> </ul>"},{"location":"payments/testing-stripe-connect.html","title":"Testing Stripe Connect","text":"<p>Before going live, test your Connect integration for account creation, identity verification, and payouts.</p> <p>Use testing to make sure your Connect (Connect is Stripe's solution for multi-party businesses, such as marketplace or software platforms, to route payments between sellers, customers, and other recipients) integration handles different flows correctly. You can use Sandboxes to simulate live mode while taking advantage of Stripe-provided special tokens to use in your tests. See the payments testing guide for more information on testing charges, disputes, and so on.</p>"},{"location":"payments/testing-stripe-connect.html#testing-capabilities","title":"Testing capabilities","text":"<p>Sandboxes and test mode might not enforce some capabilities. In certain cases, they can allow an account to perform capability-dependent actions even when the associated capability\u2019s <code>status</code> isn\u2019t <code>active</code>.</p>"},{"location":"payments/testing-stripe-connect.html#create-test-accounts","title":"Create test accounts","text":"<p>You can create multiple test accounts with different account types or controller properties that you want to test.</p> <p>You can create test accounts using the Accounts API or in the Stripe Dashboard.</p> <p>Use <code>000-000</code> as the SMS code when prompted for test accounts.</p>"},{"location":"payments/testing-stripe-connect.html#test-the-oauth-flow","title":"Test the OAuth flow","text":"<p>You can test your OAuth integration with connected accounts that use a Stripe-hosted Dashboard using your test <code>client_id</code>.</p> <p>Your test <code>client_id</code> is <code>ca_FkyHCg7X8mlvCUdMDao4mMxagUfhIwXb</code>. You can find this in your Connect OAuth settings.</p> <p>Your test <code>client_id</code> allows you to:</p> <ul> <li>Set your <code>redirect_uri</code> to a non-HTTPS URL</li> <li>Set your <code>redirect_uri</code> to localhost</li> <li>Force-skip the account form instead of having to fill in an entire account application (Stripe Dashboard accounts only)</li> <li>Get test access tokens for connected accounts</li> </ul> <p>To test the OAuth flow, create a new account after clicking the OAuth link. You can also test connecting an existing Stripe account only if the email address is different from your platform account.</p>"},{"location":"payments/testing-stripe-connect.html#identity-verification","title":"Identity verification","text":"<p>Verification is a crucial component for onboarding accounts. Use our dedicated guide to testing verification.</p> <p>After creating a test connected account, you can use tokens to test different verification statuses to make sure you\u2019re handling different requirements and account states. You can use the following tokens to test verification with test accounts.</p>"},{"location":"payments/testing-stripe-connect.html#test-dates-of-birth","title":"Test dates of birth","text":"<p>Use these dates of birth (DOB) to trigger certain verification conditions.</p> DOB Type <code>1901-01-01</code> Successful date of birth match. Any other DOB results in a no-match. <code>1902-01-01</code> Successful, immediate date of birth match. The verification result is returned directly in the response, not as part of a webhook (A webhook is a real-time push notification sent to your application as a JSON payload through HTTPS requests) event. <code>1900-01-01</code> This DOB triggers an Office of Foreign Assets Control (OFAC) alert."},{"location":"payments/testing-stripe-connect.html#test-addresses","title":"Test addresses","text":"<p>Use these addresses for <code>line1</code> to trigger certain verification conditions. You must pass in legitimate values for the <code>city</code>, <code>state</code>, and <code>postal_code</code> arguments.</p> Token Type <code>address_full_match</code>\u200b Successful address match. <code>address_full_match_sync</code>\u200b Successful, immediate address match. <code>address_no_match</code> Unsuccessful address match likely to trigger requirements in <code>currently_due</code>. <code>address_line1_no_match</code> Unsuccessful address match likely to trigger requirements in <code>currently_due</code>"},{"location":"payments/testing-stripe-connect.html#test-personal-id-numbers","title":"Test personal ID numbers","text":"<p>Use these personal ID numbers for the individual.id_number attribute on the <code>Account</code> or the id_number attribute on the <code>Person</code> object to trigger certain verification conditions.</p> Number Type <code>000000000</code> Successful ID number match. 0000 also works for SSN last 4 verification. <code>111111111</code> Unsuccessful ID number match (identity mismatch) likely to trigger requirements in <code>currently_due</code>. <code>222222222</code> Successful, immediate ID number match. The verification result is returned directly in the response, not as part of a webhook (A webhook is a real-time push notification sent to your application as a JSON payload through HTTPS requests) event."},{"location":"payments/testing-stripe-connect.html#test-identity-documents","title":"Test identity documents","text":"<p>For testing, use test images or file tokens instead of uploading your own test IDs. For details, refer to Uploading a file.</p>"},{"location":"payments/testing-stripe-connect.html#test-document-images","title":"Test document images","text":"<p>You can use a verified image that causes the ID number to match successfully. You can use an unverified image that causes a mismatch on the ID number, leading to <code>currently_due</code> requirements.</p> <p>Test images take precedence over test ID numbers. If you upload a verified image, the ID number matching succeeds, even if you also provide an unsuccessful test ID value. Similarly, an unverified image automatically fails ID matching regardless of the value of other test artefacts.</p>"},{"location":"payments/testing-stripe-connect.html#test-file-tokens","title":"Test file tokens","text":"<p>Use these file tokens to trigger certain identity verification conditions.</p> Token Type <code>file_identity_document_success</code> Uses the verified image and marks that document requirement as satisfied. <code>file_identity_document_failure</code> Uses the unverified image and marks that document requirement as not satisfied."},{"location":"payments/testing-stripe-connect.html#business-information-verification","title":"Business information verification","text":""},{"location":"payments/testing-stripe-connect.html#business-address-validation","title":"Business address validation","text":"<p>In some countries, the business address associated with your connected account must be validated before charges, payouts (A payout is the transfer of funds to an external account, usually a bank account, in the form of a deposit), or both can be enabled on the connected account.</p>"},{"location":"payments/testing-stripe-connect.html#test-business-addresses","title":"Test business addresses","text":"<p>Use these addresses for <code>line1</code> to trigger certain validation conditions. You must pass in legitimate values for the <code>city</code>, <code>state</code>, and <code>postal_code</code> arguments.</p> <p>Make sure you start with an address token that has the least permissive validation condition you want to test for. This is because you can\u2019t use an address token that has a more restrictive validation condition than the previous token used. For example, if you provided <code>address_full_match</code> to have both charges and payouts enabled, you can\u2019t disable payouts or charges afterward by changing the token to an invalid one. You can work around this by creating a new account with the relevant token.</p> Token Type <code>address_full_match</code>\u200b Both charges and payouts are enabled on the account. <code>address_no_match</code>\u200b Only charges are enabled on the account. Since validation failed on the <code>line1</code> attribute, it becomes listed again in the requirements hash. <code>address_line1_no_match</code> Neither charges nor payouts are enabled on the account. Since validation failed, the address attributes become listed again in the requirements hash."},{"location":"payments/testing-stripe-connect.html#test-business-tax-ids","title":"Test business tax IDs","text":"<p>Use these business tax ID numbers for company.tax_id to trigger certain verification conditions. The test behaviour might change depending on the Connected Account countries and the regulations in those countries. Depending on the country\u2019s regulation, a valid tax document can mark tax ID verified in these countries.</p> Number Type <code>000000000</code> Successful business ID number match. <code>000000001</code> Successful business ID number match as a non-profit. <code>111111111</code> Unsuccessful business ID number match (identity mismatch). <code>111111112</code> Unsuccessful business ID number match (tax ID not issued). <code>222222222</code> Successful, immediate business ID number match. The verification result is returned directly in the response, not as part of a webhook (A webhook is a real-time push notification sent to your application as a JSON payload through HTTPS requests) event."},{"location":"payments/testing-stripe-connect.html#test-directorship-verification","title":"Test directorship verification","text":"<p>Stripe performs directorship verification by comparing the list of directors on the <code>Account</code> object against a list retrieved from local registries. If the country requires it, you can trigger verification for an <code>Account</code> object by using these tokens for the first_name attribute on the associated <code>Person</code> and setting the relationship.director attribute on the <code>Person</code> to true.</p> Token Type <code>mismatch_director</code> Unsuccessful match due to a mismatched name. This can trigger a <code>verification_directors_mismatch</code> verification error. <code>missing_director</code> Unsuccessful match due to directors missing on the account. This can trigger a <code>verification_missing_directors</code> verification error. <code>extraneous_director</code> Unsuccessful match due to too many directors on the account. This can trigger a <code>verification_extraneous_directors</code> verification error. <p>The verification errors can trigger if multiple directors on the <code>Account</code> object use these magic tokens.</p>"},{"location":"payments/testing-stripe-connect.html#test-company-name-verification","title":"Test company name verification","text":"<p>Trigger company name verification for an <code>Account</code> object by using this token for the company.name attribute.</p> Token Type <code>mismatch_business_name</code> Unsuccessful match due to a mismatched business name. <code>disallowed_name</code> Unsuccessful match due to a generic or well-known business name. <code>match_name_relationships</code> Successful match of the business name. <code>match_name_only</code> Unsuccessful match due to a business name discrepancy."},{"location":"payments/testing-stripe-connect.html#test-statement-descriptor-verification","title":"Test statement descriptor verification","text":"<p>Trigger statement descriptor verification for an <code>Account</code> object by using this token for the settings.payments.statement_descriptor attribute.</p> Token Type <code>mismatch</code> Trigger an <code>invalid_statement_descriptor_business_mismatch</code> verification error. <code>disallowed</code> Trigger an <code>invalid_statement_descriptor_denylisted</code> verification error. <p>Trigger statement descriptor prefix verification for an <code>Account</code> object by using this token for the settings.card_payments.statement_descriptor_prefix attribute.</p> Token Type <code>mismatch</code> Trigger an <code>invalid_statement_descriptor_prefix_mismatch</code> verification error. <code>disallowed</code> Trigger an <code>invalid_statement_descriptor_prefix_denylisted</code> verification error."},{"location":"payments/testing-stripe-connect.html#test-business-url-verification","title":"Test business URL verification","text":"<p>Trigger URL verification for an <code>Account</code> object by using this token for the business_profile.url attribute.</p> Token Type <code>https://disallowed.stripe.com</code> Trigger an <code>invalid_url_denylisted</code> verification error. <code>https://geoblocked.stripe.com</code> Trigger an <code>invalid_url_website_inaccessible_geoblocked</code> verification error. <code>https://problem.stripe.com</code> Trigger an <code>invalid_url_website_other</code> verification error. <code>https://missing.stripe.com</code> Trigger an <code>invalid_url_website_incomplete</code> verification error. <code>https://mismatch.stripe.com</code> Trigger an <code>invalid_url_website_business_information_mismatch</code> verification error. <code>https://passwordprotected.stripe.com</code> Trigger an <code>invalid_url_website_inaccessible_password_protected</code> verification error. <code>https://accessible.stripe.com</code> Trigger a successful validation of the URL. <code>https://underconstruction.stripe.com</code> Trigger an <code>invalid_url_website_incomplete_under_construction</code> verification error. <code>https://inaccessible.stripe.com</code> Trigger an <code>invalid_url_website_inaccessible</code> verification error."},{"location":"payments/testing-stripe-connect.html#test-capability-disabled-reasons","title":"Test capability disabled reasons","text":"<p>Trigger assignment of a specific requirements.disabled_reason to all of an <code>Account</code> object\u2019s inactive <code>Capability</code> objects by using this token for the account\u2019s business_profile.url attribute.</p> Token Type <code>https://inactivity.stripe.com</code> Set an account as inactive and pause all verifications for it. Set the disabled reason for any inactive capabilities to <code>paused.inactivity</code> (<code>rejected.other</code> for API versions prior to <code>2024-06-20</code>)."},{"location":"payments/testing-stripe-connect.html#test-doing-business-as-dba-verification","title":"Test Doing Business As (DBA) verification","text":"<p>Trigger DBA verification for an <code>Account</code> object by using this token for the business_profile.name attribute.</p> Token Type <code>disallowed_dba</code> Trigger an <code>invalid_business_profile_name_denylisted</code> verification error. <code>invalid_dba</code> Trigger an <code>invalid_business_profile_name</code> verification error."},{"location":"payments/testing-stripe-connect.html#test-product-description-verification","title":"Test product description verification","text":"<p>Trigger product description verification for an <code>Account</code> object by using this token for the business_profile.product_description attribute.</p> Token Type <code>require_url</code> Trigger an <code>invalid_url_web_presence_detected</code> verification error."},{"location":"payments/testing-stripe-connect.html#test-phone-number-validation","title":"Test phone number validation","text":"<p>Clear phone number validation for an <code>Account</code> object by using this token for the following attributes:</p> <ul> <li>business_profile.support_phone</li> <li>company.phone</li> <li>individual.phone</li> </ul> <p>Clear phone number validation for a <code>Person</code> object by using this token for the phone attribute.</p> Token Type <code>0000000000</code> Successful validation"},{"location":"payments/testing-stripe-connect.html#trigger-or-advance-verification","title":"Trigger or advance verification","text":""},{"location":"payments/testing-stripe-connect.html#trigger-cards","title":"Trigger cards","text":"<p>Use these card numbers to trigger various conditions when you\u2019re testing both requirements and tiered verification. For the trigger actions to work, you must use these cards with a Connect charge by setting on_behalf_of, or creating the charge directly on the connected account.</p> Number Token Type 4000000000004202 <code>tok_visa_triggerNextRequirements</code> Changes the next set of eventually due requirements to currently due. 4000000000004210 <code>tok_visa_triggerChargeBlock</code> Triggers a charge block. 4000000000004236 <code>tok_visa_triggerPayoutBlock</code> Triggers a payout block."},{"location":"payments/testing-stripe-connect.html#trigger-next-requirements","title":"Trigger next requirements","text":"<p>Live mode can require additional verification information when a connected account processes a certain amount of volume. This card sets any additional verification information to be required immediately. If no additional information is required, nothing appears.</p>"},{"location":"payments/testing-stripe-connect.html#trigger-a-charge-or-payout-block","title":"Trigger a charge or payout block","text":"<p>If required information isn\u2019t provided by the deadline, Stripe disables the connected account\u2019s charges or payouts. These cards disable the connected account and move any currently due requirements to overdue. These cards have no effect until an account provides the initial information that\u2019s required to enable charges and payouts.</p>"},{"location":"payments/testing-stripe-connect.html#trigger-bank-account-ownership-verification","title":"Trigger bank account ownership verification","text":"<p>Connected accounts in the United States and India are subject to Bank account ownership verification. You can complete this verification by uploading supporting documents with the Connect Dashboard or with the API through the documents[bank_account_ownership_verification] hash.</p> <p>While you\u2019re testing, you can simulate the US bank account ownership verification process. Use the following test bank account numbers to trigger the verification process. One number presumes successful verification and the other prompts you to upload test images or file tokens to complete the verification process. These test accounts are only available for US accounts.</p> Routing Account Type <code>110000000</code> <code>000999999991</code> Triggers and completes the bank account ownership verification process after a short delay <code>110000000</code> <code>000999999992</code> Triggers the bank account ownership verification process after a short delay and requests for document upload"},{"location":"payments/testing-stripe-connect.html#add-funds-to-stripe-balance","title":"Add funds to Stripe balance","text":"<p>To test adding funds to your Stripe balance from a bank account in the Dashboard, create a sandbox and select the desired test bank account in the dropdown menu within the Add to balance window. You can simulate success or failure due to insufficient funds.</p> <p>To test adding funds in the API, use the following test bank tokens as the source while you\u2019re testing. Each token simulates a specific kind of event.</p> Token Type <code>btok_us_verified</code> Successful <code>btok_us_verified_noAccount</code> Unsuccessful with a <code>no_account</code> code <code>btok_us_verified_accountClosed</code> Unsuccessful with an <code>account_closed</code> code <code>btok_us_verified_insufficientFunds</code> Unsuccessful with an <code>insufficient_funds</code> code <code>btok_us_verified_debitNotAuthorized</code> Unsuccessful with a <code>debit_not_authorized</code> code <code>btok_us_verified_invalidCurrency</code> Unsuccessful with an <code>invalid_currency</code> code"},{"location":"payments/testing-stripe-connect.html#payouts","title":"Payouts","text":"<p>Use the following test bank and debit card numbers to trigger certain events during payout testing. You can only use these values while testing with test secret keys.</p> <p>Test payouts simulate a live payout but aren\u2019t processed with the bank. Test accounts with Stripe Dashboard access always have payouts enabled, as long as valid external bank information and other relevant conditions are met, and never requires real identity verification.</p> <p>You can\u2019t use test bank and debit card numbers in the Stripe Dashboard on a live mode connected account. If you\u2019ve entered your bank account information on a live mode account, you can still use a sandbox, and test payouts will simulate a live payout without processing actual money.</p>"},{"location":"payments/testing-stripe-connect.html#bank-numbers","title":"Bank numbers","text":"<p>Use these test bank account numbers to test payouts. You can only use them with test secret keys.</p>"},{"location":"payments/testing-stripe-connect.html#debit-card-numbers","title":"Debit card numbers","text":"<p>Use these test debit card numbers to test payouts to a debit card. These can only be used with test secret keys.</p>"},{"location":"payments/testing-stripe-connect.html#united-states","title":"United States","text":"Number Token Type 4000056655665556 <code>tok_visa_debit_us_transferSuccess</code> Visa debit. Payout succeeds. 4000056655665572 <code>tok_visa_debit_us_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000056755665555 <code>tok_visa_debit_us_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5200828282828210 <code>tok_mastercard_debit_us_transferSuccess</code> Mastercard debit. Payout succeeds. 6011981111111113 <code>tok_discover_debit_us_transferSuccess</code> Discover debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#canada","title":"Canada","text":"Number Token Type 4000051240000005 <code>tok_visa_debit_ca_transferSuccess</code> Visa debit. Payout succeeds. 4000051240000021 <code>tok_visa_debit_ca_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000051240000039 <code>tok_visa_debit_ca_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5510121240000006 <code>tok_mastercard_debit_ca_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#singapore","title":"Singapore","text":"Number Token Type 4000057020000008 <code>tok_visa_debit_sg_transferSuccess</code> Visa debit. Payout succeeds. 4000057020000016 <code>tok_visa_debit_sg_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000057020000024 <code>tok_visa_debit_sg_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 2227200000000009 <code>tok_mastercard_debit_sg_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#australia","title":"Australia","text":"Number Token Type 4000050360000019 <code>tok_visa_debit_au_transferSuccess</code> Visa debit. Payout succeeds. 4000050360000027 <code>tok_visa_debit_au_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000050360000035 <code>tok_visa_debit_au_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 4000000360000006 <code>tok_visa_credit_au</code> Visa credit. Card Not Supported (invalid card type). 5555050360000023 <code>tok_mastercard_debit_au_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#united-kingdom","title":"United Kingdom","text":"Number Token Type 4000058260000203 <code>tok_visa_debit_gb_transferSuccess</code> Visa debit. Payout succeeds. 4000058260000211 <code>tok_visa_debit_gb_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000058260000229 <code>tok_visa_debit_gb_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555058260000100 <code>tok_mastercard_debit_gb_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#austria","title":"Austria","text":"Number Token Type 4000050400000003 <code>tok_visa_debit_at_transferSuccess</code> Visa debit. Payout succeeds. 4000050400000011 <code>tok_visa_debit_at_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000050400000029 <code>tok_visa_debit_at_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555050400000009 <code>tok_mastercard_debit_at_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#belgium","title":"Belgium","text":"Number Token Type 4000050560000009 <code>tok_visa_debit_be_transferSuccess</code> Visa debit. Payout succeeds. 4000050560000017 <code>tok_visa_debit_be_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000050560000025 <code>tok_visa_debit_be_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555050560000005 <code>tok_mastercard_debit_be_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#croatia","title":"Croatia","text":"Number Token Type 4000051910000004 <code>tok_visa_debit_hr_transferSuccess</code> Visa debit. Payout succeeds. 4000051910000012 <code>tok_visa_debit_hr_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000051910000020 <code>tok_visa_debit_hr_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555051910000000 <code>tok_mastercard_debit_hr_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#cyprus","title":"Cyprus","text":"Number Token Type 4000051960000003 <code>tok_visa_debit_cy_transferSuccess</code> Visa debit. Payout succeeds. 4000051960000011 <code>tok_visa_debit_cy_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000051960000029 <code>tok_visa_debit_cy_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555051960000009 <code>tok_mastercard_debit_cy_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#estonia","title":"Estonia","text":"Number Token Type 4000052330000004 <code>tok_visa_debit_ee_transferSuccess</code> Visa debit. Payout succeeds. 4000052330000012 <code>tok_visa_debit_ee_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000052330000020 <code>tok_visa_debit_ee_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555052330000000 <code>tok_mastercard_debit_ee_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#finland","title":"Finland","text":"Number Token Type 4000052460000006 <code>tok_visa_debit_fi_transferSuccess</code> Visa debit. Payout succeeds. 4000052460000014 <code>tok_visa_debit_fi_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000052460000022 <code>tok_visa_debit_fi_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555052460000002 <code>tok_mastercard_debit_fi_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#france","title":"France","text":"Number Token Type 4000052500000008 <code>tok_visa_debit_fr_transferSuccess</code> Visa debit. Payout succeeds. 4000052500000016 <code>tok_visa_debit_fr_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000052500000024 <code>tok_visa_debit_fr_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555052500000004 <code>tok_mastercard_debit_fr_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#germany","title":"Germany","text":"Number Token Type 4000052760000037 <code>tok_visa_debit_de_transferSuccess</code> Visa debit. Payout succeeds. 4000052760000011 <code>tok_visa_debit_de_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000052760000029 <code>tok_visa_debit_de_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555052760000009 <code>tok_mastercard_debit_de_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#greece","title":"Greece","text":"Number Token Type 4000053000000001 <code>tok_visa_debit_gr_transferSuccess</code> Visa debit. Payout succeeds. 4000053000000019 <code>tok_visa_debit_gr_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000053000000027 <code>tok_visa_debit_gr_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555053000000007 <code>tok_mastercard_debit_gr_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#ireland","title":"Ireland","text":"Number Token Type 4000053720000000 <code>tok_visa_debit_ie_transferSuccess</code> Visa debit. Payout succeeds. 4000053720000018 <code>tok_visa_debit_ie_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000053720000026 <code>tok_visa_debit_ie_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555053720000006 <code>tok_mastercard_debit_ie_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#italy","title":"Italy","text":"Number Token Type 4000053800000037 <code>tok_visa_debit_it_transferSuccess</code> Visa debit. Payout succeeds. 4000053800000011 <code>tok_visa_debit_it_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000053800000029 <code>tok_visa_debit_it_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555053800000009 <code>tok_mastercard_debit_it_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#latvia","title":"Latvia","text":"Number Token Type 4000054280000000 <code>tok_visa_debit_lv_transferSuccess</code> Visa debit. Payout succeeds. 4000054280000018 <code>tok_visa_debit_lv_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000054280000026 <code>tok_visa_debit_lv_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555054280000006 <code>tok_mastercard_debit_lv_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#lithuania","title":"Lithuania","text":"Number Token Type 4000054400000005 <code>tok_visa_debit_lt_transferSuccess</code> Visa debit. Payout succeeds. 4000054400000013 <code>tok_visa_debit_lt_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000054400000021 <code>tok_visa_debit_lt_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555054400000001 <code>tok_mastercard_debit_lt_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#luxembourg","title":"Luxembourg","text":"Number Token Type 4000054420000001 <code>tok_visa_debit_lu_transferSuccess</code> Visa debit. Payout succeeds. 4000054420000019 <code>tok_visa_debit_lu_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000054420000027 <code>tok_visa_debit_lu_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555054420000007 <code>tok_mastercard_debit_lu_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#malta","title":"Malta","text":"Number Token Type 4000054700000002 <code>tok_visa_debit_mt_transferSuccess</code> Visa debit. Payout succeeds. 4000054700000010 <code>tok_visa_debit_mt_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000054700000028 <code>tok_visa_debit_mt_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555054700000008 <code>tok_mastercard_debit_mt_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#netherlands","title":"Netherlands","text":"Number Token Type 4000055280000007 <code>tok_visa_debit_nl_transferSuccess</code> Visa debit. Payout succeeds. 4000055280000015 <code>tok_visa_debit_nl_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000055280000023 <code>tok_visa_debit_nl_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555055280000003 <code>tok_mastercard_debit_nl_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#portugal","title":"Portugal","text":"Number Token Type 4000056200000002 <code>tok_visa_debit_pt_transferSuccess</code> Visa debit. Payout succeeds. 4000056200000010 <code>tok_visa_debit_pt_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000056200000028 <code>tok_visa_debit_pt_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555056200000008 <code>tok_mastercard_debit_pt_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#slovakia","title":"Slovakia","text":"Number Token Type 4000057030000006 <code>tok_visa_debit_sk_transferSuccess</code> Visa debit. Payout succeeds. 4000057030000014 <code>tok_visa_debit_sk_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000057030000022 <code>tok_visa_debit_sk_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555057030000002 <code>tok_mastercard_debit_sk_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#slovenia","title":"Slovenia","text":"Number Token Type 4000057050000001 <code>tok_visa_debit_si_transferSuccess</code> Visa debit. Payout succeeds. 4000057050000019 <code>tok_visa_debit_si_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000057050000027 <code>tok_visa_debit_si_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555057050000007 <code>tok_mastercard_debit_si_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#spain","title":"Spain","text":"Number Token Type 4000057240000036 <code>tok_visa_debit_es_transferSuccess</code> Visa debit. Payout succeeds. 4000057240000010 <code>tok_visa_debit_es_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000057240000028 <code>tok_visa_debit_es_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555057240000008 <code>tok_mastercard_debit_es_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#denmark","title":"Denmark","text":"Number Token Type 4000052080000006 <code>tok_visa_debit_dk_transferSuccess</code> Visa debit. Payout succeeds. 4000052080000014 <code>tok_visa_debit_dk_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000052080000022 <code>tok_visa_debit_dk_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555052080000002 <code>tok_mastercard_debit_dk_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#malaysia","title":"Malaysia","text":"Number Token Type 4000054580000031 <code>tok_visa_debit_my_transferSuccess</code> Visa debit. Payout succeeds. 4000054580000015 <code>tok_visa_debit_my_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000054580000023 <code>tok_visa_debit_my_instantPayoutUnsupported</code> Visa debit. Card is not eligible for Instant Payouts. 5555054580000003 <code>tok_mastercard_debit_my_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#new-zealand","title":"New Zealand","text":"Number Token Type 4000055540000003 <code>tok_visa_debit_nz_transferSuccess</code> Visa debit. Payout succeeds. 4000055540000011 <code>tok_visa_debit_nz_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000055540000029 <code>tok_visa_debit_nz_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555055540000165 <code>tok_mastercard_debit_nz_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#norway","title":"Norway","text":"Number Token Type 4000055780000002 <code>tok_visa_debit_no_transferSuccess</code> Visa debit. Payout succeeds. 4000055780000010 <code>tok_visa_debit_no_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000055780000028 <code>tok_visa_debit_no_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555055780000008 <code>tok_mastercard_debit_no_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#sweden","title":"Sweden","text":"Number Token Type 4000057520000003 <code>tok_visa_debit_se_transferSuccess</code> Visa debit. Payout succeeds. 4000057520000011 <code>tok_visa_debit_se_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000057520000029 <code>tok_visa_debit_se_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555057520000009 <code>tok_mastercard_debit_se_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#czechia","title":"Czechia","text":"Number Token Type 4000052030000007 <code>tok_visa_debit_cz_transferSuccess</code> Visa debit. Payout succeeds. 4000052030000015 <code>tok_visa_debit_cz_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000052030000023 <code>tok_visa_debit_cz_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555052030000003 <code>tok_mastercard_debit_cz_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#hungary","title":"Hungary","text":"Number Token Type 4000053480000000 <code>tok_visa_debit_hu_transferSuccess</code> Visa debit. Payout succeeds. 4000053480000018 <code>tok_visa_debit_hu_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000053480000026 <code>tok_visa_debit_hu_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555053480000006 <code>tok_mastercard_debit_hu_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#poland","title":"Poland","text":"Number Token Type 4000056160000000 <code>tok_visa_debit_pl_transferSuccess</code> Visa debit. Payout succeeds. 4000056160000018 <code>tok_visa_debit_pl_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000056160000026 <code>tok_visa_debit_pl_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555056160000006 <code>tok_mastercard_debit_pl_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"payments/testing-stripe-connect.html#romania","title":"Romania","text":"Number Token Type 4000056420000030 <code>tok_visa_debit_ro_transferSuccess</code> Visa debit. Payout succeeds. 4000056420000014 <code>tok_visa_debit_ro_transferFail</code> Visa debit. Payout fails with a <code>could_not_process</code> code. 4000056420000022 <code>tok_visa_debit_ro_instantPayoutUnsupported</code> Visa debit. Card isn\u2019t eligible for Instant Payouts. 5555056420000002 <code>tok_mastercard_debit_ro_transferSuccess</code> Mastercard debit. Payout succeeds."},{"location":"refactoring/index.html","title":"Refactoring Journey \ud83d\udd04","text":""},{"location":"refactoring/index.html#overview","title":"Overview","text":"<p>This section documents our refactoring journey as we evolved from a simple layered architecture to a sophisticated event-driven, multi-currency financial system. Each refactor was driven by real business needs and technical challenges.</p>"},{"location":"refactoring/index.html#key-refactoring-milestones","title":"Key Refactoring Milestones","text":""},{"location":"refactoring/index.html#1-event-driven-architecture","title":"1. Event-Driven Architecture \ud83d\udd04","text":"<p>Status: \u2705 Completed</p> <p>Our final architecture that decouples currency conversion from payment processing and business validation.</p> <p>Key Design Decisions:</p> <ul> <li>Decoupled Currency Conversion: Pure, reusable service with no side effects</li> <li>Business Validation After Conversion: All checks performed in account's native currency</li> <li>Payment Triggered by Business Validation: Not by conversion completion</li> <li>Event Chaining Pattern: Clear flow of dependent operations</li> </ul> <p>Benefits Achieved:</p> <ul> <li>\u2705 Correct multi-currency validation</li> <li>\u2705 Reusable conversion logic</li> <li>\u2705 No if-statements for control flow</li> <li>\u2705 Clear separation of concerns</li> <li>\u2705 Flexible payment triggers</li> </ul> <p>View Final Architecture \u2192</p>"},{"location":"refactoring/index.html#2-lessons-learned","title":"2. Lessons Learned \ud83d\udcda","text":"<p>Status: \u2705 Completed</p> <p>Documentation of key problems solved and design decisions that led to our final architecture.</p> <p>Key Insights:</p> <ul> <li>Currency conversion should be pure and reusable</li> <li>Business validation must happen after conversion</li> <li>Event chaining eliminates if-statements</li> <li>Payment should be triggered by business validation</li> </ul> <p>View Lessons Learned \u2192</p>"},{"location":"refactoring/index.html#3-account-service-refactor","title":"3. Account Service Refactor \ud83c\udfe6","text":"<p>Status: \u2705 Completed</p> <p>Refactored account service to follow clean architecture principles with proper separation of concerns.</p> <p>Key Changes:</p> <ul> <li>Separated domain logic from infrastructure</li> <li>Introduced repository pattern</li> <li>Added proper error handling</li> <li>Improved testability</li> </ul> <p>View Account Service Refactor \u2192</p>"},{"location":"refactoring/index.html#4-decorator-pattern-implementation","title":"4. Decorator Pattern Implementation \ud83c\udfa8","text":"<p>Status: \u2705 Completed</p> <p>Implemented decorator pattern for cross-cutting concerns like logging, caching, and validation.</p> <p>Key Benefits:</p> <ul> <li>Clean separation of concerns</li> <li>Reusable cross-cutting logic</li> <li>Easy to add new decorators</li> <li>Improved testability</li> </ul> <p>View Decorator Pattern \u2192</p>"},{"location":"refactoring/index.html#5-event-driven-deposit-flow","title":"5. Event-Driven Deposit Flow \ud83d\udcb0","text":"<p>Status: \u2705 Completed</p> <p>Implemented event-driven architecture for deposit operations with currency conversion.</p> <p>Key Features:</p> <ul> <li>Event-driven validation</li> <li>Currency conversion handling</li> <li>Payment integration</li> <li>Transactional persistence</li> </ul> <p>View Deposit Flow \u2192</p>"},{"location":"refactoring/index.html#6-event-driven-withdraw-flow","title":"6. Event-Driven Withdraw Flow \ud83d\udcb8","text":"<p>Status: \u2705 Completed</p> <p>Implemented event-driven architecture for withdraw operations with proper validation.</p> <p>Key Features:</p> <ul> <li>Sufficient funds validation</li> <li>Currency conversion</li> <li>Payment processing</li> <li>Transaction recording</li> </ul> <p>View Withdraw Flow \u2192</p>"},{"location":"refactoring/index.html#7-event-driven-transfer-flow","title":"7. Event-Driven Transfer Flow \ud83d\udd04","text":"<p>Status: \u2705 Completed</p> <p>Implemented event-driven architecture for internal transfers between accounts.</p> <p>Key Features:</p> <ul> <li>Source and target validation</li> <li>Currency conversion</li> <li>Domain transfer operations</li> <li>Transactional consistency</li> </ul> <p>View Transfer Flow \u2192</p>"},{"location":"refactoring/index.html#8-unit-of-work-pattern-implementation","title":"8. Unit of Work Pattern Implementation \ud83c\udfd7\ufe0f","text":"<p>Status: \u2705 Completed</p> <p>Implemented Unit of Work pattern for transactional consistency across repositories.</p> <p>Key Benefits:</p> <ul> <li>Transactional consistency</li> <li>Clean repository interfaces</li> <li>Easy to test</li> <li>Proper error handling</li> </ul> <p>View Unit of Work Pattern \u2192</p>"},{"location":"refactoring/index.html#9-transaction-cqrs-refactor","title":"9. Transaction CQRS Refactor \ud83d\udcca","text":"<p>Status: \u2705 Completed</p> <p>Refactored transaction handling to follow CQRS (Command Query Responsibility Segregation) pattern.</p> <p>Key Changes:</p> <ul> <li>Separated read and write operations</li> <li>Optimized queries</li> <li>Improved performance</li> <li>Better scalability</li> </ul> <p>View CQRS Refactor \u2192</p>"},{"location":"refactoring/index.html#10-transaction-handleprocessed-refactor","title":"10. Transaction HandleProcessed Refactor \ud83d\udcbe","text":"<p>Status: \u2705 Completed</p> <p>Refactored transaction persistence to use proper repository pattern with Unit of Work.</p> <p>Key Improvements:</p> <ul> <li>Consistent persistence logic</li> <li>Transactional operations</li> <li>Better error handling</li> <li>Improved testability</li> </ul> <p>View HandleProcessed Refactor \u2192</p>"},{"location":"refactoring/index.html#11-layered-dependency-injection","title":"11. Layered Dependency Injection \ud83c\udfdb\ufe0f","text":"<p>Status: \u2705 Completed</p> <p>Implemented proper dependency injection across all layers of the application.</p> <p>Key Benefits:</p> <ul> <li>Loose coupling</li> <li>Easy testing</li> <li>Clear dependencies</li> <li>Maintainable code</li> </ul> <p>View Dependency Injection \u2192</p>"},{"location":"refactoring/index.html#architecture-evolution","title":"Architecture Evolution","text":""},{"location":"refactoring/index.html#before-refactoring","title":"Before Refactoring","text":"<pre><code>Simple Layered Architecture\n\u251c\u2500\u2500 Controllers\n\u251c\u2500\u2500 Services\n\u251c\u2500\u2500 Repositories\n\u2514\u2500\u2500 Database\n</code></pre>"},{"location":"refactoring/index.html#after-refactoring","title":"After Refactoring","text":"<pre><code>Event-Driven Clean Architecture\n\u251c\u2500\u2500 Event Bus\n\u251c\u2500\u2500 Event Handlers\n\u251c\u2500\u2500 Domain Services\n\u251c\u2500\u2500 Repositories (with UoW)\n\u251c\u2500\u2500 Infrastructure\n\u2514\u2500\u2500 Cross-cutting Concerns (Decorators)\n</code></pre>"},{"location":"refactoring/index.html#key-principles-established","title":"Key Principles Established","text":""},{"location":"refactoring/index.html#1-event-driven-design","title":"1. Event-Driven Design","text":"<ul> <li>Events as First-Class Citizens: All business operations emit events</li> <li>Event Chaining: Dependent operations flow through events</li> <li>Decoupled Handlers: Each handler has a single responsibility</li> </ul>"},{"location":"refactoring/index.html#2-clean-architecture","title":"2. Clean Architecture","text":"<ul> <li>Domain-Driven Design: Business logic in domain layer</li> <li>Dependency Inversion: Depend on abstractions, not concretions</li> <li>Separation of Concerns: Clear boundaries between layers</li> </ul>"},{"location":"refactoring/index.html#3-multi-currency-support","title":"3. Multi-Currency Support","text":"<ul> <li>Currency Conversion: Pure, reusable service</li> <li>Business Validation: Always in account's native currency</li> <li>Flexible Payment: Triggered by business validation</li> </ul>"},{"location":"refactoring/index.html#4-testing-excellence","title":"4. Testing Excellence","text":"<ul> <li>Unit Tests: Each component tested in isolation</li> <li>Integration Tests: End-to-end event flow testing</li> <li>Mock Dependencies: Easy to mock external services</li> </ul>"},{"location":"refactoring/index.html#benefits-achieved","title":"Benefits Achieved","text":""},{"location":"refactoring/index.html#1-maintainability","title":"1. Maintainability","text":"<ul> <li>Clear separation of concerns</li> <li>Easy to modify individual components</li> <li>Well-documented architecture</li> <li>Consistent patterns</li> </ul>"},{"location":"refactoring/index.html#2-testability","title":"2. Testability","text":"<ul> <li>Each component can be tested in isolation</li> <li>Mock dependencies easily injected</li> <li>Event-driven testing patterns</li> <li>Clear test boundaries</li> </ul>"},{"location":"refactoring/index.html#3-scalability","title":"3. Scalability","text":"<ul> <li>Handlers can be scaled independently</li> <li>Event bus can be distributed</li> <li>Easy to add new business operations</li> <li>No tight coupling</li> </ul>"},{"location":"refactoring/index.html#4-flexibility","title":"4. Flexibility","text":"<ul> <li>New currencies can be added without changing business logic</li> <li>New payment providers can be integrated easily</li> <li>Business rules can be modified independently</li> <li>Clear extension points</li> </ul>"},{"location":"refactoring/index.html#5-observability","title":"5. Observability","text":"<ul> <li>Clear event flow for debugging</li> <li>Structured logging at each step</li> <li>Audit trail of all operations</li> <li>Easy to monitor and alert</li> </ul>"},{"location":"refactoring/index.html#migration-strategy","title":"Migration Strategy","text":""},{"location":"refactoring/index.html#phase-1-foundation","title":"Phase 1: Foundation","text":"<ol> <li>Implement clean architecture principles</li> <li>Add dependency injection</li> <li>Introduce repository pattern with Unit of Work</li> </ol>"},{"location":"refactoring/index.html#phase-2-event-driven","title":"Phase 2: Event-Driven","text":"<ol> <li>Implement event bus</li> <li>Create event-driven handlers</li> <li>Add event chaining patterns</li> </ol>"},{"location":"refactoring/index.html#phase-3-multi-currency","title":"Phase 3: Multi-Currency","text":"<ol> <li>Implement currency conversion service</li> <li>Add multi-currency validation</li> <li>Decouple conversion from payment</li> </ol>"},{"location":"refactoring/index.html#phase-4-optimization","title":"Phase 4: Optimization","text":"<ol> <li>Implement CQRS for transactions</li> <li>Add caching and performance optimizations</li> <li>Improve error handling and observability</li> </ol>"},{"location":"refactoring/index.html#final-architecture-summary","title":"Final Architecture Summary","text":"<p>Our final architecture is a sophisticated event-driven, multi-currency financial system that:</p> <ul> <li>\u2705 Decouples concerns through event-driven design</li> <li>\u2705 Handles multi-currency operations correctly</li> <li>\u2705 Maintains consistency through Unit of Work pattern</li> <li>\u2705 Scales effectively through clean separation</li> <li>\u2705 Tests thoroughly through dependency injection</li> <li>\u2705 Observes clearly through structured logging</li> </ul> <p>This architecture provides a solid foundation for future growth while maintaining clean separation of concerns and enabling easy extension of business operations.</p>"},{"location":"refactoring/index.html#next-steps","title":"Next Steps","text":"<ol> <li>Monitor Performance: Track system performance and optimize as needed</li> <li>Add New Features: Use established patterns for new business operations</li> <li>Improve Observability: Add metrics, tracing, and alerting</li> <li>Scale Infrastructure: Consider distributed event bus for high load</li> <li>Document Patterns: Continue documenting best practices and patterns</li> </ol> <p>The refactoring journey has transformed our codebase from a simple layered application to a sophisticated, event-driven, multi-currency financial system that is maintainable, testable, scalable, and flexible.</p>"},{"location":"refactoring/account-service.html","title":"Account Service Refactor","text":"<p>Welcome to the Account Service Refactor guide! This page explains how we transformed our account service for clarity, maintainability, and extensibility. Whether you're a new contributor or a seasoned team member, you'll find actionable insights and a clear roadmap here.</p>"},{"location":"refactoring/account-service.html#problem-statement","title":"\u26a0\ufe0f Problem Statement","text":"<p>Why Refactor?</p> <p>The original <code>AccountService</code> had significant code duplication and branching in the <code>Deposit</code> and <code>Withdraw</code> methods. Both methods followed nearly identical patterns, making the codebase hard to maintain and extend.</p> <p>Issues included:</p> <ul> <li>Repeated logic for repository access, validation, and persistence</li> <li>Complex, nested branching for currency conversion and transaction handling</li> <li>Mixed responsibilities (validation, conversion, persistence, logging)</li> <li>Difficult to test and reason about</li> </ul>"},{"location":"refactoring/account-service.html#refactoring-solution-chain-of-responsibility-pattern","title":"\ud83d\udee0\ufe0f Refactoring Solution: Chain of Responsibility Pattern","text":"<p>The Big Idea</p> <p>We adopted the Chain of Responsibility pattern, breaking the process into focused, testable handlers. Each handler does one thing well and passes control to the next.</p> <p>Key changes:</p> <ul> <li>Each operation (deposit, withdraw, transfer) is now a chain of handlers</li> <li>Handlers are responsible for a single concern (validation, money creation, conversion, domain operation, persistence)</li> <li>The service method simply builds and invokes the chain</li> </ul>"},{"location":"refactoring/account-service.html#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<ul> <li>OperationHandler Interface: Contract for all handlers</li> <li>OperationRequest/Response: Data structures for passing information</li> <li>Specialized Handlers: Each with a single responsibility</li> <li>ChainBuilder: Constructs the complete operation chain</li> </ul>"},{"location":"refactoring/account-service.html#handler-chain-structure","title":"\ud83e\udde9 Handler Chain Structure","text":"<pre><code>// Deposit: ValidationHandler \u2192 MoneyCreationHandler \u2192 CurrencyConversionHandler \u2192 DomainOperationHandler \u2192 DepositPersistenceHandler\n// Withdraw: ... \u2192 WithdrawPersistenceHandler\n</code></pre>"},{"location":"refactoring/account-service.html#migration-note","title":"\ud83d\udcdd Migration Note","text":"<ul> <li>The legacy <code>PersistenceHandler</code> is removed</li> <li>All persistence is now event-driven and operation-specific</li> <li>Transaction creation is DRY and unified</li> </ul>"},{"location":"refactoring/account-service.html#example-usage","title":"\ud83e\uddea Example Usage","text":"<pre><code>// Deposit example\ntx, convInfo, err := accountService.Deposit(userID, accountID, 100.0, currency.Code(\"EUR\"))\n// Withdraw example\ntx, convInfo, err := accountService.Withdraw(userID, accountID, 50.0, currency.Code(\"USD\"))\n</code></pre>"},{"location":"refactoring/account-service.html#adding-new-handlers","title":"\u2728 Adding New Handlers","text":"<p>To add a new handler (e.g., for audit logging):</p> <pre><code>// AuditHandler logs all operations for audit purposes\ntype AuditHandler struct {\n    BaseHandler\n    logger *slog.Logger\n}\n\nfunc (h *AuditHandler) Handle(ctx context.Context, req *OperationRequest) (*OperationResponse, error) {\n    h.logger.Info(\"Operation executed\",\n        \"userID\", req.UserID,\n        \"accountID\", req.AccountID,\n        \"operation\", req.Operation,\n        \"amount\", req.Amount,\n        \"currency\", req.CurrencyCode)\n    return h.Next(ctx, req)\n}\n</code></pre>"},{"location":"refactoring/account-service.html#looking-forward","title":"\ud83d\udd2e Looking Forward","text":"<p>This refactor sets the stage for even more powerful features and easier onboarding. If you have ideas for further improvements, or want to contribute a new handler, jump in!</p> <p>Happy coding! \ud83c\udf89</p>"},{"location":"refactoring/clean-event-driven-architecture.html","title":"\ud83e\uddf9 Clean Event-Driven Architecture Refactoring","text":""},{"location":"refactoring/clean-event-driven-architecture.html#goals-achieved","title":"\ud83c\udfaf Goals Achieved","text":"<p>This refactoring successfully addressed the messy event handler registration and achieved the following goals:</p> <ul> <li>\u2705 No misleading events - Clear event flow and responsibilities</li> <li>\u2705 DRY (Don't Repeat Yourself) - Generic payment handlers instead of operation-specific ones</li> <li>\u2705 SRP (Single Responsibility Principle) - Each handler has one clear responsibility</li> <li>\u2705 No payment handlers per operation - Single generic payment handlers that subscribe to multiple validation events</li> </ul>"},{"location":"refactoring/clean-event-driven-architecture.html#before-vs-after","title":"\ud83d\udd04 Before vs After","text":""},{"location":"refactoring/clean-event-driven-architecture.html#before-messy","title":"Before (Messy)","text":"<pre><code>// Operation-specific payment handlers (violates DRY)\nbus.Subscribe(\"DepositConversionDoneEvent\", deposithandler.ConversionDoneHandler(bus, deps.Uow, deps.PaymentProvider, deps.Logger))\nbus.Subscribe(\"WithdrawConversionDoneEvent\", withdrawhandler.ConversionDoneHandler(bus, deps.Uow, deps.PaymentProvider, deps.Logger))\n\n// Duplicate payment persistence handlers (violates DRY)\nbus.Subscribe(\"PaymentInitiatedEvent\", deposithandler.PaymentPersistenceHandler(bus, deps.Uow, deps.Logger))\nbus.Subscribe(\"PaymentInitiatedEvent\", withdrawhandler.PaymentPersistenceHandler(bus, deps.Uow, deps.Logger))\n\n// Conversion handlers doing payment initiation (violates SRP)\n// ConversionDoneHandler was doing both business validation AND payment initiation\n</code></pre>"},{"location":"refactoring/clean-event-driven-architecture.html#after-clean","title":"After (Clean)","text":"<pre><code>// Generic payment handlers (DRY)\nbus.Subscribe(\"DepositValidatedEvent\", paymenthandler.PaymentInitiationHandler(bus, deps.PaymentProvider, deps.Logger))\nbus.Subscribe(\"WithdrawValidatedEvent\", paymenthandler.PaymentInitiationHandler(bus, deps.PaymentProvider, deps.Logger))\n\n// Single generic payment persistence handler (DRY)\nbus.Subscribe(\"PaymentInitiatedEvent\", paymenthandler.PaymentPersistenceHandler(bus, deps.Uow, deps.Logger))\n\n// Conversion handlers focus only on business validation (SRP)\nbus.Subscribe(\"DepositConversionDoneEvent\", deposithandler.ConversionDoneHandler(bus, deps.Uow, deps.Logger))\nbus.Subscribe(\"WithdrawConversionDoneEvent\", withdrawhandler.ConversionDoneHandler(bus, deps.Uow, deps.Logger))\n</code></pre>"},{"location":"refactoring/clean-event-driven-architecture.html#architecture-changes","title":"\ud83c\udfd7\ufe0f Architecture Changes","text":""},{"location":"refactoring/clean-event-driven-architecture.html#1-generic-payment-initiation-handler","title":"1. Generic Payment Initiation Handler","text":"<p>Location: <code>pkg/handler/payment/initiation_handler.go</code></p> <p>Responsibilities: - Handles <code>DepositValidatedEvent</code> and <code>WithdrawValidatedEvent</code> - Initiates payment with the payment provider - Emits <code>PaymentInitiatedEvent</code></p> <p>Benefits: - \u2705 DRY: Single handler for all payment initiation - \u2705 SRP: Only handles payment initiation, not business validation - \u2705 Extensible: Easy to add new validation events (e.g., <code>TransferValidatedEvent</code>)</p>"},{"location":"refactoring/clean-event-driven-architecture.html#2-generic-payment-handleprocessed-handler","title":"2. Generic Payment HandleProcessed Handler","text":"<p>Location: <code>pkg/handler/payment/persistence_handler.go</code></p> <p>Responsibilities: - Handles <code>PaymentInitiatedEvent</code> for all operations - Updates transaction with payment ID - Emits <code>PaymentIdPersistedEvent</code></p> <p>Benefits: - \u2705 DRY: Single handler for all payment persistence - \u2705 SRP: Only handles payment persistence, not business logic - \u2705 Consistent: Same persistence logic for all operations</p>"},{"location":"refactoring/clean-event-driven-architecture.html#3-clean-conversion-done-handlers","title":"3. Clean Conversion Done Handlers","text":"<p>Location: <code>pkg/handler/account/deposit/conversion_done.go</code> and <code>pkg/handler/account/withdraw/conversion_done.go</code></p> <p>Responsibilities: - Handle <code>*ConversionDoneEvent</code> events - Perform business validation after conversion - Emit validation events to trigger payment initiation</p> <p>Benefits: - \u2705 SRP: Only handles business validation, not payment initiation - \u2705 Clear Flow: Validation \u2192 Payment Initiation (not Validation + Payment) - \u2705 Testable: Easy to test business validation logic separately</p>"},{"location":"refactoring/clean-event-driven-architecture.html#event-flow","title":"\ud83d\udd04 Event Flow","text":""},{"location":"refactoring/clean-event-driven-architecture.html#deposit-flow","title":"Deposit Flow","text":"<pre><code>DepositRequestedEvent \u2192 ValidationHandler \u2192 DepositValidatedEvent \u2192 PaymentInitiationHandler \u2192 PaymentInitiatedEvent \u2192 PaymentPersistenceHandler\n</code></pre>"},{"location":"refactoring/clean-event-driven-architecture.html#withdraw-flow","title":"Withdraw Flow","text":"<pre><code>WithdrawRequestedEvent \u2192 ValidationHandler \u2192 WithdrawValidatedEvent \u2192 PaymentInitiationHandler \u2192 PaymentInitiatedEvent \u2192 PaymentPersistenceHandler\n</code></pre>"},{"location":"refactoring/clean-event-driven-architecture.html#transfer-flow-no-payment","title":"Transfer Flow (No Payment)","text":"<pre><code>TransferRequestedEvent \u2192 ValidationHandler \u2192 TransferValidatedEvent \u2192 DomainOpHandler \u2192 TransferDomainOpDoneEvent \u2192 PersistenceHandler\n</code></pre>"},{"location":"refactoring/clean-event-driven-architecture.html#testing","title":"\ud83e\uddea Testing","text":""},{"location":"refactoring/clean-event-driven-architecture.html#updated-tests","title":"Updated Tests","text":"<ul> <li>\u2705 Payment Initiation Handler: Tests for <code>DepositValidatedEvent</code> and <code>WithdrawValidatedEvent</code></li> <li>\u2705 Payment HandleProcessed Handler: Tests for <code>PaymentInitiatedEvent</code></li> <li>\u2705 Conversion Done Handlers: Tests for business validation only</li> </ul>"},{"location":"refactoring/clean-event-driven-architecture.html#test-coverage","title":"Test Coverage","text":"<pre><code>go test ./pkg/handler/payment/... -v  # \u2705 All passing\ngo test ./pkg/handler/... -v          # \u2705 All passing\n</code></pre>"},{"location":"refactoring/clean-event-driven-architecture.html#file-changes","title":"\ud83d\uddc2\ufe0f File Changes","text":""},{"location":"refactoring/clean-event-driven-architecture.html#addedmodified","title":"Added/Modified","text":"<ul> <li>\u2705 <code>pkg/handler/payment/initiation_handler.go</code> - Generic payment initiation</li> <li>\u2705 <code>pkg/handler/payment/persistence_handler.go</code> - Generic payment persistence</li> <li>\u2705 <code>pkg/handler/account/deposit/conversion_done.go</code> - Clean business validation</li> <li>\u2705 <code>pkg/handler/account/withdraw/conversion_done.go</code> - Clean business validation</li> <li>\u2705 <code>app/app.go</code> - Updated event handler registration</li> </ul>"},{"location":"refactoring/clean-event-driven-architecture.html#removed","title":"Removed","text":"<ul> <li>\u274c <code>pkg/handler/account/deposit/payment_persistence.go</code> - Duplicate code</li> <li>\u274c <code>pkg/handler/account/withdraw/payment_persistence.go</code> - Duplicate code</li> </ul>"},{"location":"refactoring/clean-event-driven-architecture.html#key-principles-applied","title":"\ud83c\udfaf Key Principles Applied","text":""},{"location":"refactoring/clean-event-driven-architecture.html#1-event-driven-design","title":"1. Event-Driven Design","text":"<ul> <li>Events trigger next steps, not conditional logic</li> <li>Clear event flow: Validation \u2192 Payment \u2192 HandleProcessed</li> <li>No if-else statements for control flow</li> </ul>"},{"location":"refactoring/clean-event-driven-architecture.html#2-single-responsibility-principle","title":"2. Single Responsibility Principle","text":"<ul> <li>Each handler has one clear responsibility</li> <li>Conversion handlers: Business validation only</li> <li>Payment handlers: Payment operations only</li> <li>HandleProcessed handlers: Database operations only</li> </ul>"},{"location":"refactoring/clean-event-driven-architecture.html#3-dont-repeat-yourself","title":"3. Don't Repeat Yourself","text":"<ul> <li>Generic payment handlers for all operations</li> <li>Single payment persistence logic</li> <li>Reusable event structures</li> </ul>"},{"location":"refactoring/clean-event-driven-architecture.html#4-separation-of-concerns","title":"4. Separation of Concerns","text":"<ul> <li>Business validation separated from payment initiation</li> <li>Payment logic separated from conversion logic</li> <li>HandleProcessed logic separated from business logic</li> </ul>"},{"location":"refactoring/clean-event-driven-architecture.html#benefits","title":"\ud83d\ude80 Benefits","text":""},{"location":"refactoring/clean-event-driven-architecture.html#1-maintainability","title":"1. Maintainability","text":"<ul> <li>Clear separation of concerns</li> <li>Easy to understand and modify individual components</li> <li>Consistent patterns across all handlers</li> </ul>"},{"location":"refactoring/clean-event-driven-architecture.html#2-testability","title":"2. Testability","text":"<ul> <li>Each handler can be tested independently</li> <li>Clear input/output expectations</li> <li>Easy to mock dependencies</li> </ul>"},{"location":"refactoring/clean-event-driven-architecture.html#3-extensibility","title":"3. Extensibility","text":"<ul> <li>Easy to add new operations (e.g., loan payments)</li> <li>Easy to add new payment providers</li> <li>Easy to add new validation rules</li> </ul>"},{"location":"refactoring/clean-event-driven-architecture.html#4-reliability","title":"4. Reliability","text":"<ul> <li>No duplicate code to maintain</li> <li>Clear error handling paths</li> <li>Consistent event flow</li> </ul>"},{"location":"refactoring/clean-event-driven-architecture.html#future-enhancements","title":"\ud83d\udd2e Future Enhancements","text":""},{"location":"refactoring/clean-event-driven-architecture.html#1-add-transfer-payment-support","title":"1. Add Transfer Payment Support","text":"<pre><code>// Easy to extend - just add new event subscription\nbus.Subscribe(\"TransferValidatedEvent\", paymenthandler.PaymentInitiationHandler(bus, deps.PaymentProvider, deps.Logger))\n</code></pre>"},{"location":"refactoring/clean-event-driven-architecture.html#2-add-payment-completion-handlers","title":"2. Add Payment Completion Handlers","text":"<pre><code>// Generic payment completion handling\nbus.Subscribe(\"PaymentCompletedEvent\", paymenthandler.PaymentCompletionHandler(bus, deps.Uow, deps.Logger))\n</code></pre>"},{"location":"refactoring/clean-event-driven-architecture.html#3-add-payment-failure-handlers","title":"3. Add Payment Failure Handlers","text":"<pre><code>// Generic payment failure handling\nbus.Subscribe(\"PaymentFailedEvent\", paymenthandler.PaymentFailureHandler(bus, deps.Uow, deps.Logger))\n</code></pre>"},{"location":"refactoring/clean-event-driven-architecture.html#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Event-Driven Architecture</li> <li>Event-Driven Deposit Flow</li> <li>Event-Driven Withdraw Flow</li> <li>Event-Driven Transfer Flow</li> <li>Domain Events</li> </ul>"},{"location":"refactoring/currency-conversion-refactor.html","title":"\ud83d\udee0\ufe0f Currency Conversion Refactor: Step-by-Step Migration Plan","text":"<p>This document outlines the migration plan to refactor the currency conversion flow for maximum DRY, decoupling, and extensibility in the event-driven fintech system.</p>"},{"location":"refactoring/currency-conversion-refactor.html#rationale","title":"\ud83c\udfaf Rationale","text":"<ul> <li>Problem: Previous flows coupled currency conversion with business logic (e.g., payment initiation), leading to code repetition and risk of unintended side effects.</li> <li>Goal: Make currency conversion a generic, reusable process, with all business-specific logic handled in separate handlers.</li> </ul>"},{"location":"refactoring/currency-conversion-refactor.html#step-by-step-migration-plan","title":"\ud83d\udea6 Step-by-Step Migration Plan","text":""},{"location":"refactoring/currency-conversion-refactor.html#1-define-generic-conversion-events","title":"1. Define Generic Conversion Events","text":"<ul> <li>ConversionRequested: Contains all info needed for conversion (amount, source/target currency, and a <code>FlowType</code> or <code>Purpose</code> field, or embeds the original business event as a payload).</li> <li>ConversionDone: Contains the result (converted amount, same context/correlation info as above).</li> </ul> <p>Example:</p> <pre><code>// ConversionRequested event\n type ConversionRequested struct {\n     CorrelationID string      // Unique ID to correlate request/response\n     FlowType      string      // \"deposit\", \"withdraw\", \"transfer\", etc.\n     OriginalEvent interface{} // The original event (DepositValidatedEvent, etc.)\n     Amount        money.Money\n     SourceCurrency string\n     TargetCurrency string\n     Timestamp      int64\n }\n\n// ConversionDone event\n type ConversionDone struct {\n     CorrelationID string\n     FlowType      string\n     OriginalEvent interface{}\n     ConvertedAmount money.Money\n     Timestamp      int64\n }\n</code></pre>"},{"location":"refactoring/currency-conversion-refactor.html#2-refactor-the-conversion-handler","title":"2. Refactor the Conversion Handler","text":"<ul> <li>Listens for ConversionRequested.</li> <li>Performs conversion.</li> <li>Emits ConversionDone with all context preserved.</li> <li>No business logic, no payment logic, no branching.</li> </ul>"},{"location":"refactoring/currency-conversion-refactor.html#3-update-business-handlers-to-use-conversiondone","title":"3. Update Business Handlers to Use ConversionDone","text":"<ul> <li>Each business handler (deposit, withdraw, transfer) listens for ConversionDone.</li> <li>If the <code>FlowType</code> or <code>OriginalEvent</code> matches their flow, they emit the next business event (<code>DepositConversionDone</code>, <code>WithdrawConversionDone</code>, etc.).</li> <li>Only these business handlers trigger payment or domain operations.</li> </ul>"},{"location":"refactoring/currency-conversion-refactor.html#4-update-event-bus-wiring","title":"4. Update Event Bus Wiring","text":"<ul> <li>Subscribe the generic conversion handler to ConversionRequested.</li> <li>Subscribe each business handler to ConversionDone.</li> <li>Remove all direct business-specific conversion handler wiring.</li> </ul>"},{"location":"refactoring/currency-conversion-refactor.html#5-update-all-emission-points","title":"5. Update All Emission Points","text":"<ul> <li>Wherever you previously emitted a business-specific conversion requested event, emit a ConversionRequested event with the correct context.</li> </ul>"},{"location":"refactoring/currency-conversion-refactor.html#6-update-tests","title":"6. Update Tests","text":"<ul> <li>Ensure tests for all flows (deposit, withdraw, transfer) still pass and that no payment is triggered for transfer.</li> </ul>"},{"location":"refactoring/currency-conversion-refactor.html#7-document-the-new-pattern","title":"7. Document the New Pattern","text":"<ul> <li>Update your architecture docs and diagrams to show the new generic conversion flow and business-specific post-conversion handlers.</li> </ul>"},{"location":"refactoring/currency-conversion-refactor.html#summary-table","title":"\ud83d\udccb Summary Table","text":"Step Action 1 Define generic ConversionRequested/ConversionDone events 2 Refactor conversion handler to only handle these events 3 Update business handlers to listen for ConversionDone and emit next-step events 4 Update event bus wiring 5 Update all emission points to use ConversionRequested 6 Update and run tests 7 Update documentation and diagrams <p>This plan ensures a clean, extensible, and maintainable event-driven architecture for all currency conversion flows.</p>"},{"location":"refactoring/decorator-pattern.html","title":"Decorator Pattern","text":""},{"location":"refactoring/decorator-pattern.html#overview","title":"\ud83c\udfc1 Overview","text":"<p>The fintech application previously used the decorator pattern for automatic transaction management across service operations. With the adoption of the UnitOfWork interface pattern, transaction management is now handled directly in the service layer, providing type-safe, context-aware, and testable transaction boundaries.</p>"},{"location":"refactoring/decorator-pattern.html#implementation","title":"\ud83c\udfd7\ufe0f Implementation","text":""},{"location":"refactoring/decorator-pattern.html#unitofwork-interface","title":"\ud83e\uddf0 UnitOfWork Interface","text":"<p>Transaction management is now performed using the <code>UnitOfWork</code> interface, which exposes a <code>Do(ctx, func(uow UnitOfWork) error)</code> method. This method ensures all repository operations within a transaction use the same DB session, providing atomicity and consistency.</p>"},{"location":"refactoring/decorator-pattern.html#example-usage","title":"\ud83e\uddea Example Usage","text":"<pre><code>func (s *AccountService) CreateAccount(ctx context.Context, userID uuid.UUID) (*account.Account, error) {\n    var a *account.Account\n    err := s.uow.Do(ctx, func(uow repository.UnitOfWork) error {\n        repo, err := uow.GetRepository[repository.AccountRepository]()\n        if err != nil {\n            return err\n    }\n        a, err = account.New().WithUserID(userID).Build()\n        if err != nil {\n            return err\n        }\n        return repo.Create(a)\n    })\n    if err != nil {\n        a = nil\n    }\n    return a, err\n}\n</code></pre>"},{"location":"refactoring/decorator-pattern.html#use-cases","title":"\ud83c\udf0d Use Cases","text":""},{"location":"refactoring/decorator-pattern.html#benefits","title":"\ud83d\ude80 Benefits","text":"<ul> <li>DRY Principle: Eliminates transaction boilerplate</li> <li>Separation of Concerns: Business logic separated from transaction management</li> <li>Readability: Clean, focused business operations</li> <li>Maintainability: Transaction logic centralized in the UnitOfWork</li> <li>Automatic Rollback: On any error or panic</li> <li>Consistent Logging: Structured logging for all transaction events</li> <li>Easier Mocking: Business logic can be tested in isolation</li> </ul>"},{"location":"refactoring/decorator-pattern.html#service-integration","title":"\ud83e\uddf0 Service Integration","text":"<p>All service methods now follow this pattern:</p> <ol> <li>Logging: Start operation with context</li> <li>Transaction: Execute business logic within <code>uow.Do(ctx, ...)</code></li> </ol>"},{"location":"refactoring/deposit_event_flow_refactor.html","title":"Deposit/Payment Event Flow Refactor","text":""},{"location":"refactoring/deposit_event_flow_refactor.html#overview","title":"Overview","text":"<p>This document explains the refactored, cycle-free, DRY event-driven flow for deposit and payment initiation. It covers handler responsibilities, idempotency, and anti-cycle design, with a Mermaid diagram and troubleshooting tips.</p>"},{"location":"refactoring/deposit_event_flow_refactor.html#updated-deposit-event-flow-diagram","title":"Updated Deposit Event Flow Diagram","text":"<p><code>mermaid flowchart TD     A[DepositRequestedEvent] --&gt; B[DepositValidationHandler \u2192 DepositValidatedEvent]     B --&gt; C[DepositPersistenceHandler \u2192 DepositPersistedEvent]     C --&gt; D[ConversionHandler \u2192 DepositConversionDoneEvent]     D --&gt; E[ConversionPersistenceHandler]     D --&gt; F[BusinessValidationHandler \u2192 DepositBusinessValidatedEvent]     F --&gt; G[DepositPaymentInitiationHandler \u2192 PaymentInitiatedEvent]     G --&gt; H[PaymentPersistenceHandler]</code></p>"},{"location":"refactoring/deposit_event_flow_refactor.html#handler-responsibilities-deposit-flow","title":"Handler Responsibilities (Deposit Flow)","text":"<ul> <li>DepositValidationHandler: Validates deposit request, emits <code>DepositValidatedEvent</code>.</li> <li>DepositPersistenceHandler: Persists validated deposit, emits <code>DepositPersistedEvent</code>.</li> <li>ConversionHandler: Handles currency conversion, emits <code>DepositConversionDoneEvent</code>.</li> <li>ConversionPersistenceHandler: Persists conversion data, idempotent, logs all actions.</li> <li>BusinessValidationHandler: Performs business checks, emits <code>DepositBusinessValidatedEvent</code>, idempotent.</li> <li>DepositPaymentInitiationHandler: Initiates payment, emits <code>PaymentInitiatedEvent</code>, idempotent.</li> <li>PaymentPersistenceHandler: Persists payment info, idempotent if needed.</li> </ul>"},{"location":"refactoring/deposit_event_flow_refactor.html#idempotency-anti-cycle-design","title":"Idempotency &amp; Anti-Cycle Design","text":"<ul> <li>Each handler uses a <code>sync.Map</code> (or persistent store) to track processed TransactionIDs.</li> <li>If a duplicate event is received, the handler logs and skips emission (<code>[SKIP]</code>).</li> <li>No handler emits an event that can re-trigger itself or a previous handler.</li> <li>This design prevents infinite loops and duplicate payment initiations.</li> </ul>"},{"location":"refactoring/deposit_event_flow_refactor.html#example-logs-deposit-flow","title":"Example Logs (Deposit Flow)","text":"<pre><code>[START] Received event handler=DepositValidationHandler event_type=DepositRequestedEvent ...\n\u2705 [SUCCESS] Account validated, emitting DepositValidatedEvent ...\n[START] Received event handler=DepositPersistenceHandler event_type=DepositValidatedEvent ...\n\u2705 [SUCCESS] Transaction persisted ...\n[START] Received event handler=ConversionHandler event_type=DepositPersistedEvent ...\n\u2705 [SUCCESS] Conversion done, emitting DepositConversionDoneEvent ...\n[START] Received event handler=ConversionPersistenceHandler event_type=DepositConversionDoneEvent ...\n\u2705 [SUCCESS] Conversion data persisted ...\n[START] Received event handler=BusinessValidationHandler event_type=DepositConversionDoneEvent ...\n\u2705 [SUCCESS] Business validation passed, emitting DepositBusinessValidatedEvent ...\n[START] Received event handler=DepositPaymentInitiationHandler event_type=DepositBusinessValidatedEvent ...\n\u2705 [SUCCESS] Initiating payment, emitting PaymentInitiatedEvent ...\n[START] Received event handler=PaymentPersistenceHandler event_type=PaymentInitiatedEvent ...\n\u2705 [SUCCESS] Payment info persisted ...\n</code></pre>"},{"location":"refactoring/deposit_event_flow_refactor.html#updated-withdraw-event-flow-diagram","title":"Updated Withdraw Event Flow Diagram","text":"<p><code>mermaid flowchart TD     A[WithdrawRequestedEvent] --&gt; B[WithdrawValidationHandler \u2192 WithdrawValidatedEvent]     B --&gt; C[WithdrawPersistenceHandler \u2192 WithdrawPersistedEvent]     C --&gt; D[ConversionHandler \u2192 WithdrawConversionDoneEvent]     D --&gt; E[ConversionPersistenceHandler]     D --&gt; F[BusinessValidationHandler \u2192 WithdrawValidatedEvent]     F --&gt; G[WithdrawPaymentInitiationHandler \u2192 PaymentInitiatedEvent]     G --&gt; H[PaymentPersistenceHandler]</code></p>"},{"location":"refactoring/deposit_event_flow_refactor.html#updated-transfer-event-flow-diagram","title":"Updated Transfer Event Flow Diagram","text":"<p><code>mermaid flowchart TD     A[TransferRequestedEvent] --&gt; B[TransferValidationHandler \u2192 TransferValidatedEvent]     B --&gt; C[InitialPersistenceHandler \u2192 TransferPersistedEvent]     C --&gt; D[ConversionHandler \u2192 TransferConversionDoneEvent]     D --&gt; E[ConversionPersistenceHandler]     D --&gt; F[BusinessValidationHandler \u2192 TransferDomainOpDoneEvent]     F --&gt; G[TransferPaymentInitiationHandler \u2192 PaymentInitiatedEvent]     G --&gt; H[PaymentPersistenceHandler]</code></p>"},{"location":"refactoring/deposit_event_flow_refactor.html#handler-responsibilities-withdraw-flow","title":"Handler Responsibilities (Withdraw Flow)","text":"<ul> <li>WithdrawValidationHandler: Validates withdraw request, emits <code>WithdrawValidatedEvent</code>.</li> <li>WithdrawPersistenceHandler: Persists validated withdraw, emits <code>WithdrawPersistedEvent</code>.</li> <li>ConversionHandler: Handles currency conversion, emits <code>WithdrawConversionDoneEvent</code>.</li> <li>ConversionPersistenceHandler: Persists conversion data, idempotent, logs all actions.</li> <li>BusinessValidationHandler: Performs business checks, emits <code>WithdrawValidatedEvent</code>, idempotent.</li> <li>WithdrawPaymentInitiationHandler: Initiates payment, emits <code>PaymentInitiatedEvent</code>, idempotent.</li> <li>PaymentPersistenceHandler: Persists payment info, idempotent if needed.</li> </ul>"},{"location":"refactoring/deposit_event_flow_refactor.html#handler-responsibilities-transfer-flow","title":"Handler Responsibilities (Transfer Flow)","text":"<ul> <li>TransferValidationHandler: Validates transfer request, emits <code>TransferValidatedEvent</code>.</li> <li>InitialPersistenceHandler: Persists initial transfer, emits <code>TransferPersistedEvent</code>.</li> <li>ConversionHandler: Handles currency conversion, emits <code>TransferConversionDoneEvent</code>.</li> <li>ConversionPersistenceHandler: Persists conversion data, idempotent, logs all actions.</li> <li>BusinessValidationHandler: Performs business checks, emits <code>TransferDomainOpDoneEvent</code>, idempotent.</li> <li>TransferPaymentInitiationHandler: Initiates payment, emits <code>PaymentInitiatedEvent</code>, idempotent.</li> <li>PaymentPersistenceHandler: Persists payment info, idempotent if needed.</li> </ul>"},{"location":"refactoring/deposit_event_flow_refactor.html#troubleshooting-tips-all-flows","title":"Troubleshooting Tips (All Flows)","text":"<ul> <li>Multiple events for the same transaction?</li> <li>Check idempotency logic in each handler.</li> <li>Ensure no handler emits an event that can re-trigger itself or a previous handler.</li> <li>Event chain not progressing?</li> <li>Check logs for <code>[SKIP]</code> or <code>[ERROR]</code> messages.</li> <li>Ensure each handler emits only the next event in the chain.</li> <li>Missing logs or correlation IDs?</li> <li>Add structured logging with <code>correlation_id</code>, <code>transaction_id</code>, and event type in each handler.</li> </ul>"},{"location":"refactoring/deposit_event_flow_refactor.html#summary","title":"Summary","text":"<p>This refactor ensures a clean, DRY, and cycle-free event-driven deposit/payment flow with robust idempotency and clear logging for easy troubleshooting.</p>"},{"location":"refactoring/event-driven-architecture.html","title":"Event-Driven Architecture \ud83d\udd04","text":""},{"location":"refactoring/event-driven-architecture.html#overview","title":"Overview","text":"<p>Our fintech application follows an event-driven architecture that decouples business operations, currency conversion, and payment processing. This design enables flexible, testable, and maintainable multi-currency financial operations.</p>"},{"location":"refactoring/event-driven-architecture.html#core-design-principles","title":"Core Design Principles","text":""},{"location":"refactoring/event-driven-architecture.html#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<ul> <li>Currency Conversion: Pure, reusable service with no side effects</li> <li>Business Validation: Always performed after conversion in account's native currency</li> <li>Payment Processing: Triggered by business validation, not conversion</li> <li>Domain Operations: Executed after all validations pass</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#2-event-chaining-pattern","title":"2. Event Chaining Pattern","text":"<p>Events flow through a chain of handlers, each responsible for a specific concern:</p> <pre><code>User Request \u2192 Validation \u2192 Conversion (if needed) \u2192 Business Validation \u2192 Payment/Domain Op \u2192 HandleProcessed\n</code></pre>"},{"location":"refactoring/event-driven-architecture.html#3-multi-currency-handling","title":"3. Multi-Currency Handling","text":"<ul> <li>All business invariants (sufficient funds, limits) are checked in the account's native currency</li> <li>Currency conversion is applied before validation, ensuring accurate checks</li> <li>Payment processing is decoupled from conversion logic</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#event-flow-architecture","title":"Event Flow Architecture","text":""},{"location":"refactoring/event-driven-architecture.html#deposit-flow","title":"Deposit Flow","text":"<p><code>mermaid graph TD     A[DepositRequested] --&gt; B[CurrencyConversionRequested]     B --&gt; C[CurrencyConverted]     C --&gt; D[DepositCurrencyConverted]     D --&gt; E[DepositBusinessValidated]     E --&gt; F[PaymentInitiated]</code></p>"},{"location":"refactoring/event-driven-architecture.html#withdraw-flow","title":"Withdraw Flow","text":"<p><code>mermaid graph TD     A[WithdrawRequested] --&gt; B[CurrencyConversionRequested]     B --&gt; C[CurrencyConverted]     C --&gt; D[WithdrawCurrencyConverted]     D --&gt; E[WithdrawBusinessValidated]     E --&gt; F[PaymentInitiated]</code></p>"},{"location":"refactoring/event-driven-architecture.html#transfer-flow","title":"Transfer Flow","text":"<p><code>mermaid graph TD     A[TransferRequested] --&gt; B[CurrencyConversionRequested]     B --&gt; C[CurrencyConverted]     C --&gt; D[TransferCurrencyConverted]     D --&gt; E[TransferCompleted]</code></p>"},{"location":"refactoring/event-driven-architecture.html#key-design-decisions","title":"Key Design Decisions","text":""},{"location":"refactoring/event-driven-architecture.html#1-decoupled-currency-conversion","title":"1. Decoupled Currency Conversion","text":"<p>Problem: Original design coupled currency conversion with payment initiation, making it difficult to reuse conversion logic and maintain clean separation of concerns.</p> <p>Solution: Currency conversion is now a pure, reusable service that:</p> <ul> <li>Has no side effects</li> <li>Doesn't trigger payment processing</li> <li>Can be used by any business operation</li> <li>Emits generic <code>CurrencyConversionRequested</code> and <code>CurrencyConverted</code></li> </ul> <p>Benefits:</p> <ul> <li>Reusable across all operations (deposit, withdraw, transfer)</li> <li>Easier to test and mock</li> <li>No code duplication</li> <li>Clear separation of concerns</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#2-business-validation-after-conversion","title":"2. Business Validation After Conversion","text":"<p>Problem: Business invariants (sufficient funds, limits) were sometimes checked before currency conversion, leading to incorrect validations.</p> <p>Solution: All business validations are performed after currency conversion:</p> <ul> <li>Sufficient funds check in account's native currency</li> <li>Maximum/minimum limits in account's native currency</li> <li>All business rules applied to converted amounts</li> </ul> <p>Benefits:</p> <ul> <li>Accurate validation regardless of request currency</li> <li>Consistent business rule enforcement</li> <li>No currency-related validation bugs</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#3-payment-triggered-by-business-validation","title":"3. Payment Triggered by Business Validation","text":"<p>Problem: Payment was triggered by conversion completion, not business validation.</p> <p>Solution: Payment initiation is triggered by business validation events:</p> <ul> <li><code>WithdrawBusinessValidated</code> triggers payment for withdrawals</li> <li><code>DepositBusinessValidated</code> triggers payment for deposits</li> <li>Business validation ensures all rules pass before payment</li> </ul> <p>Benefits:</p> <ul> <li>Payment only occurs after all validations pass</li> <li>Clear audit trail of validation \u2192 payment flow</li> <li>Easier to add new payment triggers</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#4-generic-vs-business-specific-events","title":"4. Generic vs Business-Specific Events","text":"<p>Generic Events (reusable):</p> <ul> <li><code>CurrencyConversionRequested</code></li> <li><code>CurrencyConverted</code></li> </ul> <p>Business-Specific Events (context-aware):</p> <ul> <li><code>DepositCurrencyConverted</code></li> <li><code>WithdrawCurrencyConverted</code></li> <li><code>TransferCurrencyConverted</code></li> </ul> <p>Benefits:</p> <ul> <li>Generic events for reusable logic</li> <li>Business-specific events for context-aware operations</li> <li>Clear event hierarchy and responsibilities</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#event-definitions","title":"Event Definitions","text":""},{"location":"refactoring/event-driven-architecture.html#generic-conversion-events","title":"Generic Conversion Events","text":"<pre><code>type CurrencyConversionRequested struct {\n    FlowEvent\n    Amount        money.Money\n    To            currency.Code\n    TransactionID uuid.UUID\n}\n\ntype CurrencyConverted struct {\n    FlowEvent\n    TransactionID   uuid.UUID\n    ConvertedAmount money.Money\n    ConversionInfo  *common.ConversionInfo\n}\n</code></pre>"},{"location":"refactoring/event-driven-architecture.html#business-specific-events","title":"Business-Specific Events","text":"<pre><code>type DepositCurrencyConverted struct {\n    DepositRequested\n    CurrencyConverted\n    Timestamp time.Time\n}\n\ntype WithdrawCurrencyConverted struct {\n    WithdrawRequested\n    CurrencyConverted\n    Timestamp time.Time\n}\n\ntype TransferCurrencyConverted struct {\n    TransferRequested\n    CurrencyConverted\n    Timestamp time.Time\n}\n</code></pre>"},{"location":"refactoring/event-driven-architecture.html#handler-responsibilities","title":"Handler Responsibilities","text":""},{"location":"refactoring/event-driven-architecture.html#generic-conversion-handler","title":"Generic Conversion Handler","text":"<ul> <li>Handles <code>ConversionRequestedEvent</code></li> <li>Performs currency conversion</li> <li>Emits <code>ConversionDoneEvent</code></li> <li>No business logic or side effects</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#business-specific-conversion-done-handlers","title":"Business-Specific Conversion Done Handlers","text":"<ul> <li>Handle <code>*CurrencyConverted</code> events</li> <li>Perform business validation in account currency</li> <li>Emit payment initiation or domain operation events</li> <li>Inject payment providers and domain services</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#payment-handlers","title":"Payment Handlers","text":"<ul> <li>Handle payment initiation events</li> <li>Call external payment providers</li> <li>Emit payment completion events</li> <li>Handle payment failures</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#handleprocessed-handlers","title":"HandleProcessed Handlers","text":"<ul> <li>Handle domain operation completion events</li> <li>Persist transactions using Unit of Work</li> <li>Emit persistence completion events</li> <li>Ensure transactional consistency</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#benefits-of-this-architecture","title":"Benefits of This Architecture","text":""},{"location":"refactoring/event-driven-architecture.html#1-maintainability","title":"1. Maintainability","text":"<ul> <li>Clear separation of concerns</li> <li>Each handler has a single responsibility</li> <li>Easy to modify individual components</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#2-testability","title":"2. Testability","text":"<ul> <li>Each handler can be tested in isolation</li> <li>Mock dependencies easily injected</li> <li>Event-driven testing patterns</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#3-scalability","title":"3. Scalability","text":"<ul> <li>Handlers can be scaled independently</li> <li>Event bus can be distributed</li> <li>Easy to add new business operations</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#4-flexibility","title":"4. Flexibility","text":"<ul> <li>New currencies can be added without changing business logic</li> <li>New payment providers can be integrated easily</li> <li>Business rules can be modified independently</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#5-observability","title":"5. Observability","text":"<ul> <li>Clear event flow for debugging</li> <li>Structured logging at each step</li> <li>Audit trail of all operations</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#implementation-guidelines","title":"Implementation Guidelines","text":""},{"location":"refactoring/event-driven-architecture.html#1-event-handler-structure","title":"1. Event Handler Structure","text":"<pre><code>func BusinessHandler(deps Dependencies) func(context.Context, domain.Event) {\n    return func(ctx context.Context, e domain.Event) {\n        logger := deps.Logger.With(\"handler\", \"BusinessHandler\")\n\n        // 1. Type assertion\n        evt, ok := e.(SpecificEvent)\n        if !ok {\n            logger.Error(\"unexpected event type\", \"event\", e)\n            return\n        }\n\n        // 2. Business logic\n        logger.Info(\"processing event\", \"event\", evt)\n\n        // 3. Emit next event\n        _ = deps.EventBus.Publish(ctx, NextEvent{})\n    }\n}\n</code></pre>"},{"location":"refactoring/event-driven-architecture.html#2-dependency-injection","title":"2. Dependency Injection","text":"<ul> <li>Inject all dependencies (logger, event bus, services)</li> <li>Use interfaces for testability</li> <li>Follow dependency inversion principle</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#3-error-handling","title":"3. Error Handling","text":"<ul> <li>Log errors with context</li> <li>Don't panic on unexpected events</li> <li>Consider retry strategies for transient failures</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#4-testing","title":"4. Testing","text":"<ul> <li>Use mocks for external dependencies</li> <li>Test event flow end-to-end</li> <li>Verify event emissions</li> <li>Test error scenarios</li> </ul>"},{"location":"refactoring/event-driven-architecture.html#migration-from-previous-architecture","title":"Migration from Previous Architecture","text":""},{"location":"refactoring/event-driven-architecture.html#changes-made","title":"Changes Made","text":"<ol> <li>Decoupled conversion from payment: Conversion no longer triggers payment</li> <li>Added business validation after conversion: All checks in account currency</li> <li>Introduced generic conversion events: Reusable across operations</li> <li>Added business-specific conversion done handlers: Context-aware operations</li> <li>Updated event flow: Clear separation of concerns</li> </ol>"},{"location":"refactoring/event-driven-architecture.html#benefits-achieved","title":"Benefits Achieved","text":"<ul> <li>Correctness: All validations in correct currency</li> <li>Flexibility: Payment triggered by business validation</li> <li>Reusability: Generic conversion logic</li> <li>Maintainability: Clear event flow and responsibilities</li> </ul> <p>This architecture provides a solid foundation for multi-currency financial operations while maintaining clean separation of concerns and enabling future extensibility.</p>"},{"location":"refactoring/event-driven-deposit-flow.html","title":"\u26a1 Event-Driven Deposit Flow","text":"<p>This document describes the current event-driven architecture for the deposit workflow in the fintech system.</p>"},{"location":"refactoring/event-driven-deposit-flow.html#overview","title":"\ud83c\udfc1 Overview","text":"<p>The deposit process is fully event-driven, with each business step handled by a dedicated event handler. This enables modularity, testability, and clear separation of concerns.</p>"},{"location":"refactoring/event-driven-deposit-flow.html#current-event-flow","title":"\ud83d\uddbc\ufe0f Current Event Flow","text":"<p>```mermaid sequenceDiagram     participant U as \"User\"     participant API as \"API Handler\"     participant EB as \"EventBus\"     participant VH as \"DepositValidationHandler\"     participant DC as \"DepositConversionHandler\"     participant DCD as \"DepositConversionDone\"     participant PI as \"PaymentInitiationHandler\"     participant P as \"PersistenceHandler\"</p> <pre><code>U-&gt;&gt;API: POST /account/:id/deposit (DepositRequest)\nAPI-&gt;&gt;EB: DepositRequestedEvent\nEB-&gt;&gt;VH: DepositValidationHandler\nVH-&gt;&gt;EB: DepositValidatedEvent\nEB-&gt;&gt;DC: DepositConversionHandler (if needed)\nDC-&gt;&gt;EB: DepositConversionDone\nEB-&gt;&gt;PI: PaymentInitiationHandler\nPI-&gt;&gt;EB: PaymentInitiatedEvent\nEB-&gt;&gt;P: PersistenceHandler\nP-&gt;&gt;EB: DepositPersistedEvent\n</code></pre> <p>```</p>"},{"location":"refactoring/event-driven-deposit-flow.html#current-workflow-event-chain","title":"\ud83d\udd04 Current Workflow: Event Chain","text":"<p>The deposit workflow follows this event chain:</p> <ol> <li><code>DepositRequestedEvent</code> \u2192 ValidationHandler</li> <li><code>DepositValidatedEvent</code> \u2192 PersistenceHandler</li> <li><code>DepositPersistedEvent</code> \u2192 ConversionHandler (if currency conversion needed)</li> <li><code>DepositBusinessValidationEvent</code> \u2192 BusinessValidationHandler</li> <li><code>DepositBusinessValidatedEvent</code> \u2192 PaymentInitiationHandler</li> <li><code>PaymentInitiatedEvent</code> \u2192 PaymentPersistenceHandler</li> <li><code>PaymentIdPersistedEvent</code> \u2192 (End of flow)</li> </ol>"},{"location":"refactoring/event-driven-deposit-flow.html#updated-deposit-workflow-diagram","title":"\ud83d\uddbc\ufe0f Updated Deposit Workflow Diagram","text":"<p><code>mermaid flowchart TD     A[DepositRequestedEvent] --&gt; B[ValidationHandler]     B --&gt; C[DepositValidatedEvent]     C --&gt; D[PersistenceHandler]     D --&gt; E[DepositPersistedEvent]     E --&gt; F{Currency Conversion Needed?}     F --&gt;|Yes| G[ConversionRequestedEvent]     F --&gt;|No| H[DepositBusinessValidationEvent]     G --&gt; I[ConversionHandler]     I --&gt; H     H --&gt; J[BusinessValidationHandler]     J --&gt; K[DepositBusinessValidatedEvent]     K --&gt; L[PaymentInitiationHandler]     L --&gt; M[PaymentInitiatedEvent]     M --&gt; N[PaymentPersistenceHandler]     N --&gt; O[PaymentIdPersistedEvent]</code></p>"},{"location":"refactoring/event-driven-deposit-flow.html#handler-responsibilities","title":"\ud83e\udde9 Handler Responsibilities","text":""},{"location":"refactoring/event-driven-deposit-flow.html#1-validation-handler-pkghandleraccountdepositvalidationgo","title":"1. Validation Handler (<code>pkg/handler/account/deposit/validation.go</code>)","text":"<ul> <li>Purpose: Validates deposit request and account ownership</li> <li>Events Consumed: <code>DepositRequestedEvent</code></li> <li>Events Emitted: <code>DepositValidatedEvent</code></li> <li>Validation Rules:</li> <li>Account exists and belongs to user</li> <li>Deposit amount is positive</li> <li>Account is in valid state for deposits</li> </ul>"},{"location":"refactoring/event-driven-deposit-flow.html#2-handleprocessed-handler-pkghandleraccountdepositpersistencego","title":"2. HandleProcessed Handler (<code>pkg/handler/account/deposit/persistence.go</code>)","text":"<ul> <li>Purpose: Persists deposit transaction to database</li> <li>Events Consumed: <code>DepositValidatedEvent</code></li> <li>Events Emitted:</li> <li><code>DepositPersistedEvent</code></li> <li><code>ConversionRequestedEvent</code> (if currency conversion needed)</li> <li>Operations:</li> <li>Creates transaction record with \"created\" status</li> <li>Emits conversion request if deposit currency differs from account currency</li> </ul>"},{"location":"refactoring/event-driven-deposit-flow.html#3-business-validation-handler-pkghandleraccountdepositbusiness_validationgo","title":"3. Business Validation Handler (<code>pkg/handler/account/deposit/business_validation.go</code>)","text":"<ul> <li>Purpose: Performs final business validation after currency conversion</li> <li>Events Consumed: <code>DepositBusinessValidationEvent</code></li> <li>Events Emitted: <code>PaymentInitiationEvent</code></li> <li>Validation Rules:</li> <li>Re-validates account ownership with converted amount</li> <li>Ensures business rules are met in account currency</li> </ul>"},{"location":"refactoring/event-driven-deposit-flow.html#4-payment-initiation-handler-pkghandlerpaymentinitiationgo","title":"4. Payment Initiation Handler (<code>pkg/handler/payment/initiation.go</code>)","text":"<ul> <li>Purpose: Initiates payment with external providers</li> <li>Events Consumed: <code>PaymentInitiationEvent</code></li> <li>Events Emitted: <code>PaymentInitiatedEvent</code></li> <li>Operations:</li> <li>Integrates with payment providers (e.g., Stripe)</li> <li>Creates payment intent/session</li> </ul>"},{"location":"refactoring/event-driven-deposit-flow.html#5-payment-handleprocessed-handler-pkghandlerpaymentpersistencego","title":"5. Payment HandleProcessed Handler (<code>pkg/handler/payment/persistence.go</code>)","text":"<ul> <li>Purpose: Persists payment ID to transaction record</li> <li>Events Consumed: <code>PaymentInitiatedEvent</code></li> <li>Events Emitted: <code>PaymentIdPersistedEvent</code></li> <li>Operations:</li> <li>Updates transaction with payment provider ID</li> <li>Prevents duplicate payment ID persistence</li> </ul>"},{"location":"refactoring/event-driven-deposit-flow.html#key-implementation-details","title":"\ud83d\udee0\ufe0f Key Implementation Details","text":""},{"location":"refactoring/event-driven-deposit-flow.html#event-structure","title":"Event Structure","text":"<p>All deposit events embed the common <code>FlowEvent</code>:</p> <pre><code>type FlowEvent struct {\n    FlowType      string    // \"deposit\"\n    UserID        uuid.UUID\n    AccountID     uuid.UUID\n    CorrelationID uuid.UUID\n}\n</code></pre>"},{"location":"refactoring/event-driven-deposit-flow.html#handler-pattern","title":"Handler Pattern","text":"<p>Each handler follows a consistent pattern:</p> <pre><code>func HandlerName(bus eventbus.Bus, uow repository.UnitOfWork, logger *slog.Logger) func(ctx context.Context, e domain.Event) error {\n    return func(ctx context.Context, e domain.Event) error {\n        log := logger.With(\"handler\", \"HandlerName\", \"event_type\", e.Type())\n\n        // Type assertion\n        event, ok := e.(events.SpecificEvent)\n        if !ok {\n            log.Debug(\"Skipping unexpected event type\")\n            return nil\n        }\n\n        // Business logic\n        // ...\n\n        // Emit next event\n        return bus.Emit(ctx, nextEvent)\n    }\n}\n</code></pre>"},{"location":"refactoring/event-driven-deposit-flow.html#currency-conversion-logic","title":"Currency Conversion Logic","text":"<p>The persistence handler conditionally emits conversion events:</p> <pre><code>// Only emit ConversionRequestedEvent if conversion is needed\nif ve.Account != nil &amp;&amp;\n   ve.Amount.Currency().String() != \"\" &amp;&amp;\n   ve.Account.Currency().String() != \"\" &amp;&amp;\n   ve.Amount.Currency().String() != ve.Account.Currency().String() {\n\n    conversionEvent := events.ConversionRequestedEvent{\n        FlowEvent:     ve.FlowEvent,\n        Amount:        ve.Amount,\n        To:            ve.Account.Currency(),\n        TransactionID: txID,\n    }\n    return bus.Emit(ctx, &amp;conversionEvent)\n}\n</code></pre>"},{"location":"refactoring/event-driven-deposit-flow.html#benefits","title":"\ud83d\udee0\ufe0f Benefits","text":""},{"location":"refactoring/event-driven-deposit-flow.html#1-single-responsibility-principle","title":"1. Single Responsibility Principle","text":"<p>Each handler has one clear responsibility and can be developed/tested independently.</p>"},{"location":"refactoring/event-driven-deposit-flow.html#2-extensibility","title":"2. Extensibility","text":"<p>New handlers can be added without modifying existing code.</p>"},{"location":"refactoring/event-driven-deposit-flow.html#3-testability","title":"3. Testability","text":"<ul> <li>Unit tests for individual handlers</li> <li>E2E tests for complete event chains</li> <li>Easy mocking of dependencies</li> </ul>"},{"location":"refactoring/event-driven-deposit-flow.html#4-traceability","title":"4. Traceability","text":"<ul> <li>Correlation IDs track requests across the entire flow</li> <li>Structured logging with emojis for clarity</li> <li>Complete audit trail through events</li> </ul>"},{"location":"refactoring/event-driven-deposit-flow.html#5-error-handling","title":"5. Error Handling","text":"<ul> <li>Handlers can return errors to stop the flow</li> <li>Failed transactions are logged but don't create invalid state</li> <li>Clear error propagation through the event chain</li> </ul>"},{"location":"refactoring/event-driven-deposit-flow.html#testing-strategy","title":"\ud83e\uddea Testing Strategy","text":""},{"location":"refactoring/event-driven-deposit-flow.html#unit-tests","title":"Unit Tests","text":"<pre><code>func TestValidation(t *testing.T) {\n    // Test individual handler with mocks\n    bus := mocks.NewMockBus(t)\n    uow := mocks.NewMockUnitOfWork(t)\n\n    handler := Validation(bus, uow, logger)\n    err := handler(ctx, depositRequestedEvent)\n\n    assert.NoError(t, err)\n    bus.AssertExpectations(t)\n}\n</code></pre>"},{"location":"refactoring/event-driven-deposit-flow.html#e2e-tests","title":"E2E Tests","text":"<pre><code>func TestDepositE2EEventFlow(t *testing.T) {\n    // Test complete event chain\n    emitted := trackEventEmissions()\n\n    bus.Emit(ctx, events.DepositRequestedEvent{...})\n\n    assert.Equal(t, []string{\n        \"DepositRequestedEvent\",\n        \"DepositValidatedEvent\",\n        \"DepositPersistedEvent\",\n        \"DepositBusinessValidationEvent\",\n        \"DepositBusinessValidatedEvent\",\n        \"PaymentInitiatedEvent\",\n    }, emitted)\n}\n</code></pre>"},{"location":"refactoring/event-driven-deposit-flow.html#error-scenarios","title":"\ud83d\udd27 Error Scenarios","text":""},{"location":"refactoring/event-driven-deposit-flow.html#validation-failures","title":"Validation Failures","text":"<ul> <li>Account not found \u2192 Handler logs error, returns nil (stops flow)</li> <li>Invalid user ID \u2192 Handler logs error, returns validation error</li> <li>Negative amount \u2192 Handler logs error, returns validation error</li> </ul>"},{"location":"refactoring/event-driven-deposit-flow.html#handleprocessed-failures","title":"HandleProcessed Failures","text":"<ul> <li>Database error \u2192 Handler logs error, returns error (stops flow)</li> <li>Transaction creation fails \u2192 Handler logs error, returns error</li> </ul>"},{"location":"refactoring/event-driven-deposit-flow.html#payment-failures","title":"Payment Failures","text":"<ul> <li>Provider error \u2192 Handler logs error, may emit PaymentFailedEvent</li> <li>Network timeout \u2192 Handler logs error, may retry or fail</li> </ul>"},{"location":"refactoring/event-driven-deposit-flow.html#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Event-Driven Architecture</li> <li>Domain Events</li> <li>Event-Driven Withdraw Flow</li> <li>Event-Driven Transfer Flow</li> </ul>"},{"location":"refactoring/event-driven-lessons.html","title":"Event-Driven Architecture: Lessons Learned \ud83d\udcda","text":""},{"location":"refactoring/event-driven-lessons.html#overview","title":"Overview","text":"<p>This document captures the key lessons learned during our event-driven architecture refactor, including the problems we solved and the design decisions that led to our final architecture.</p>"},{"location":"refactoring/event-driven-lessons.html#key-problems-solved","title":"Key Problems Solved","text":""},{"location":"refactoring/event-driven-lessons.html#1-coupling-currency-conversion-with-payment-initiation","title":"1. Coupling Currency Conversion with Payment Initiation","text":"<p>Problem: Original design coupled currency conversion with payment initiation, making it difficult to:</p> <ul> <li>Reuse conversion logic across different operations</li> <li>Test conversion independently</li> <li>Add new business flows without modifying conversion logic</li> <li>Maintain clean separation of concerns</li> </ul> <p>Solution: Decoupled currency conversion as a pure, reusable service:</p> <ul> <li>Conversion events (<code>ConversionRequestedEvent</code>, <code>ConversionDoneEvent</code>) are generic</li> <li>Conversion handler has no business logic or side effects</li> <li>Payment is triggered by business validation, not conversion</li> <li>Each business operation can use conversion without coupling</li> </ul> <p>Benefits:</p> <ul> <li>Reusable conversion logic across deposit, withdraw, transfer</li> <li>Easier to test and mock conversion independently</li> <li>Clear separation between conversion and business logic</li> <li>No code duplication</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#2-business-validation-before-currency-conversion","title":"2. Business Validation Before Currency Conversion","text":"<p>Problem: Business invariants (sufficient funds, limits) were sometimes checked before currency conversion:</p> <ul> <li>Led to incorrect validations when request currency differed from account currency</li> <li>Could bypass limits or allow overdrafts due to currency mismatches</li> <li>Inconsistent validation behavior across operations</li> </ul> <p>Solution: All business validations performed after currency conversion:</p> <ul> <li>Sufficient funds check in account's native currency</li> <li>Maximum/minimum limits in account's native currency</li> <li>All business rules applied to converted amounts</li> <li>Consistent validation regardless of request currency</li> </ul> <p>Benefits:</p> <ul> <li>Accurate validation regardless of request currency</li> <li>Consistent business rule enforcement</li> <li>No currency-related validation bugs</li> <li>Clear audit trail of validation in correct currency</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#3-if-statements-for-control-flow","title":"3. If-Statements for Control Flow","text":"<p>Problem: Using conditional logic in handlers to determine next steps:</p> <ul> <li>Led to complex if-else statements</li> <li>Made handlers harder to test and reason about</li> <li>Violated single responsibility principle</li> <li>Made event flow unclear</li> </ul> <p>Solution: Event chaining with business-specific events:</p> <ul> <li>Each handler emits specific events for next steps</li> <li>No conditional logic in handlers</li> <li>Clear event flow and responsibilities</li> <li>Easy to test individual handlers</li> </ul> <p>Benefits:</p> <ul> <li>No if-else statements for control flow</li> <li>Clear event flow and responsibilities</li> <li>Easy to test individual handlers</li> <li>Follows single responsibility principle</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#4-payment-triggered-by-conversion","title":"4. Payment Triggered by Conversion","text":"<p>Problem: Payment was triggered by conversion completion, not business validation:</p> <ul> <li>Payment could occur before all business rules were validated</li> <li>Unclear audit trail of validation \u2192 payment flow</li> <li>Difficult to add new payment triggers</li> </ul> <p>Solution: Payment triggered by business validation events:</p> <ul> <li><code>WithdrawValidatedEvent</code> triggers payment for withdrawals</li> <li><code>DepositValidatedEvent</code> triggers payment for deposits</li> <li>Business validation ensures all rules pass before payment</li> <li>Clear separation between validation and payment</li> </ul> <p>Benefits:</p> <ul> <li>Payment only occurs after all validations pass</li> <li>Clear audit trail of validation \u2192 payment flow</li> <li>Easier to add new payment triggers</li> <li>Better error handling and rollback capabilities</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#design-decisions-and-motivations","title":"Design Decisions and Motivations","text":""},{"location":"refactoring/event-driven-lessons.html#1-generic-vs-business-specific-events","title":"1. Generic vs Business-Specific Events","text":"<p>Decision: Use both generic and business-specific events</p> <p>Generic Events (reusable):</p> <ul> <li><code>ConversionRequestedEvent</code></li> <li><code>ConversionDoneEvent</code></li> </ul> <p>Business-Specific Events (context-aware):</p> <ul> <li><code>DepositConversionDoneEvent</code></li> <li><code>WithdrawConversionDoneEvent</code></li> <li><code>TransferConversionDoneEvent</code></li> </ul> <p>Motivation:</p> <ul> <li>Generic events for reusable logic (conversion)</li> <li>Business-specific events for context-aware operations</li> <li>Clear event hierarchy and responsibilities</li> <li>Avoid if-statements for control flow</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#2-event-chaining-pattern","title":"2. Event Chaining Pattern","text":"<p>Decision: Use event chaining for dependent business logic</p> <p>Pattern:</p> <pre><code>User Request \u2192 Validation \u2192 Conversion (if needed) \u2192 Business Validation \u2192 Payment/Domain Op \u2192 HandleProcessed\n</code></pre> <p>Motivation:</p> <ul> <li>Each handler has a single responsibility</li> <li>Clear flow of dependent operations</li> <li>Easy to test individual steps</li> <li>No orchestration logic in handlers</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#3-dependency-injection","title":"3. Dependency Injection","text":"<p>Decision: Inject all dependencies into handlers</p> <p>Pattern:</p> <pre><code>func BusinessHandler(deps Dependencies) func(context.Context, domain.Event)\n</code></pre> <p>Motivation:</p> <ul> <li>Easy to test with mocks</li> <li>Clear dependencies</li> <li>Follows dependency inversion principle</li> <li>Consistent across all handlers</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#4-structured-logging","title":"4. Structured Logging","text":"<p>Decision: Use structured logging with context in all handlers</p> <p>Pattern:</p> <pre><code>logger := deps.Logger.With(\"handler\", \"BusinessHandler\")\nlogger.Info(\"processing event\", \"event\", evt)\n</code></pre> <p>Motivation:</p> <ul> <li>Clear audit trail</li> <li>Easy debugging</li> <li>Consistent observability</li> <li>Production-ready logging</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#architecture-benefits-achieved","title":"Architecture Benefits Achieved","text":""},{"location":"refactoring/event-driven-lessons.html#1-maintainability","title":"1. Maintainability","text":"<ul> <li>Clear separation of concerns</li> <li>Each handler has a single responsibility</li> <li>Easy to modify individual components</li> <li>No hidden dependencies</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#2-testability","title":"2. Testability","text":"<ul> <li>Each handler can be tested in isolation</li> <li>Mock dependencies easily injected</li> <li>Event-driven testing patterns</li> <li>Clear test boundaries</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#3-scalability","title":"3. Scalability","text":"<ul> <li>Handlers can be scaled independently</li> <li>Event bus can be distributed</li> <li>Easy to add new business operations</li> <li>No tight coupling</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#4-flexibility","title":"4. Flexibility","text":"<ul> <li>New currencies can be added without changing business logic</li> <li>New payment providers can be integrated easily</li> <li>Business rules can be modified independently</li> <li>Clear extension points</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#5-observability","title":"5. Observability","text":"<ul> <li>Clear event flow for debugging</li> <li>Structured logging at each step</li> <li>Audit trail of all operations</li> <li>Easy to monitor and alert</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#migration-strategy","title":"Migration Strategy","text":""},{"location":"refactoring/event-driven-lessons.html#phase-1-introduce-generic-conversion-events","title":"Phase 1: Introduce Generic Conversion Events","text":"<ol> <li>Create <code>ConversionRequestedEvent</code> and <code>ConversionDoneEvent</code></li> <li>Implement generic conversion handler</li> <li>Update existing handlers to emit generic conversion events</li> </ol>"},{"location":"refactoring/event-driven-lessons.html#phase-2-add-business-specific-conversion-done-handlers","title":"Phase 2: Add Business-Specific Conversion Done Handlers","text":"<ol> <li>Create business-specific conversion done events</li> <li>Implement handlers for each business operation</li> <li>Wire handlers in event bus</li> </ol>"},{"location":"refactoring/event-driven-lessons.html#phase-3-decouple-payment-from-conversion","title":"Phase 3: Decouple Payment from Conversion","text":"<ol> <li>Move payment initiation to business validation handlers</li> <li>Update event flow to trigger payment after validation</li> <li>Test all flows end-to-end</li> </ol>"},{"location":"refactoring/event-driven-lessons.html#phase-4-update-validation-logic","title":"Phase 4: Update Validation Logic","text":"<ol> <li>Ensure all validations happen after conversion</li> <li>Update business rules to work with converted amounts</li> <li>Add comprehensive tests for multi-currency scenarios</li> </ol>"},{"location":"refactoring/event-driven-lessons.html#best-practices-established","title":"Best Practices Established","text":""},{"location":"refactoring/event-driven-lessons.html#1-event-handler-structure","title":"1. Event Handler Structure","text":"<pre><code>func BusinessHandler(deps Dependencies) func(context.Context, domain.Event) {\n    return func(ctx context.Context, e domain.Event) {\n        logger := deps.Logger.With(\"handler\", \"BusinessHandler\")\n\n        // 1. Type assertion\n        evt, ok := e.(SpecificEvent)\n        if !ok {\n            logger.Error(\"unexpected event type\", \"event\", e)\n            return\n        }\n\n        // 2. Business logic\n        logger.Info(\"processing event\", \"event\", evt)\n\n        // 3. Emit next event\n        _ = deps.EventBus.Publish(ctx, NextEvent{})\n    }\n}\n</code></pre>"},{"location":"refactoring/event-driven-lessons.html#2-error-handling","title":"2. Error Handling","text":"<ul> <li>Log errors with context</li> <li>Don't panic on unexpected events</li> <li>Consider retry strategies for transient failures</li> <li>Emit failure events when appropriate</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#3-testing","title":"3. Testing","text":"<ul> <li>Use mocks for external dependencies</li> <li>Test event flow end-to-end</li> <li>Verify event emissions</li> <li>Test error scenarios</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#4-documentation","title":"4. Documentation","text":"<ul> <li>Document event flows clearly</li> <li>Explain handler responsibilities</li> <li>Provide examples and diagrams</li> <li>Keep documentation up to date</li> </ul>"},{"location":"refactoring/event-driven-lessons.html#final-thoughts","title":"Final Thoughts","text":"<p>The event-driven architecture refactor has significantly improved our codebase by:</p> <ol> <li>Eliminating coupling between currency conversion and payment processing</li> <li>Ensuring correct validation by performing all checks after currency conversion</li> <li>Removing if-statements for control flow through event chaining</li> <li>Improving testability through dependency injection and clear boundaries</li> <li>Enabling flexibility for future extensions and new business operations</li> </ol> <p>The key insight was that currency conversion should be a pure, reusable service that doesn't trigger business operations, while business validation should always happen after conversion to ensure accuracy. This separation enables a clean, maintainable, and extensible architecture for multi-currency financial operations.</p>"},{"location":"refactoring/event-driven-lessons.html#next-steps","title":"Next Steps","text":"<ol> <li>Complete the refactor for withdraw and transfer validation handlers</li> <li>Add comprehensive tests for all event flows</li> <li>Update documentation with final architecture diagrams</li> <li>Monitor performance and optimize as needed</li> <li>Plan future extensions using the established patterns</li> </ol>"},{"location":"refactoring/event-driven-simplicity.html","title":"Event-Driven Simplicity Refactor Plan","text":""},{"location":"refactoring/event-driven-simplicity.html#goal","title":"Goal","text":"<p>Achieve a simple, maintainable, and robust event-driven architecture by:</p> <ul> <li>Eliminating switch/case control flow in event dispatching</li> <li>Preventing infinite event loops</li> <li>Enforcing single-responsibility handlers</li> <li>Documenting event chains for clarity</li> </ul>"},{"location":"refactoring/event-driven-simplicity.html#refactor-steps","title":"Refactor Steps","text":""},{"location":"refactoring/event-driven-simplicity.html#1-replace-switchcase-with-event-handler-registry","title":"1. Replace Switch/Case with Event Handler Registry","text":"<ul> <li>Before:   Event dispatch uses switch/case or if/else to route events.</li> <li>After:   Use a registry:</li> </ul> <pre><code>map[EventType][]HandlerFunc\n</code></pre> <ul> <li>Handlers are registered for each event type.</li> <li>On event emission, all registered handlers are invoked.</li> </ul>"},{"location":"refactoring/event-driven-simplicity.html#2-guard-against-infinite-event-loops","title":"2. Guard Against Infinite Event Loops","text":"<ul> <li>Add a propagation context or depth counter to each event.</li> <li>Limit event chain depth or track event IDs to prevent re-processing.</li> <li>Optionally, use middleware to wrap handlers with loop protection.</li> </ul>"},{"location":"refactoring/event-driven-simplicity.html#3-enforce-single-responsibility-in-handlers","title":"3. Enforce Single Responsibility in Handlers","text":"<ul> <li>Each handler should:</li> <li>Handle one event type</li> <li>Perform one business action</li> <li>Optionally emit one follow-up event</li> <li>Split complex handlers into smaller, focused ones.</li> </ul>"},{"location":"refactoring/event-driven-simplicity.html#4-document-and-visualize-event-chains","title":"4. Document and Visualize Event Chains","text":"<ul> <li>Use Mermaid diagrams or sequence charts to show event flows.</li> <li>Document which events trigger which handlers and what follow-up events are emitted.</li> </ul>"},{"location":"refactoring/event-driven-simplicity.html#event-flow-example","title":"\ud83d\uddbc\ufe0f Event Flow Example","text":"<p>```mermaid flowchart TD     A[\"DepositInitiated Event\"] --&gt; B[\"DepositValidationHandler\"]     B --&gt; C[\"DepositPersistenceHandler\"]     C --&gt; D[\"DepositConversionHandler\"]     D --&gt; E[\"DepositCompletedHandler\"]</p> <pre><code>subgraph Legend\n  direction LR\n  L1[\"Event\"] -- triggers --&gt; L2[\"Handler\"]\nend\n\nstyle A fill:#f9f,stroke:#333,stroke-width:2px\nstyle B fill:#bbf,stroke:#333,stroke-width:2px\nstyle C fill:#bbf,stroke:#333,stroke-width:2px\nstyle D fill:#bbf,stroke:#333,stroke-width:2px\nstyle E fill:#bbf,stroke:#333,stroke-width:2px\nstyle Legend fill:#fff,stroke:#333,stroke-width:1px\n</code></pre> <p>```</p>"},{"location":"refactoring/event-driven-simplicity.html#5-refactor-event-bus-interface","title":"5. Refactor Event Bus Interface","text":"<ul> <li>Define an interface in <code>pkg/eventbus</code>:</li> </ul> <pre><code>type EventBus interface {\n    Register(eventType string, handler HandlerFunc)\n    Emit(ctx context.Context, event Event) error\n}\n</code></pre> <ul> <li>Implement the registry pattern in <code>infra/eventbus</code>.</li> </ul>"},{"location":"refactoring/event-driven-simplicity.html#6-testing-and-validation","title":"6. Testing and Validation","text":"<ul> <li>Write tests for:</li> <li>Event registration and dispatch</li> <li>Loop protection</li> <li>Event chain correctness</li> </ul>"},{"location":"refactoring/event-driven-simplicity.html#example-event-handler-registry","title":"Example: Event Handler Registry","text":"<pre><code>type HandlerFunc func(ctx context.Context, event Event) error\n\ntype EventBus struct {\n    handlers map[string][]HandlerFunc\n}\n\nfunc (eb *EventBus) Register(eventType string, handler HandlerFunc) {\n    eb.handlers[eventType] = append(eb.handlers[eventType], handler)\n}\n\nfunc (eb *EventBus) Emit(ctx context.Context, event Event) error {\n    for _, handler := range eb.handlers[event.Type()] {\n        if err := handler(ctx, event); err != nil {\n            return err\n        }\n    }\n    return nil\n}\n</code></pre>"},{"location":"refactoring/event-driven-simplicity.html#next-steps","title":"Next Steps","text":"<ol> <li>Refactor event dispatch to use a registry.</li> <li>Add loop protection/context to events.</li> <li>Refactor handlers for single responsibility.</li> <li>Document event flows.</li> <li>Update tests.</li> </ol>"},{"location":"refactoring/event-driven-transfer-flow.html","title":"\u26a1 Event-Driven Transfer Flow","text":""},{"location":"refactoring/event-driven-transfer-flow.html#problems-lessons-learned","title":"\ud83d\udea9 Problems &amp; Lessons Learned","text":""},{"location":"refactoring/event-driven-transfer-flow.html#problem-coupling-conversion-with-payment-initiation","title":"Problem: Coupling Conversion with Payment Initiation","text":"<ul> <li>Original Issue: The initial design reused the same CurrencyConversionRequested/CurrencyConversionDone events for all flows (deposit, withdraw, transfer).</li> <li>Consequence: This led to payment initiation being triggered after every currency conversion, even for internal transfers where no payment should occur.</li> <li>Risk: Unintended or duplicate payments, confusion, and tightly coupled business logic.</li> </ul>"},{"location":"refactoring/event-driven-transfer-flow.html#problem-if-statements-for-control-flow","title":"Problem: If-Statements for Control Flow","text":"<ul> <li>Original Issue: To avoid triggering payment for transfers, handlers would check a 'purpose' field or similar, leading to if-else logic in event handlers.</li> <li>Consequence: This is error-prone, hard to maintain, and against our clean architecture principles.</li> </ul>"},{"location":"refactoring/event-driven-transfer-flow.html#refined-pattern-distinct-event-types","title":"\ud83d\udee0\ufe0f Refined Pattern: Distinct Event Types","text":"<ul> <li>Solution: Use distinct event types for each business flow (e.g., DepositConversionRequested, TransferConversionRequested, etc.).</li> <li>Result:</li> <li>Each handler only subscribes to the events it cares about.</li> <li>No if-statements needed for control flow.</li> <li>No accidental cross-flow handling or unintended payments.</li> <li>Clear, decoupled, and extensible event chains.</li> </ul>"},{"location":"refactoring/event-driven-transfer-flow.html#overview","title":"\ud83c\udfc1 Overview","text":"<p>The transfer process is fully event-driven, with each business step handled by a dedicated event handler. This enables modularity, testability, and clear separation of concerns, following the same principles as the deposit and withdraw flows.</p>"},{"location":"refactoring/event-driven-transfer-flow.html#sequence-diagram","title":"\ud83d\uddbc\ufe0f Sequence Diagram","text":"<p>```mermaid sequenceDiagram     participant U as \"User\"     participant API as \"API Handler\"     participant EB as \"EventBus\"     participant VH as \"TransferValidationHandler\"     participant TC as \"TransferConversionHandler\"     participant TCD as \"TransferConversionDone\"     participant DO as \"DomainOpHandler\"     participant P as \"PersistenceHandler\"</p> <pre><code>U-&gt;&gt;API: POST /account/:id/transfer (TransferRequest)\nAPI-&gt;&gt;EB: TransferRequestedEvent\nEB-&gt;&gt;VH: TransferValidationHandler\nVH-&gt;&gt;EB: TransferValidatedEvent\nEB-&gt;&gt;TC: TransferConversionHandler (if needed)\nTC-&gt;&gt;EB: TransferConversionDone\nEB-&gt;&gt;DO: DomainOpHandler (executes transfer on domain)\nDO-&gt;&gt;EB: TransferDomainOpDoneEvent\nEB-&gt;&gt;P: PersistenceHandler (persists to DB)\nP-&gt;&gt;EB: TransferPersistedEvent\n</code></pre> <p>```</p> <p>Note: Payment initiation does NOT happen after TransferConversionDone. This avoids accidental payments for internal transfers.</p>"},{"location":"refactoring/event-driven-transfer-flow.html#workflow-clarification-event-driven-transfer-flow","title":"\ud83d\udd04 Workflow Clarification: Event-Driven Transfer Flow","text":"<p>The transfer workflow is orchestrated through a series of events and handlers:</p> <ol> <li>User submits transfer request (amount as <code>float64</code>, main unit). API emits <code>TransferRequestedEvent</code>.</li> <li>Validation Handler loads source and target accounts, checks domain validation (<code>ValidateTransfer</code>), emits <code>TransferValidatedEvent</code>.</li> <li>Transfer Conversion Handler (if needed) converts currency, emits <code>TransferConversionDone</code>.</li> <li>Domain Operation Handler executes the transfer on the domain model, emits <code>TransferDomainOpDoneEvent</code>.</li> <li>HandleProcessed Handler persists the transaction(s), emits <code>TransferPersistedEvent</code>.</li> <li>Webhook Handler (optional) updates transaction status and account balances on payment confirmation.</li> </ol>"},{"location":"refactoring/event-driven-transfer-flow.html#transfer-workflow-diagram","title":"\ud83d\uddbc\ufe0f Transfer Workflow Diagram","text":"<p><code>mermaid flowchart TD     A[\"TransferRequestedEvent\"] --&gt; B[\"Validation Handler (domain validation)\"]     B --&gt; C[\"TransferValidatedEvent\"]     C --&gt; D[\"Transfer Conversion Handler (if needed)\"]     D --&gt; E[\"TransferConversionDone\"]     E --&gt; F[\"Domain Operation Handler\"]     F --&gt; G[\"TransferDomainOpDoneEvent\"]     G --&gt; H[\"HandleProcessed Handler (persists)\"]     H --&gt; I[\"TransferPersistedEvent\"]     I --&gt; J[\"Webhook Handler (optional)\"]</code></p>"},{"location":"refactoring/event-driven-transfer-flow.html#event-driven-components","title":"\ud83e\udde9 Event-Driven Components","text":""},{"location":"refactoring/event-driven-transfer-flow.html#1-validation-handler","title":"1. Validation Handler","text":"<ul> <li>Purpose: Performs business validation on source and target accounts</li> <li>Events Consumed: <code>TransferRequestedEvent</code></li> <li>Events Emitted:</li> <li><code>TransferValidatedEvent</code> - When validation passes</li> <li>(TODO: <code>TransferValidationFailedEvent</code> - When validation fails)</li> <li>Validation Rules:</li> <li>Source and target accounts exist and belong to user</li> <li>Accounts have valid IDs</li> <li>Accounts are in valid state for operations</li> <li>Sufficient balance in source account</li> </ul>"},{"location":"refactoring/event-driven-transfer-flow.html#2-currency-conversion-handler","title":"2. Currency Conversion Handler","text":"<ul> <li>Purpose: Converts currency if source and target accounts use different currencies</li> <li>Events Consumed: <code>MoneyCreatedEvent</code></li> <li>Events Emitted: <code>MoneyConvertedEvent</code></li> </ul>"},{"location":"refactoring/event-driven-transfer-flow.html#3-domain-operation-handler","title":"3. Domain Operation Handler","text":"<ul> <li>Purpose: Executes the transfer on the domain model</li> <li>Events Consumed: <code>MoneyConvertedEvent</code> (or <code>MoneyCreatedEvent</code> if no conversion)</li> <li>Events Emitted: <code>TransferDomainOpDoneEvent</code></li> </ul>"},{"location":"refactoring/event-driven-transfer-flow.html#4-handleprocessed-handler","title":"4. HandleProcessed Handler","text":"<ul> <li>Purpose: Persists the transfer transaction(s) to the database</li> <li>Events Consumed: <code>TransferDomainOpDoneEvent</code></li> <li>Events Emitted: <code>TransferPersistedEvent</code></li> </ul>"},{"location":"refactoring/event-driven-transfer-flow.html#key-benefits","title":"\ud83d\udee0\ufe0f Key Benefits","text":""},{"location":"refactoring/event-driven-transfer-flow.html#1-modularity","title":"1. Modularity","text":"<p>Each handler has a single responsibility and can be developed, tested, and deployed independently.</p>"},{"location":"refactoring/event-driven-transfer-flow.html#2-testability","title":"2. Testability","text":"<ul> <li>Unit tests for each handler</li> <li>Integration tests for event flows</li> <li>Easy mocking of dependencies</li> </ul>"},{"location":"refactoring/event-driven-transfer-flow.html#3-scalability","title":"3. Scalability","text":"<ul> <li>Handlers can be scaled independently</li> <li>Event-driven architecture supports async processing</li> <li>Easy to add new handlers without modifying existing code</li> </ul>"},{"location":"refactoring/event-driven-transfer-flow.html#4-maintainability","title":"4. Maintainability","text":"<ul> <li>Clear separation of concerns</li> <li>Easy to understand and modify individual components</li> <li>Consistent patterns across all handlers</li> </ul>"},{"location":"refactoring/event-driven-transfer-flow.html#5-event-sourcing-ready","title":"5. Event Sourcing Ready","text":"<ul> <li>All business events are captured</li> <li>Easy to implement event sourcing patterns</li> <li>Audit trail of all operations</li> </ul>"},{"location":"refactoring/event-driven-transfer-flow.html#implementation-details","title":"\ud83d\udee0\ufe0f Implementation Details","text":""},{"location":"refactoring/event-driven-transfer-flow.html#validation-handler-pattern","title":"Validation Handler Pattern","text":"<pre><code>// Validation handler listens to transfer request events\nfunc TransferValidationHandler(bus eventbus.EventBus, logger *slog.Logger) func(context.Context, domain.Event) {\n    return func(ctx context.Context, e domain.Event) {\n        event, ok := e.(accountdomain.TransferRequestedEvent)\n        if !ok {\n            return\n        }\n\n        // Perform business validation\n        if validationFails {\n            // TODO: Emit TransferValidationFailedEvent\n            return\n        }\n\n        // Emit validation success\n        _ = bus.Publish(ctx, accountdomain.TransferValidatedEvent{...})\n    }\n}\n</code></pre>"},{"location":"refactoring/event-driven-transfer-flow.html#money-creation-handler-pattern","title":"Money Creation Handler Pattern","text":"<pre><code>// Money creation handler listens to validated transfer events\nfunc MoneyCreationHandler(bus eventbus.EventBus, logger *slog.Logger) func(context.Context, domain.Event) {\n    return func(ctx context.Context, e domain.Event) {\n        event, ok := e.(accountdomain.TransferValidatedEvent)\n        if !ok {\n            return\n        }\n        // Create money.Money object\n        // ...\n        _ = bus.Publish(ctx, accountdomain.MoneyCreatedEvent{...})\n    }\n}\n</code></pre>"},{"location":"refactoring/event-driven-transfer-flow.html#error-handling","title":"\ud83d\udee0\ufe0f Error Handling","text":""},{"location":"refactoring/event-driven-transfer-flow.html#validation-failures","title":"Validation Failures","text":"<ul> <li>Account inactive</li> <li>Insufficient balance</li> <li>Business rule violations</li> <li>Invalid account state</li> </ul>"},{"location":"refactoring/event-driven-transfer-flow.html#event-flow-on-errors","title":"Event Flow on Errors","text":"<ol> <li>Validation handler emits <code>TransferValidationFailedEvent</code> (TODO)</li> <li>Money creation and subsequent handlers are not triggered</li> <li>Error is returned to the caller</li> <li>Audit trail is maintained through events</li> </ol>"},{"location":"refactoring/event-driven-transfer-flow.html#testing-strategy","title":"\ud83e\uddea Testing Strategy","text":""},{"location":"refactoring/event-driven-transfer-flow.html#unit-tests","title":"Unit Tests","text":"<ul> <li>Test each handler independently</li> <li>Mock event bus and dependencies</li> <li>Test success and failure scenarios</li> </ul>"},{"location":"refactoring/event-driven-transfer-flow.html#integration-tests","title":"Integration Tests","text":"<ul> <li>Test complete event flows</li> <li>Use real event bus</li> <li>Verify event sequences</li> </ul>"},{"location":"refactoring/event-driven-transfer-flow.html#end-to-end-tests","title":"End-to-End Tests","text":"<ul> <li>Test full API endpoints</li> <li>Verify business outcomes</li> </ul>"},{"location":"refactoring/event-driven-withdraw-flow.html","title":"\u26a1 Event-Driven Withdraw Flow","text":"<p>This document describes the current event-driven architecture for the withdraw workflow in the fintech system.</p>"},{"location":"refactoring/event-driven-withdraw-flow.html#overview","title":"\ud83c\udfc1 Overview","text":"<p>The withdraw process is fully event-driven, with each business step handled by a dedicated event handler. This enables modularity, testability, and clear separation of concerns, following the same principles as the deposit flow.</p>"},{"location":"refactoring/event-driven-withdraw-flow.html#current-event-flow","title":"\ud83d\uddbc\ufe0f Current Event Flow","text":"<p>```mermaid sequenceDiagram     participant U as \"User\"     participant API as \"API Handler\"     participant EB as \"EventBus\"     participant VH as \"WithdrawValidationHandler\"     participant WC as \"WithdrawConversionHandler\"     participant WCD as \"WithdrawConversionDone\"     participant PI as \"PaymentInitiationHandler\"     participant P as \"PersistenceHandler\"</p> <pre><code>U-&gt;&gt;API: POST /account/:id/withdraw (WithdrawRequest)\nAPI-&gt;&gt;EB: WithdrawRequestedEvent\nEB-&gt;&gt;VH: WithdrawValidationHandler\nVH-&gt;&gt;EB: WithdrawValidatedEvent\nEB-&gt;&gt;WC: WithdrawConversionHandler (if needed)\nWC-&gt;&gt;EB: WithdrawConversionDone\nEB-&gt;&gt;PI: PaymentInitiationHandler\nPI-&gt;&gt;EB: PaymentInitiatedEvent\nEB-&gt;&gt;P: PersistenceHandler\nP-&gt;&gt;EB: WithdrawPersistedEvent\n</code></pre> <p>```</p>"},{"location":"refactoring/event-driven-withdraw-flow.html#current-workflow-event-chain","title":"\ud83d\udd04 Current Workflow: Event Chain","text":"<p>The withdraw workflow follows this event chain:</p> <ol> <li><code>WithdrawRequestedEvent</code> \u2192 ValidationHandler</li> <li><code>WithdrawValidatedEvent</code> \u2192 PersistenceHandler</li> <li><code>WithdrawPersistedEvent</code> \u2192 ConversionHandler</li> <li><code>WithdrawBusinessValidationEvent</code> \u2192 BusinessValidationHandler</li> <li><code>WithdrawBusinessValidatedEvent</code> \u2192 PaymentInitiationHandler</li> <li><code>PaymentInitiatedEvent</code> \u2192 PaymentPersistenceHandler</li> <li><code>PaymentIdPersistedEvent</code> \u2192 (End of flow)</li> </ol>"},{"location":"refactoring/event-driven-withdraw-flow.html#event-flow-diagram","title":"\ud83d\uddbc\ufe0f Event Flow Diagram","text":"<p><code>mermaid flowchart TD     A[WithdrawRequestedEvent] --&gt; B[ValidationHandler]     B --&gt; C[WithdrawValidatedEvent]     C --&gt; D[PersistenceHandler]     D --&gt; E[WithdrawPersistedEvent]     E --&gt; F[ConversionRequestedEvent]     F --&gt; G[ConversionHandler]     G --&gt; H[WithdrawBusinessValidationEvent]     H --&gt; I[BusinessValidationHandler]     I --&gt; J[WithdrawBusinessValidatedEvent]     J --&gt; K[PaymentInitiationHandler]     K --&gt; L[PaymentInitiatedEvent]     L --&gt; M[PaymentPersistenceHandler]     M --&gt; N[PaymentIdPersistedEvent]</code></p>"},{"location":"refactoring/event-driven-withdraw-flow.html#handler-responsibilities","title":"\ud83e\udde9 Handler Responsibilities","text":""},{"location":"refactoring/event-driven-withdraw-flow.html#1-validation-handler-pkghandleraccountwithdrawvalidationgo","title":"1. Validation Handler (<code>pkg/handler/account/withdraw/validation.go</code>)","text":"<ul> <li>Purpose: Validates withdraw request and account ownership</li> <li>Events Consumed: <code>WithdrawRequestedEvent</code></li> <li>Events Emitted:</li> <li><code>WithdrawValidatedEvent</code> (success)</li> <li><code>WithdrawFailedEvent</code> (failure)</li> <li>Validation Rules:</li> <li>Account exists and belongs to user</li> <li>Withdraw amount is positive</li> <li>Account has sufficient balance</li> <li>Account is in valid state for withdrawals</li> </ul>"},{"location":"refactoring/event-driven-withdraw-flow.html#2-handleprocessed-handler-pkghandleraccountwithdrawpersistencego","title":"2. HandleProcessed Handler (<code>pkg/handler/account/withdraw/persistence.go</code>)","text":"<ul> <li>Purpose: Persists withdraw transaction to database</li> <li>Events Consumed: <code>WithdrawValidatedEvent</code></li> <li>Events Emitted:</li> <li><code>WithdrawPersistedEvent</code></li> <li><code>ConversionRequestedEvent</code> (always emitted for withdraw)</li> <li>Operations:</li> <li>Creates transaction record with \"created\" status</li> <li>Always emits conversion request for withdraw flow</li> </ul>"},{"location":"refactoring/event-driven-withdraw-flow.html#3-business-validation-handler-pkghandleraccountwithdrawbusiness_validationgo","title":"3. Business Validation Handler (<code>pkg/handler/account/withdraw/business_validation.go</code>)","text":"<ul> <li>Purpose: Performs final business validation after currency conversion</li> <li>Events Consumed: <code>WithdrawBusinessValidationEvent</code></li> <li>Events Emitted: <code>WithdrawBusinessValidatedEvent</code></li> <li>Validation Rules:</li> <li>Re-validates account ownership</li> <li>Checks sufficient balance with converted amount</li> <li>Ensures business rules are met in account currency</li> </ul>"},{"location":"refactoring/event-driven-withdraw-flow.html#4-payment-initiation-handler-pkghandlerpaymentinitiationgo","title":"4. Payment Initiation Handler (<code>pkg/handler/payment/initiation.go</code>)","text":"<ul> <li>Purpose: Initiates payment with external providers</li> <li>Events Consumed: <code>PaymentInitiationEvent</code> (from withdraw business validated)</li> <li>Events Emitted: <code>PaymentInitiatedEvent</code></li> <li>Operations:</li> <li>Integrates with payment providers (e.g., Stripe)</li> <li>Creates payment intent for withdrawal</li> </ul>"},{"location":"refactoring/event-driven-withdraw-flow.html#5-payment-handleprocessed-handler-pkghandlerpaymentpersistencego","title":"5. Payment HandleProcessed Handler (<code>pkg/handler/payment/persistence.go</code>)","text":"<ul> <li>Purpose: Persists payment ID to transaction record</li> <li>Events Consumed: <code>PaymentInitiatedEvent</code></li> <li>Events Emitted: <code>PaymentIdPersistedEvent</code></li> <li>Operations:</li> <li>Updates transaction with payment provider ID</li> <li>Prevents duplicate payment ID persistence</li> </ul>"},{"location":"refactoring/event-driven-withdraw-flow.html#key-implementation-details","title":"\ud83d\udee0\ufe0f Key Implementation Details","text":""},{"location":"refactoring/event-driven-withdraw-flow.html#event-structure","title":"Event Structure","text":"<p>All withdraw events embed the common <code>FlowEvent</code>:</p> <pre><code>type FlowEvent struct {\n    FlowType      string    // \"withdraw\"\n    UserID        uuid.UUID\n    AccountID     uuid.UUID\n    CorrelationID uuid.UUID\n}\n</code></pre>"},{"location":"refactoring/event-driven-withdraw-flow.html#withdraw-specific-events","title":"Withdraw-Specific Events","text":"<pre><code>type WithdrawRequestedEvent struct {\n    FlowEvent\n    ID                    uuid.UUID\n    Amount                money.Money\n    BankAccountNumber     string\n    RoutingNumber         string\n    ExternalWalletAddress string\n    Timestamp             time.Time\n    PaymentID             string\n}\n\ntype WithdrawValidatedEvent struct {\n    WithdrawRequestedEvent\n    TargetCurrency string\n    Account        *account.Account\n}\n\ntype WithdrawPersistedEvent struct {\n    WithdrawValidatedEvent\n    TransactionID uuid.UUID\n}\n</code></pre>"},{"location":"refactoring/event-driven-withdraw-flow.html#validation-logic","title":"Validation Logic","text":"<p>The validation handler performs comprehensive checks:</p> <pre><code>func (a *Account) ValidateWithdraw(userID uuid.UUID, amount money.Money) error {\n    if a.UserID != userID {\n        return ErrNotOwner\n    }\n    if err := a.validateAmount(amount); err != nil {\n        return err\n    }\n    // Check sufficient funds\n    hasEnough, err := a.Balance.GreaterThan(amount)\n    if err != nil {\n        return err\n    }\n    if !hasEnough &amp;&amp; !a.Balance.Equals(amount) {\n        return ErrInsufficientFunds\n    }\n    return nil\n}\n</code></pre>"},{"location":"refactoring/event-driven-withdraw-flow.html#handleprocessed-with-conversion","title":"HandleProcessed with Conversion","text":"<p>The persistence handler always emits conversion events for withdrawals:</p> <pre><code>// Always emit ConversionRequested for withdraw flow\nconversionEvent := events.ConversionRequestedEvent{\n    FlowEvent:     ve.FlowEvent,\n    Amount:        ve.Amount,\n    To:            ve.Account.Currency(),\n    TransactionID: txID,\n}\nreturn bus.Emit(ctx, &amp;conversionEvent)\n</code></pre>"},{"location":"refactoring/event-driven-withdraw-flow.html#benefits","title":"\ud83d\udee0\ufe0f Benefits","text":""},{"location":"refactoring/event-driven-withdraw-flow.html#1-consistent-pattern-with-deposit","title":"1. Consistent Pattern with Deposit","text":"<p>Follows the same event-driven pattern as deposit flow for consistency.</p>"},{"location":"refactoring/event-driven-withdraw-flow.html#2-balance-validation","title":"2. Balance Validation","text":"<p>Ensures sufficient funds before processing withdrawal.</p>"},{"location":"refactoring/event-driven-withdraw-flow.html#3-currency-conversion","title":"3. Currency Conversion","text":"<p>Handles multi-currency withdrawals through conversion events.</p>"},{"location":"refactoring/event-driven-withdraw-flow.html#4-payment-integration","title":"4. Payment Integration","text":"<p>Seamlessly integrates with external payment providers.</p>"},{"location":"refactoring/event-driven-withdraw-flow.html#5-audit-trail","title":"5. Audit Trail","text":"<p>Complete event history for compliance and debugging.</p>"},{"location":"refactoring/event-driven-withdraw-flow.html#testing-strategy","title":"\ud83e\uddea Testing Strategy","text":""},{"location":"refactoring/event-driven-withdraw-flow.html#unit-tests","title":"Unit Tests","text":"<pre><code>func TestWithdrawValidation(t *testing.T) {\n    // Test validation with insufficient funds\n    bus := mocks.NewMockBus(t)\n\n    handler := Validation(bus, uow, logger)\n    err := handler(ctx, withdrawRequestedEvent)\n\n    // Should emit WithdrawFailedEvent for insufficient funds\n    bus.AssertCalled(t, \"Emit\", mock.MatchedBy(func(e interface{}) bool {\n        _, ok := e.(events.WithdrawFailedEvent)\n        return ok\n    }))\n}\n</code></pre>"},{"location":"refactoring/event-driven-withdraw-flow.html#e2e-tests","title":"E2E Tests","text":"<pre><code>func TestWithdrawE2EEventFlow(t *testing.T) {\n    emitted := trackEventEmissions()\n\n    bus.Emit(ctx, events.WithdrawRequestedEvent{...})\n\n    assert.Equal(t, []string{\n        \"WithdrawRequestedEvent\",\n        \"WithdrawValidatedEvent\",\n        \"WithdrawPersistedEvent\",\n        \"WithdrawBusinessValidationEvent\",\n        \"WithdrawBusinessValidatedEvent\",\n        \"PaymentInitiatedEvent\",\n    }, emitted)\n}\n</code></pre>"},{"location":"refactoring/event-driven-withdraw-flow.html#error-scenarios","title":"\ud83d\udd27 Error Scenarios","text":""},{"location":"refactoring/event-driven-withdraw-flow.html#validation-failures","title":"Validation Failures","text":"<ul> <li>Insufficient Balance: Handler emits <code>WithdrawFailedEvent</code></li> <li>Account Not Found: Handler logs error, returns nil</li> <li>Wrong User: Handler logs error, returns validation error</li> <li>Invalid Amount: Handler logs error, returns validation error</li> </ul>"},{"location":"refactoring/event-driven-withdraw-flow.html#handleprocessed-failures","title":"HandleProcessed Failures","text":"<ul> <li>Database Error: Handler logs error, returns error (stops flow)</li> <li>Transaction Creation Fails: Handler logs error, returns error</li> </ul>"},{"location":"refactoring/event-driven-withdraw-flow.html#business-validation-failures","title":"Business Validation Failures","text":"<ul> <li>Post-Conversion Balance Check: Handler returns error</li> <li>Account State Changed: Handler returns error</li> </ul>"},{"location":"refactoring/event-driven-withdraw-flow.html#payment-failures","title":"Payment Failures","text":"<ul> <li>Provider Error: Handler logs error, may emit PaymentFailedEvent</li> <li>Network Issues: Handler logs error, may retry or fail</li> </ul>"},{"location":"refactoring/event-driven-withdraw-flow.html#differences-from-deposit-flow","title":"\ud83d\udd04 Differences from Deposit Flow","text":""},{"location":"refactoring/event-driven-withdraw-flow.html#1-balance-validation","title":"1. Balance Validation","text":"<p>Withdraw requires checking sufficient funds, deposit does not.</p>"},{"location":"refactoring/event-driven-withdraw-flow.html#2-always-convert","title":"2. Always Convert","text":"<p>Withdraw always emits conversion events, deposit only when needed.</p>"},{"location":"refactoring/event-driven-withdraw-flow.html#3-payment-direction","title":"3. Payment Direction","text":"<p>Withdraw sends money out, deposit brings money in.</p>"},{"location":"refactoring/event-driven-withdraw-flow.html#4-failure-handling","title":"4. Failure Handling","text":"<p>Withdraw has more failure scenarios due to balance constraints.</p>"},{"location":"refactoring/event-driven-withdraw-flow.html#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Event-Driven Architecture</li> <li>Domain Events</li> <li>Event-Driven Deposit Flow</li> <li>Event-Driven Transfer Flow</li> </ul>"},{"location":"refactoring/layered-dependency-injection.html","title":"Layered Dependency Injection &amp; Dependency Direction in Go","text":""},{"location":"refactoring/layered-dependency-injection.html#overview","title":"Overview","text":"<p>As the fintech project grows, managing dependencies in a scalable, maintainable way becomes critical. This document outlines best practices for layered dependency injection and dependency direction, so that future enhancements can be made with confidence and clarity.</p>"},{"location":"refactoring/layered-dependency-injection.html#why-layered-dependency-injection","title":"Why Layered Dependency Injection?","text":"<ul> <li>Expresses architectural intent: Lower-level components (e.g., DB, UOW) are independent; higher-level components (e.g., EventBus, services) depend on them, not the other way around.</li> <li>Prevents cyclic dependencies: Each layer only depends on the layer below.</li> <li>Improves testability: You can mock or swap out dependencies at each layer.</li> <li>Eases refactoring: Clear boundaries make it easier to change or replace parts of the system.</li> </ul>"},{"location":"refactoring/layered-dependency-injection.html#best-practices","title":"Best Practices","text":"<ol> <li>Construct lower-level dependencies first (e.g., DB, UOW).</li> <li>Pass them to mid-level dependencies (e.g., repositories, services).</li> <li>Pass those to high-level dependencies (e.g., EventBus, HTTP handlers).</li> <li>Each layer only depends on interfaces from the layer below.</li> <li>No cyclic dependencies: Lower-level code never imports or depends on higher-level code.</li> </ol>"},{"location":"refactoring/layered-dependency-injection.html#example-layered-construction","title":"Example: Layered Construction","text":"<pre><code>// 1. Infrastructure\ninfra := InfraDeps{\n    DB:  NewDB(cfg),\n    UOW: NewUnitOfWork(db),\n}\n\n// 2. Domain/Service\nservices := ServiceDeps{\n    Infra:         infra,\n    AccountRepo:   NewAccountRepository(infra.UOW),\n    AccountService: NewAccountService(accountRepo, ...),\n}\n\n// 3. Event Bus\nbus := NewSimpleEventBus(services.AccountService, ...)\n\n// 4. App/HTTP\napp := NewApp(bus, ...)\n</code></pre>"},{"location":"refactoring/layered-dependency-injection.html#example-layered-deps-structs","title":"Example: Layered Deps Structs","text":"<pre><code>type InfraDeps struct {\n    DB  *sql.DB\n    UOW UnitOfWork\n}\n\ntype ServiceDeps struct {\n    Infra InfraDeps\n    AccountRepo AccountRepository\n    AccountService AccountService\n}\n\ntype AppDeps struct {\n    Services ServiceDeps\n    EventBus EventBus\n    Fiber    *fiber.App\n}\n</code></pre>"},{"location":"refactoring/layered-dependency-injection.html#summary-table","title":"Summary Table","text":"Layer Depends On Example Components Infrastructure - DB, UOW Domain/Service Infrastructure Repos, Services Event Bus Service, Infra EventBus, Handlers App/API EventBus, Services Fiber, HTTP Handlers"},{"location":"refactoring/layered-dependency-injection.html#when-to-enhance","title":"When to Enhance","text":"<ul> <li>As the project grows and the number of dependencies increases</li> <li>When you want to enforce clean architecture boundaries</li> <li>When you need to swap out or mock dependencies for testing</li> </ul>"},{"location":"refactoring/layered-dependency-injection.html#final-thought","title":"Final Thought","text":"<p>Layered dependency injection and clear dependency direction are powerful tools for scaling Go projects. This document serves as a reference for future enhancements\u2014when you\u2019re ready, you can refactor your wiring to follow these patterns for even greater maintainability and clarity.</p>"},{"location":"refactoring/patterns.html","title":"Refactoring Patterns","text":""},{"location":"refactoring/patterns.html#overview","title":"\ud83d\udca1 Overview","text":"<p>This document summarizes the analysis and implementation of various design patterns for refactoring the account service in the fintech application. The goal was to reduce branching complexity and improve code organization in the <code>Deposit</code> and <code>Withdraw</code> methods.</p>"},{"location":"refactoring/patterns.html#reference-pkgregistry","title":"\ud83d\udce6 Reference: pkg/registry","text":"<p>The pkg/registry package provides a flexible, extensible registry system for managing entities (users, accounts, currencies, etc.) with support for:</p> <ul> <li>Abstractions:</li> <li><code>Entity</code> interface (property-style getters: <code>ID()</code>, <code>Name()</code>, <code>Active()</code>, <code>Metadata()</code>, etc.)</li> <li><code>RegistryProvider</code> interface for CRUD, search, metadata, and lifecycle operations</li> <li> <p>Observer/event bus, validation, caching, persistence, metrics, and health interfaces</p> </li> <li> <p>Patterns &amp; Architecture:</p> </li> <li>Clean separation of interface and implementation layers</li> <li>Builder and factory patterns for registry construction</li> <li>Event-driven and observer patterns for entity lifecycle events</li> <li> <p>Caching and persistence strategies (in-memory, file-based, etc.)</p> </li> <li> <p>Usage Examples:</p> </li> <li>Register, retrieve, update, and unregister entities</li> <li>Use memory cache, file persistence, and custom validation</li> <li> <p>Event-driven hooks for entity changes</p> </li> <li> <p>Best Practices:</p> </li> <li>Use property-style getters for all entities (e.g., <code>Name()</code>, not <code>GetName()</code>)</li> <li>Prefer registry interfaces for dependency inversion and testability</li> <li>Leverage event bus and observer for decoupled side effects (metrics, logging, etc.)</li> <li>Use the builder for complex configuration (caching, validation, persistence)</li> </ul>"},{"location":"refactoring/patterns.html#example-registering-an-entity","title":"\ud83e\uddea Example: Registering an Entity","text":"<pre><code>user := registry.NewBaseEntity(\"user-1\", \"John Doe\")\nuser.Metadata()[\"email\"] = \"john@example.com\"\nerr := registry.Register(ctx, user)\n</code></pre>"},{"location":"refactoring/patterns.html#example-custom-registry-with-caching-handleprocessed","title":"\ud83e\uddea Example: Custom Registry with Caching &amp; HandleProcessed","text":"<pre><code>reg, err := registry.NewRegistryBuilder().\n    WithName(\"prod-reg\").\n    WithCache(1000, 10*time.Minute).\n    WithPersistence(\"/data/entities.json\", 30*time.Second).\n    BuildRegistry()\n</code></pre> <p>Why use the registry?</p> <p>The registry pattern centralizes entity management, supports extensibility (events, validation, caching), and enforces clean architecture boundaries.</p> <p>See also: - <code>pkg/registry/README.md</code> for full documentation - <code>pkg/registry/interface.go</code> for all abstractions - <code>pkg/registry/examples_test.go</code> for usage patterns</p>"},{"location":"refactoring/patterns.html#initial-problem","title":"\u26a0\ufe0f Initial Problem","text":"<ul> <li>Significant code duplication (~150 lines of nearly identical logic)</li> <li>Complex branching around currency conversion and transaction handling</li> <li>Mixed responsibilities (validation, conversion, persistence, logging)</li> <li>Poor maintainability due to tightly coupled logic</li> </ul>"},{"location":"refactoring/patterns.html#strategy-pattern","title":"\ud83d\udee0\ufe0f Strategy Pattern","text":"<p>Approach:</p> <ul> <li>Extract common operation logic into a shared method using the strategy pattern for operation type.</li> <li>Use an <code>operationHandler</code> interface and concrete strategies for deposit/withdraw.</li> </ul> <p>Key Code:</p> <pre><code>// types.go\ntype OperationType string\n\nconst (\n    OperationDeposit  OperationType = \"deposit\"\n    OperationWithdraw OperationType = \"withdraw\"\n)\n\ntype operationHandler interface {\n    execute(account *account.Account, userID uuid.UUID, money mon.Money) (*account.Transaction, error)\n}\n\n// handlers.go\ntype depositHandler struct{}\nfunc (h *depositHandler) execute(account *account.Account, userID uuid.UUID, money mon.Money) (*account.Transaction, error) {\n    return account.Deposit(userID, money)\n}\n</code></pre> <p>When to Use:</p> <ul> <li>You have similar operations (deposit/withdraw) with shared logic but different details.</li> </ul> <p>Benefits:</p> Pattern Branching Extensibility Testability Complexity Go Idiomatic Strategy Low Good Good Medium \u2705 Command None Excellent Excellent High \u26a0\ufe0f Chain of Responsibility None Excellent Excellent Medium \u2705 Event-Driven None Excellent Good High \u26a0\ufe0f"},{"location":"refactoring/patterns.html#implementation-status","title":"\ud83e\uddf0 Implementation Status","text":"<ul> <li>\u2705 Strategy Pattern:  Implemented and fully discarded</li> <li>\u2705 Chain of Responsibility: Implemented</li> <li>\ud83d\udccb Command Pattern: Analyzed, ready for implementation if needed</li> <li>\u2705 Event-Driven: Implemented</li> </ul>"},{"location":"refactoring/patterns.html#code-quality-metrics","title":"\ud83e\uddea Code Quality Metrics","text":""},{"location":"refactoring/patterns.html#before-refactoring","title":"Before Refactoring","text":"<ul> <li>Lines of Code: ~566 lines in single file</li> <li>Cyclomatic Complexity: High (multiple nested if-else blocks)</li> <li>Code Duplication: ~150 lines duplicated between Deposit/Withdraw</li> <li>Maintainability: Poor (tightly coupled logic)</li> </ul>"},{"location":"refactoring/patterns.html#after-strategy-pattern","title":"After Strategy Pattern","text":"<ul> <li>Lines of Code: ~700 lines across 7 focused files</li> <li>Cyclomatic Complexity: Reduced (linear flow in executeOperation)</li> <li>Code Duplication: Eliminated</li> <li>Maintainability: Excellent (clear separation of concerns)</li> </ul>"},{"location":"refactoring/patterns.html#expected-after-chain-of-responsibility","title":"Expected After Chain of Responsibility","text":"<ul> <li>Lines of Code: ~800 lines across 10+ focused files</li> <li>Cyclomatic Complexity: Minimal (linear handler chain)</li> <li>Code Duplication: None</li> <li>Maintainability: Outstanding (single responsibility per handler)</li> </ul>"},{"location":"refactoring/patterns.html#recommendations","title":"\ud83c\udfc5 Recommendations","text":""},{"location":"refactoring/patterns.html#for-current-use-case","title":"For Current Use Case","text":"<p>Chain of Responsibility is the best fit because:</p> <ul> <li>Eliminates all branching in the service layer</li> <li>Maintains Go idioms and simplicity</li> <li>Provides excellent extensibility</li> <li>Each handler has a single, clear responsibility</li> <li>Easy to test and maintain</li> </ul>"},{"location":"refactoring/patterns.html#for-future-extensions","title":"For Future Extensions","text":"<p>Consider hybrid approaches:</p> <ul> <li>Strategy + Chain of Responsibility: Use strategy for operation type, chain for execution steps</li> <li>Synchronous + Event-Driven: Keep core business logic synchronous, use events for side effects (audit, notifications)</li> </ul>"},{"location":"refactoring/patterns.html#conclusion","title":"\ud83d\udd2e Conclusion","text":"<p>The refactoring journey demonstrates how different design patterns can address the same problem with varying trade-offs. The Strategy Pattern provided immediate benefits, while Chain of Responsibility offers the best long-term solution for this specific use case.</p> <p>The key insight is that pattern selection should be driven by specific requirements rather than following a one-size-fits-all approach. For fintech applications requiring high reliability and maintainability, the Chain of Responsibility pattern provides the optimal balance of simplicity, extensibility, and Go idiomaticity.</p>"},{"location":"refactoring/transaction-cqrs-refactor.html","title":"Transaction CQRS Refactor","text":""},{"location":"refactoring/transaction-cqrs-refactor.html#philosophy","title":"\ud83d\udca1 Philosophy","text":"<p>Tip</p> <p>Patterns are solutions, not goals. Let real problems lead you to the right design pattern, not the other way around.</p> <p>Adopting design patterns like CQRS should be a response to real, observed pain points in the system. This ensures architecture remains pragmatic, maintainable, and truly solves business needs, rather than introducing unnecessary complexity.</p>"},{"location":"refactoring/transaction-cqrs-refactor.html#motivation","title":"\ud83d\ude80 Motivation","text":"<p>Why CQRS?</p> <p>As our transaction persistence and event-driven flows have grown, we've encountered increasing complexity in balancing domain purity, auditability, and query flexibility. Our current approach mixes domain models for both writes and reads, leading to:</p> <ul> <li>Leaky abstractions between domain and infrastructure</li> <li>Difficulty evolving read models for reporting/audit</li> <li>Inflexible API responses and DTOs</li> </ul>"},{"location":"refactoring/transaction-cqrs-refactor.html#pain-points","title":"\u26a0\ufe0f Pain Points","text":"<p>Pain Points</p> <ul> <li>Domain Model Pollution:</li> <li>Read-specific fields and denormalized data are creeping into domain structs.</li> <li>Query Inflexibility:</li> <li>Hard to add computed/audit fields to API responses without polluting the domain.</li> <li>Audit &amp; Reporting:</li> <li>No clear place for audit trails, event history, or reporting fields.</li> <li>Separation of Concerns:</li> <li>Handlers and services are forced to map between domain and API models manually.</li> </ul>"},{"location":"refactoring/transaction-cqrs-refactor.html#cqrs-overview","title":"\ud83d\udd04 CQRS Overview","text":"<p>CQRS (Command Query Responsibility Segregation) separates write (command) and read (query) models:</p> <ul> <li>Write Models: Domain entities and command DTOs for create/update flows.</li> <li>Read Models: Read-optimized DTOs for queries, reporting, and API responses.</li> </ul>"},{"location":"refactoring/transaction-cqrs-refactor.html#proposed-changes","title":"\ud83d\udcdd Proposed Changes","text":"<ul> <li>Introduce <code>TransactionRead</code> DTO:</li> <li>A read-optimized struct for queries, API responses, and reporting.</li> <li>Repository Interface Refactor:</li> <li>Query methods (<code>Get</code>, <code>ListByUser</code>, <code>ListByAccount</code>, etc.) return <code>TransactionRead</code> instead of domain <code>Transaction</code>.</li> <li>Write methods (<code>Create</code>, <code>Update</code>, <code>PartialUpdate</code>, <code>Upsert</code>) continue to use domain models or command DTOs.</li> <li>Handler/Service Refactor:</li> <li>Handlers/services use the appropriate model for each operation, reducing mapping boilerplate.</li> <li>Documentation &amp; Migration:</li> <li>Document new flow and migration plan for existing code.</li> </ul>"},{"location":"refactoring/transaction-cqrs-refactor.html#benefits","title":"\u2b50 Benefits","text":"<ul> <li>Separation of Concerns:</li> <li>Domain model stays pure; read model evolves independently.</li> <li>Auditability:</li> <li>Read DTOs can include audit/event history fields.</li> <li>API Flexibility:</li> <li>Easier to shape API responses for frontend/reporting needs.</li> <li>Maintainability:</li> <li>Reduces coupling and manual mapping in handlers/services.</li> </ul>"},{"location":"refactoring/transaction-cqrs-refactor.html#enforcing-domain-invariants-with-dtos","title":"\ud83d\udee1\ufe0f Enforcing Domain Invariants with DTOs","text":"<p>A key best practice in CQRS and clean architecture is to keep all business rules and invariants in the domain layer, not in DTOs or repositories. Here\u2019s how to achieve this:</p> <ul> <li>DTOs are for data transfer only: They move data between layers (API, service, repository) and should not contain business logic or enforce invariants.</li> <li>Domain invariants live in the domain model: All validation and business rules (e.g., valid states, amount &gt; 0, currency checks) must be enforced in domain constructors, methods, or factories.</li> <li>Conversion step: When receiving a DTO (from API or repository), always convert it to a domain model before applying business logic. If the DTO is invalid, the conversion fails with a domain error.</li> <li>HandleProcessed: Repositories accept DTOs for storage, but domain logic is always applied before persistence. For reads, repositories return DTOs, and services/handlers convert to domain models if business logic is needed.</li> </ul> <p>Example Flow:</p> <ol> <li>Handler receives DTO from API.</li> <li>Service converts DTO to domain model (enforcing invariants).</li> <li>If valid, service calls repository to persist DTO.</li> <li>For queries, repository returns DTO; service converts to domain model if needed.</li> </ol> <p>This ensures domain purity, prevents leaking infrastructure concerns into the domain, and keeps business rules centralized and testable.</p>"},{"location":"refactoring/transaction-cqrs-refactor.html#sequence-diagram-enforcing-domain-invariants-with-dtos","title":"Sequence Diagram: Enforcing Domain Invariants with DTOs","text":"<p>```mermaid sequenceDiagram   participant API as \"API Handler\"   participant Service as \"Service Layer\"   participant Domain as \"Domain Model\"   participant Repo as \"Repository\"</p> <p>API-&gt;&gt;Service: Receives DTO   Service-&gt;&gt;Domain: Converts DTO to Domain Model (enforces invariants)   Domain--&gt;&gt;Service: Returns Domain Model or Error   Service-&gt;&gt;Repo: Persists DTO (if valid)   Repo--&gt;&gt;Service: Returns result   Repo-&gt;&gt;Service: Returns DTO (for queries)   Service-&gt;&gt;Domain: Converts DTO to Domain Model (if business logic needed)   Domain--&gt;&gt;Service: Returns Domain Model ```</p>"},{"location":"refactoring/transaction-cqrs-refactor.html#next-steps","title":"\u2705 Next Steps","text":"<p>Next Steps</p> <ul> <li>Define <code>TransactionRead</code> DTO and update repository interfaces.</li> <li>Refactor query methods to return read DTOs.</li> <li>Update handlers/services to use new models.</li> <li>Document migration and update tests.</li> </ul>"},{"location":"refactoring/transaction-persistence-refactor.html","title":"Transaction HandleProcessed Refactor","text":""},{"location":"refactoring/transaction-persistence-refactor.html#problem-statement","title":"Problem Statement","text":"<p>Why Refactor?</p> <p>As our event-driven payment flow has matured, we have encountered several architectural and maintainability issues with how transaction persistence is currently handled. These issues are impeding our ability to extend, test, and reason about the system as it grows.</p> <p>Pain Points</p> <ul> <li>Update vs. Create:<ul> <li>The current persistence logic sometimes creates new transactions at multiple points in the event chain (e.g., after conversion), rather than updating the original transaction created at the start of the flow.</li> <li>This leads to duplicate records, broken audit trails, and confusion about the true lifecycle of a transaction.</li> </ul> </li> <li>Repository Rigidity:<ul> <li>The <code>TransactionRepository</code> interface is too rigid, supporting only basic <code>Create</code> and <code>Update</code> methods.</li> <li>There is no support for partial updates, upserts, or updating by business keys (e.g., event ID, payment ID).</li> <li>This makes it hard to evolve the event-driven flow and add new business requirements (e.g., updating payment ID after initiation, or conversion info after currency conversion).</li> </ul> </li> <li>Domain Model Pollution:<ul> <li>Infrastructure-specific fields (e.g., <code>external_target</code>, <code>money_source</code>) are being added to the domain <code>Transaction</code> struct, rather than being kept in the infrastructure persistence model.</li> <li>This violates clean architecture principles and makes the domain model harder to reason about and test.</li> </ul> </li> <li>Event Handler Complexity:<ul> <li>Handlers use switch-cases or type assertions to handle multiple event types, rather than being single-responsibility.</li> <li>This increases coupling and reduces clarity.</li> </ul> </li> </ul>"},{"location":"refactoring/transaction-persistence-refactor.html#why-this-matters","title":"Why This Matters","text":"<ul> <li>Auditability:</li> <li>Financial systems require a clear, auditable trail of all transaction state changes. Duplicates or missing updates undermine trust and compliance.</li> <li>Extensibility:</li> <li>As we add new payment methods, currencies, and business rules, we need a flexible persistence layer that can evolve without breaking existing flows.</li> <li>Separation of Concerns:</li> <li>Clean separation between domain logic and infrastructure is essential for maintainability, testability, and onboarding new developers.</li> </ul>"},{"location":"refactoring/transaction-persistence-refactor.html#goals-for-the-refactor","title":"Goals for the Refactor","text":"<ul> <li>Single Source of Truth:</li> <li>Each transaction should be created once (at the start of the flow) and updated in-place as its state evolves.</li> <li>Flexible Repository Interface:</li> <li>Support for partial updates, upserts, and updates by business keys (event ID, payment ID, etc.).</li> <li>Domain/Infra Separation:</li> <li>Keep the domain model pure; use separate persistence models for the database layer.</li> <li>Handler Simplicity:</li> <li>Each event handler should have a single responsibility: either create or update, never both.</li> <li>Auditability and Traceability:</li> <li>Every state change should be recorded and attributable to a specific event in the flow.</li> </ul> <p>Next Steps</p> <ul> <li>Design new repository interfaces and persistence models.</li> <li>Refactor event handlers to update transactions in-place.</li> <li>Update migrations and DTOs as needed.</li> <li>Document the new flow and migration plan.</li> </ul>"},{"location":"refactoring/uow-pattern.html","title":"Unit of Work (UOW) Pattern","text":""},{"location":"refactoring/uow-pattern.html#overview","title":"\ud83c\udfc1 Overview","text":"<p>This document outlines the improvements made to the Unit of Work (UOW) pattern in the fintech application, focusing on maintaining transaction safety while improving type safety and developer experience.</p>"},{"location":"refactoring/uow-pattern.html#what-works-well","title":"\u2705 What Works Well","text":"<p>The current UOW pattern provides excellent transaction management:</p> <pre><code>// Current pattern - excellent transaction handling\nerr = s.uow.Do(context.Background(), func(uow repository.UnitOfWork) error {\n    // All operations use the same transaction session\n    repoAny, err := uow.GetRepository(reflect.TypeOf((*repository.AccountRepository)(nil)).Elem())\n    if err != nil {\n        return err\n    }\n    accountRepo := repoAny.(repository.AccountRepository)\n\n    // Business logic here...\n    return nil\n})\n</code></pre> <p>Benefits:</p> <ul> <li>\u2705 Automatic transaction boundaries - begin/commit/rollback handled automatically</li> <li>\u2705 Repository coordination - all repositories use same transaction session</li> <li>\u2705 Atomic operations - all-or-nothing semantics</li> <li>\u2705 Error handling - automatic rollback on any error</li> <li>\u2705 Clean architecture - business logic separated from infrastructure</li> </ul>"},{"location":"refactoring/uow-pattern.html#what-needs-improvement","title":"\u274c What Needs Improvement","text":"<p>The current pattern has some developer experience issues:</p> <pre><code>// Problems with current approach:\n// 1. Complex reflect syntax\n// 2. Type casting required\n// 3. Runtime errors possible\n// 4. Poor IDE support\nrepoAny, err := uow.GetRepository(reflect.TypeOf((*repository.AccountRepository)(nil)).Elem())\naccountRepo := repoAny.(repository.AccountRepository)\n</code></pre>"},{"location":"refactoring/uow-pattern.html#implementation","title":"\ud83d\udce6 Implementation","text":"<p>We've added type-safe convenience methods to the UOW interface:</p> <pre><code>// pkg/repository/uow.go\ntype UnitOfWork interface {\n    // Existing methods\n    Do(ctx context.Context, fn func(uow UnitOfWork) error) error\n    GetRepository(repoType reflect.Type) (any, error)\n\n    // New type-safe convenience methods\n    AccountRepository() (AccountRepository, error)\n    TransactionRepository() (TransactionRepository, error)\n    UserRepository() (UserRepository, error)\n}\n</code></pre>"},{"location":"refactoring/uow-pattern.html#implementation-in-infrastructure-layer","title":"Implementation in Infrastructure Layer","text":"<pre><code>// infra/repository/uow.go\nfunc (u *UoW) AccountRepository() (repository.AccountRepository, error) {\n    repoAny, err := u.GetRepository(reflect.TypeOf((*repository.AccountRepository)(nil)).Elem())\n    if err != nil {\n        return nil, err\n    }\n    return repoAny.(repository.AccountRepository), nil\n}\n\nfunc (u *UoW) TransactionRepository() (repository.TransactionRepository, error) {\n    repoAny, err := u.GetRepository(reflect.TypeOf((*repository.TransactionRepository)(nil)).Elem())\n    if err != nil {\n        return nil, err\n    }\n    return repoAny.(repository.TransactionRepository), nil\n}\n\nfunc (u *UoW) UserRepository() (repository.UserRepository, error) {\n    repoAny, err := u.GetRepository(reflect.TypeOf((*repository.UserRepository)(nil)).Elem())\n    if err != nil {\n        return nil, err\n    }\n    return repoAny.(repository.UserRepository), nil\n}\n</code></pre>"},{"location":"refactoring/uow-pattern.html#migration-notes","title":"\ud83d\ude80 Migration Notes","text":""},{"location":"refactoring/uow-pattern.html#before-current-pattern","title":"Before (Current Pattern)","text":"<pre><code>func (s *AccountService) Deposit(userID, accountID uuid.UUID, amount float64, currencyCode currency.Code) error {\n    return s.uow.Do(context.Background(), func(uow repository.UnitOfWork) error {\n        // Complex reflect-based repository access\n        repoAny, err := uow.GetRepository(reflect.TypeOf((*repository.AccountRepository)(nil)).Elem())\n        if err != nil {\n            return err\n        }\n        accountRepo := repoAny.(repository.AccountRepository)\n\n        txRepoAny, err := uow.GetRepository(reflect.TypeOf((*repository.TransactionRepository)(nil)).Elem())\n        if err != nil {\n            return err\n        }\n        txRepo := txRepoAny.(repository.TransactionRepository)\n\n        // Business logic...\n        return nil\n    })\n}\n</code></pre>"},{"location":"refactoring/uow-pattern.html#after-improved-pattern","title":"After (Improved Pattern)","text":"<pre><code>func (s *AccountService) Deposit(userID, accountID uuid.UUID, amount float64, currencyCode currency.Code) error {\n    return s.uow.Do(context.Background(), func(uow repository.UnitOfWork) error {\n        // Type-safe repository access - no reflect needed!\n        accountRepo, err := uow.AccountRepository()\n        if err != nil {\n            return err\n        }\n\n        txRepo, err := uow.TransactionRepository()\n        if err != nil {\n            return err\n        }\n\n        // Business logic...\n        return nil\n    })\n}\n</code></pre>"},{"location":"refactoring/uow-pattern.html#alternative-approaches-considered","title":"Alternative Approaches Considered","text":""},{"location":"refactoring/uow-pattern.html#1-string-based-repository-names","title":"1. String-Based Repository Names","text":"<pre><code>// Alternative: String-based approach\ntype StringBasedUnitOfWork interface {\n    GetRepository(repoName string) (any, error)\n}\n\n// Usage\naccountRepoAny, err := uow.GetRepository(\"account\")\naccountRepo := accountRepoAny.(repository.AccountRepository)\n</code></pre> <p>Pros:</p> <ul> <li>\u2705 Simpler API</li> <li>\u2705 More readable</li> <li>\u2705 No reflect in service code</li> </ul> <p>Cons:</p> <ul> <li>\u274c Runtime errors (typos)</li> <li>\u274c No IDE support</li> <li>\u274c No compile-time safety</li> </ul>"},{"location":"refactoring/uow-pattern.html#2-generic-repositories","title":"2. Generic Repositories","text":"<pre><code>// Alternative: Generic repositories\ntype GenericRepository[T any] interface {\n    Get(ctx context.Context, id uuid.UUID) (*T, error)\n    Create(ctx context.Context, entity *T) error\n    Update(ctx context.Context, entity *T) error\n    Delete(ctx context.Context, id uuid.UUID) error\n}\n\ntype GenericUnitOfWork interface {\n    AccountRepository() GenericRepository[account.Account]\n    TransactionRepository() GenericRepository[account.Transaction]\n}\n</code></pre> <p>Pros:</p> <ul> <li>\u2705 Full type safety</li> <li>\u2705 No reflect needed</li> <li>\u2705 Excellent IDE support</li> </ul> <p>Cons:</p> <ul> <li>\u274c More complex implementation</li> <li>\u274c Requires significant refactoring</li> <li>\u274c May not fit existing patterns</li> </ul>"},{"location":"refactoring/uow-pattern.html#recommended-migration-strategy","title":"Recommended Migration Strategy","text":""},{"location":"refactoring/uow-pattern.html#phase-1-add-type-safe-methods-complete","title":"Phase 1: Add Type-Safe Methods (\u2705 Complete)","text":"<ol> <li>\u2705 Add convenience methods to <code>UnitOfWork</code> interface</li> <li>\u2705 Implement methods in <code>UoW</code> struct</li> <li>\u2705 Maintain backward compatibility</li> </ol>"},{"location":"refactoring/uow-pattern.html#phase-2-update-service-code-recommended","title":"Phase 2: Update Service Code (Recommended)","text":"<p>Gradually update service methods to use the new convenience methods:</p> <pre><code>// Example: Update account service\nfunc (s *AccountService) executeOperation(req operationRequest, handler operationHandler) (result *operationResult, err error) {\n    err = s.uow.Do(context.Background(), func(uow repository.UnitOfWork) error {\n        // NEW: Use type-safe methods\n        accountRepo, err := uow.AccountRepository()\n        if err != nil {\n            return err\n        }\n\n        txRepo, err := uow.TransactionRepository()\n        if err != nil {\n            return err\n        }\n\n        // OLD: Remove reflect-based code\n        // repoAny, err := uow.GetRepository(reflect.TypeOf((*repository.AccountRepository)(nil)).Elem())\n        // accountRepo := repoAny.(repository.AccountRepository)\n\n        // Business logic remains the same...\n        return nil\n    })\n    return result, err\n}\n</code></pre>"},{"location":"refactoring/uow-pattern.html#phase-3-consider-future-enhancements","title":"Phase 3: Consider Future Enhancements","text":"<ol> <li>Generic repositories - For new services</li> <li>String-based approach - For dynamic repository loading</li> <li>Hybrid approach - Combine multiple patterns</li> </ol>"},{"location":"refactoring/uow-pattern.html#benefits","title":"\ud83d\udca1 Benefits","text":""},{"location":"refactoring/uow-pattern.html#developer-experience","title":"\u2705 Developer Experience","text":"<ol> <li>Type Safety - Compile-time error checking</li> <li>IDE Support - Autocomplete and refactoring</li> <li>Readability - Clean, self-documenting code</li> <li>Maintainability - Easier to understand and modify</li> </ol>"},{"location":"refactoring/uow-pattern.html#transaction-safety","title":"\u2705 Transaction Safety","text":"<ol> <li>All existing benefits preserved - No changes to transaction handling</li> <li>Same atomicity guarantees - All-or-nothing operations</li> <li>Same error handling - Automatic rollback on errors</li> <li>Same repository coordination - All repositories use same session</li> </ol>"},{"location":"refactoring/uow-pattern.html#backward-compatibility","title":"\u2705 Backward Compatibility","text":"<ol> <li>Existing code continues to work - <code>GetRepository()</code> method still available</li> <li>Gradual migration - Update services one by one</li> <li>No breaking changes - Same interface, additional methods</li> </ol>"},{"location":"refactoring/uow-pattern.html#code-examples","title":"Code Examples","text":""},{"location":"refactoring/uow-pattern.html#complete-service-example","title":"Complete Service Example","text":"<pre><code>type AccountService struct {\n    uow       repository.UnitOfWork\n    converter mon.CurrencyConverter\n    logger    *slog.Logger\n}\n\nfunc (s *AccountService) Deposit(userID, accountID uuid.UUID, amount float64, currencyCode currency.Code) error {\n    logger := s.logger.With(\"userID\", userID, \"accountID\", accountID, \"amount\", amount, \"currency\", currencyCode)\n    logger.Info(\"Deposit started\")\n\n    var tx *account.Transaction\n    var convInfo *common.ConversionInfo\n\n    err := s.uow.Do(context.Background(), func(uow repository.UnitOfWork) error {\n        // Type-safe repository access\n        accountRepo, err := uow.AccountRepository()\n        if err != nil {\n            logger.Error(\"Failed to get account repository\", \"error\", err)\n            return err\n        }\n\n        txRepo, err := uow.TransactionRepository()\n        if err != nil {\n            logger.Error(\"Failed to get transaction repository\", \"error\", err)\n            return err\n        }\n\n        // Get account\n        acc, err := accountRepo.Get(accountID)\n        if err != nil {\n            logger.Error(\"Account not found\", \"error\", err)\n            return account.ErrAccountNotFound\n        }\n\n        // Business logic...\n        tx, err = acc.Deposit(userID, money)\n        if err != nil {\n            return err\n        }\n\n        // Update account and create transaction\n        if err = accountRepo.Update(acc); err != nil {\n            return err\n        }\n        if err = txRepo.Create(tx); err != nil {\n            return err\n        }\n\n        return nil\n    })\n\n    if err != nil {\n        logger.Error(\"Deposit failed\", \"error\", err)\n        return err\n    }\n\n    logger.Info(\"Deposit successful\", \"transactionID\", tx.ID)\n    return nil\n}\n</code></pre>"},{"location":"refactoring/uow-pattern.html#testing-example","title":"Testing Example","text":"<pre><code>func TestAccountService_Deposit(t *testing.T) {\n    // Mock UOW with type-safe methods\n    mockUOW := &amp;MockUnitOfWork{\n        DoFunc: func(ctx context.Context, fn func(repository.UnitOfWork) error) error {\n            return fn(mockUOW)\n        },\n        AccountRepositoryFunc: func() (repository.AccountRepository, error) {\n            return mockAccountRepo, nil\n        },\n        TransactionRepositoryFunc: func() (repository.TransactionRepository, error) {\n            return mockTransactionRepo, nil\n        },\n    }\n\n    service := NewAccountService(mockUOW, converter, logger)\n\n    // Test implementation...\n}\n</code></pre>"},{"location":"refactoring/uow-pattern.html#conclusion","title":"Conclusion","text":"<p>The improved UOW pattern provides:</p> <ol> <li>\u2705 All existing transaction benefits - No compromise on data integrity</li> <li>\u2705 Better developer experience - Type safety and IDE support</li> <li>\u2705 Backward compatibility - Existing code continues to work</li> <li>\u2705 Gradual migration path - Update services incrementally</li> </ol> <p>Recommendation: Use the type-safe convenience methods for new code and gradually migrate existing services. The current UOW pattern is excellent - we've just made it even better! \ud83c\udf89</p>"},{"location":"requests/index.html","title":"API Requests","text":""},{"location":"requests/index.html#rest-client-vs-code-extension","title":"Rest Client Vs Code Extension","text":"<ul> <li>Account Requests</li> <li>Currency Requests</li> </ul>"}]}